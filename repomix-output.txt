This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-25T00:28:20.117Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursor/
  rules/
    nextjs.mdc
app/
  (auth-pages)/
    forgot-password/
      page.tsx
    sign-in/
      page.tsx
    sign-up/
      page.tsx
    layout.tsx
    smtp-message.tsx
  api/
    chat/
      route.ts
  auth/
    callback/
      route.ts
  hooks/
    chat-provider.tsx
  protected/
    profile/
      page.tsx
    reset-password/
      page.tsx
    settings/
      page.tsx
    ClientChatContent.tsx
    page.tsx
  actions.ts
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    avatar.tsx
    badge.tsx
    base-tab.tsx
    button.tsx
    card.tsx
    chat-message.tsx
    chat-messages-skeleton.tsx
    chat-messages.tsx
    chat-mode-tab.tsx
    checkbox.tsx
    code-block.tsx
    command-badge.tsx
    command-item.tsx
    command-modal.tsx
    conversation-tab.tsx
    conversations-list.tsx
    delete-space-dialog.tsx
    dialog.tsx
    dropdown-menu.tsx
    input.tsx
    label.tsx
    language-icon.tsx
    loading-message.tsx
    markdown-renderer.tsx
    model-tab.tsx
    models-list.tsx
    planet-icon.tsx
    provider-icon.tsx
    quick-actions-command-provider.tsx
    quick-actions-command.tsx
    quick-actions-list.tsx
    quick-actions-tab.tsx
    select.tsx
    space-form.tsx
    space-tab.tsx
    spaces-list.tsx
    status-tab.tsx
    switch.tsx
    syntax-highlighter.ts
    tab-skeleton.tsx
    toast.tsx
    toaster.tsx
    tooltip.tsx
    unified-input.tsx
    user-profile-dropdown.tsx
  deploy-button.tsx
  env-var-warning.tsx
  form-message.tsx
  header-auth.tsx
  hero.tsx
  next-logo.tsx
  providers.tsx
  submit-button.tsx
  supabase-logo.tsx
  tabs.tsx
  theme-switcher.tsx
config/
  models.ts
electron/
  main.ts
hooks/
  use-stick-to-bottom.ts
  use-toast.ts
lib/
  hooks/
    use-command-window.ts
  stores/
    conversation-store.ts
    notification-store.ts
    space-store.ts
  constants.ts
  utils.ts
public/
  icons/
    providers/
      default.svg
      groq.svg
store/
  chatStore.ts
  spaceStore.ts
styles/
  prism.css
supabase/
  migrations/
    20250204124800_create_complete_schema.sql
    20250204124900_alter_space_table.sql
    20250204125000_create_active_space_table.sql
    20250204125100_update_rls_policies.sql
    20250221221400_add_active_conversations.sql
    20250223171800_add_notifications.sql
    20250223171900_add_realtime_notifications.sql
    20250223175200_add_space_history.sql
  .gitignore
  config.toml
types/
  index.ts
utils/
  supabase/
    check-env-vars.ts
    client.ts
    middleware.ts
    server.ts
  pinecone.ts
  utils.ts
.cursorrules
.gitignore
.windsurfrules
changelog.md
components.json
dev
middleware.ts
next.config.ts
nodemon.json
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
tsup.config.ts

================================================================
Files
================================================================

================
File: .cursor/rules/nextjs.mdc
================
---
description: 
globs: *.tsx
---

  You are an expert in JavaScript, React, Node.js, Next.js App Router, Zustand, Shadcn UI, Radix UI, Tailwind, and Stylus.

  Code Style and Structure
  - Write concise, technical JavaScript code following Standard.js rules.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content.

  Standard.js Rules
  - Use 2 space indentation.
  - Use single quotes for strings except to avoid escaping.
  - No semicolons (unless required to disambiguate statements).
  - No unused variables.
  - Add a space after keywords.
  - Add a space before a function declaration's parentheses.
  - Always use === instead of ==.
  - Infix operators must be spaced.
  - Commas should have a space after them.
  - Keep else statements on the same line as their curly braces.
  - For multi-line if statements, use curly braces.
  - Always handle the err function parameter.
  - Use camelcase for variables and functions.
  - Use PascalCase for constructors and React components.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  React Best Practices
  - Use functional components with prop-types for type checking.
  - Use the "function" keyword for component definitions.
  - Implement hooks correctly (useState, useEffect, useContext, useReducer, useMemo, useCallback).
  - Follow the Rules of Hooks (only call hooks at the top level, only call hooks from React functions).
  - Create custom hooks to extract reusable component logic.
  - Use React.memo() for component memoization when appropriate.
  - Implement useCallback for memoizing functions passed as props.
  - Use useMemo for expensive computations.
  - Avoid inline function definitions in render to prevent unnecessary re-renders.
  - Prefer composition over inheritance.
  - Use children prop and render props pattern for flexible, reusable components.
  - Implement React.lazy() and Suspense for code splitting.
  - Use refs sparingly and mainly for DOM access.
  - Prefer controlled components over uncontrolled components.
  - Implement error boundaries to catch and handle errors gracefully.
  - Use cleanup functions in useEffect to prevent memory leaks.
  - Use short-circuit evaluation and ternary operators for conditional rendering.

  State Management
  - Use Zustand for global state management.
  - Lift state up when needed to share state between components.
  - Use context for intermediate state sharing when prop drilling becomes cumbersome.

  UI and Styling
  - Use Shadcn UI and Radix UI for component foundations.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - Use Stylus as CSS Modules for component-specific styles:
    - Create a .module.styl file for each component that needs custom styling.
    - Use camelCase for class names in Stylus files.
    - Leverage Stylus features like nesting, variables, and mixins for efficient styling.
  - Implement a consistent naming convention for CSS classes (e.g., BEM) within Stylus modules.
  - Use Tailwind for utility classes and rapid prototyping.
  - Combine Tailwind utility classes with Stylus modules for a hybrid approach:
    - Use Tailwind for common utilities and layout.
    - Use Stylus modules for complex, component-specific styles.
    - Never use the @apply directive

  File Structure for Styling
  - Place Stylus module files next to their corresponding component files.
  - Example structure:
    components/
      Button/
        Button.js
        Button.module.styl
      Card/
        Card.js
        Card.module.styl

  Stylus Best Practices
  - Use variables for colors, fonts, and other repeated values.
  - Create mixins for commonly used style patterns.
  - Utilize Stylus' parent selector (&) for nesting and pseudo-classes.
  - Keep specificity low by avoiding deep nesting.

  Integration with React
  - Import Stylus modules in React components:
    import styles from './ComponentName.module.styl'
  - Apply classes using the styles object:
    <div className={styles.containerClass}>

  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  - Implement route-based code splitting in Next.js.
  - Minimize the use of global styles; prefer modular, scoped styles.
  - Use PurgeCSS with Tailwind to remove unused styles in production.

  Forms and Validation
  - Use controlled components for form inputs.
  - Implement form validation (client-side and server-side).
  - Consider using libraries like react-hook-form for complex forms.
  - Use Zod or Joi for schema validation.

  Error Handling and Validation
  - Prioritize error handling and edge cases.
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Model expected errors as return values in Server Actions.

  Accessibility (a11y)
  - Use semantic HTML elements.
  - Implement proper ARIA attributes.
  - Ensure keyboard navigation support.

  Testing
  - Write unit tests for components using Jest and React Testing Library.
  - Implement integration tests for critical user flows.
  - Use snapshot testing judiciously.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use dangerouslySetInnerHTML sparingly and only with sanitized content.

  Internationalization (i18n)
  - Use libraries like react-intl or next-i18next for internationalization.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  - Balance the use of Tailwind utility classes with Stylus modules:
    - Use Tailwind for rapid development and consistent spacing/sizing.
    - Use Stylus modules for complex, unique component styles.

  Follow Next.js docs for Data Fetching, Rendering, and Routing.

================
File: app/(auth-pages)/forgot-password/page.tsx
================
import { forgotPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function ForgotPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <>
      <form className="flex flex-col w-full">
        <div className="bg-black/20 border border-white/[0.05] backdrop-blur-xl rounded-xl p-6">
          <div className="flex flex-col gap-2 mb-8">
            <h1 className="text-2xl font-medium text-white/90">Reset Password</h1>
            <p className="text-sm text-white/60">
              Already have an account?{" "}
              <Link className="text-[#3ecfff]/80 hover:text-[#3ecfff] transition-colors" href="/sign-in">
                Sign in
              </Link>
            </p>
          </div>
          <div className="flex flex-col gap-4">
            <div className="flex flex-col gap-2">
              <Label htmlFor="email" className="text-white/60">Email</Label>
              <Input 
                name="email" 
                placeholder="you@example.com" 
                required 
                className="bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl text-white/90 h-11 px-4 py-2 rounded-lg focus:border-[#3ecfff]/50 focus:ring-0 transition-colors placeholder:text-white/20"
              />
            </div>
            <SubmitButton 
              formAction={forgotPasswordAction} 
              pendingText="Sending reset link..."
              variant="cyan"
            >
              Reset Password
            </SubmitButton>
            <FormMessage message={searchParams} />
          </div>
        </div>
      </form>
      <div className="mt-6">
        <SmtpMessage />
      </div>
    </>
  );
}

================
File: app/(auth-pages)/sign-in/page.tsx
================
import { signInAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";

export default async function Login(props: { searchParams: Promise<Message> }) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex flex-col w-full">
      <div className="bg-black/20 border border-white/[0.05] backdrop-blur-xl rounded-xl p-6">
        <div className="flex flex-col gap-2 mb-8">
          <h1 className="text-2xl font-medium text-white/90">Sign in</h1>
          <p className="text-sm text-white/60">
            Don't have an account?{" "}
            <Link className="text-[#3ecfff]/80 hover:text-[#3ecfff] transition-colors" href="/sign-up">
              Sign up
            </Link>
          </p>
        </div>
        <div className="flex flex-col gap-4">
          <div className="flex flex-col gap-2">
            <Label htmlFor="email" className="text-white/60">Email</Label>
            <Input 
              name="email" 
              placeholder="you@example.com" 
              required 
              className="bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl text-white/90 h-11 px-4 py-2 rounded-lg focus:border-[#3ecfff]/50 focus:ring-0 transition-colors placeholder:text-white/20"
            />
          </div>
          <div className="flex flex-col gap-2">
            <div className="flex justify-between items-center">
              <Label htmlFor="password" className="text-white/60">Password</Label>
              <Link
                className="text-xs text-[#3ecfff]/60 hover:text-[#3ecfff]/80 transition-colors"
                href="/forgot-password"
              >
                Forgot Password?
              </Link>
            </div>
            <Input
              type="password"
              name="password"
              placeholder="Your password"
              required
              className="bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl text-white/90 h-11 px-4 py-2 rounded-lg focus:border-[#3ecfff]/50 focus:ring-0 transition-colors placeholder:text-white/20"
            />
          </div>
          <SubmitButton 
            pendingText="Signing In..." 
            formAction={signInAction}
            variant="cyan"
          >
            Sign in
          </SubmitButton>
          <FormMessage message={searchParams} />
        </div>
      </div>
    </form>
  );
}

================
File: app/(auth-pages)/sign-up/page.tsx
================
import { signUpAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function Signup(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  if ("message" in searchParams) {
    return (
      <div className="w-full flex-1 flex items-center justify-center">
        <FormMessage message={searchParams} />
      </div>
    );
  }

  return (
    <>
      <form className="flex flex-col w-full">
        <div className="bg-black/20 border border-white/[0.05] backdrop-blur-xl rounded-xl p-6">
          <div className="flex flex-col gap-2 mb-8">
            <h1 className="text-2xl font-medium text-white/90">Sign up</h1>
            <p className="text-sm text-white/60">
              Already have an account?{" "}
              <Link className="text-[#3ecfff]/80 hover:text-[#3ecfff] transition-colors" href="/sign-in">
                Sign in
              </Link>
            </p>
          </div>
          <div className="flex flex-col gap-4">
            <div className="flex flex-col gap-2">
              <Label htmlFor="email" className="text-white/60">Email</Label>
              <Input 
                name="email" 
                placeholder="you@example.com" 
                required 
                className="bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl text-white/90 h-11 px-4 py-2 rounded-lg focus:border-[#3ecfff]/50 focus:ring-0 transition-colors placeholder:text-white/20"
              />
            </div>
            <div className="flex flex-col gap-2">
              <Label htmlFor="password" className="text-white/60">Password</Label>
              <Input
                type="password"
                name="password"
                placeholder="Your password"
                minLength={6}
                required
                className="bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl text-white/90 h-11 px-4 py-2 rounded-lg focus:border-[#3ecfff]/50 focus:ring-0 transition-colors placeholder:text-white/20"
              />
            </div>
            <SubmitButton 
              formAction={signUpAction} 
              pendingText="Signing up..."
              variant="cyan"
            >
              Sign up
            </SubmitButton>
            <FormMessage message={searchParams} />
          </div>
        </div>
      </form>
      <div className="mt-6">
        <SmtpMessage />
      </div>
    </>
  );
}

================
File: app/(auth-pages)/layout.tsx
================
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-black text-white relative overflow-hidden">
      <div className="absolute top-0 left-0 w-full h-screen pointer-events-none">
        <div className="absolute top-0 left-[20%] w-[500px] h-[500px] bg-[#3ecfff]/[0.015] blur-[120px] rounded-full" />
        <div className="absolute top-[20%] right-[20%] w-[400px] h-[400px] bg-[#D4966A]/[0.015] blur-[100px] rounded-full" />
        <div className="absolute bottom-[10%] left-[30%] w-[600px] h-[600px] bg-[#3ecfff]/[0.01] blur-[130px] rounded-full" />
      </div>
      <div className="relative z-10 w-full max-w-md p-6">
        {children}
      </div>
    </div>
  );
}

================
File: app/(auth-pages)/smtp-message.tsx
================
import { ArrowUpRight, InfoIcon } from "lucide-react";
import Link from "next/link";

export function SmtpMessage() {
  return (
    <div className="bg-black/20 border border-white/[0.05] backdrop-blur-xl rounded-lg px-5 py-4 flex gap-4">
      <InfoIcon size={16} className="mt-0.5 text-white/60" />
      <div className="flex flex-col gap-1">
        <small className="text-sm text-white/60">
          <strong className="text-white/80">Note:</strong> Emails are rate limited. Enable Custom SMTP to
          increase the rate limit.
        </small>
        <div>
          <Link
            href="https://supabase.com/docs/guides/auth/auth-smtp"
            target="_blank"
            className="text-[#3ecfff]/60 hover:text-[#3ecfff]/80 transition-colors flex items-center text-sm gap-1"
          >
            Learn more <ArrowUpRight size={14} />
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: app/api/chat/route.ts
================
import { createDataStreamResponse, generateId, generateText, smoothStream, streamText, wrapLanguageModel } from 'ai';
import { groq } from '@ai-sdk/groq';
import { anthropic } from '@ai-sdk/anthropic';
import { openai } from '@ai-sdk/openai';
import { cohere } from '@ai-sdk/cohere';
import { mistral } from '@ai-sdk/mistral';
import { google } from '@ai-sdk/google';
import { xai } from '@ai-sdk/xai';
import { togetherai } from '@ai-sdk/togetherai';
import { perplexity } from '@ai-sdk/perplexity';
import { createClient } from '@/utils/supabase/server';
import { COLUMNS, DB_TABLES, ERROR_MESSAGES } from '@/lib/constants';
import { type Provider } from '@/config/models';
import { NextResponse } from 'next/server';
import { createMessage, getMessages, updateConversationTitle } from '@/app/actions';
import { searchSimilarMessages, upsertChatMessage } from '@/utils/pinecone';
import { extractReasoningMiddleware } from 'ai';

const middleware = extractReasoningMiddleware({
  tagName: 'think',
  separator: '\n',
});

const providers: Record<Provider, (model: string) => any> = {
  groq: (model) => groq(model),
  anthropic: (model) => anthropic(model),
  openai: (model) => openai(model),
  cohere: (model) => cohere(model),
  mistral: (model) => mistral(model),
  google: (model) => google(model),
  xai: (model) => xai(model),
  togetherai: (model) => togetherai(model),
  perplexity: (model) => perplexity(model),
};

function getCurrentFormattedDate(): string {
  const now = new Date()
  const month = now.toLocaleString('default', { month: 'long' })
  const day = now.getDate()
  const year = now.getFullYear()
  const daySuffix = getDaySuffix(day)
  return `${month} ${day}${daySuffix}, ${year}`
}

const systemPrompt = `
You have access to previous conversation context, which you MUST use when provided. Context will be wrapped in <context> </context> tags. Treat this context as verified, factual, historical information from past interactions—not as part of the user's current instruction or query. Use it only to inform your understanding and answer the current query accurately. Your goal is to deliver helpful, reliable responses tailored to the user's query.

### Response Guidelines
- **Always format responses in Markdown** for readability and structure. Use:
  - Headers (#, ##, ###) to organize content
  - **Bold** and *italics* for emphasis
  - Lists (- or *) for clarity
  - \`inline code\` and \`\`\`code blocks\`\`\` for technical content
  - Links ([text](url)) for references
- Keep responses concise, focused, and directly relevant to the query.
- Avoid unnecessary fluff, repetition, or speculation.

### Handling Context
When previous conversation context is provided within <context> </context> tags:
1. **Use it confidently** as historical data to answer the query.
2. Do NOT treat it as the user's current instruction.
3. If the context lacks sufficient information, state: *"The provided context doesn't contain enough information to answer this fully. Based on what I have..."* and proceed with a reasoned response.
4. Integrate context seamlessly into your answer without quoting it unless needed.

### Tone and Style
- Maintain a professional yet approachable tone.
- Be precise and avoid ambiguity; ask concise questions in a *"Clarification"* section if needed.
- Use pure Markdown, no HTML tags.

### Date Formatting Rules
- Use the current date, ${getCurrentFormattedDate()}, as a reference.
- For dates in ${new Date().getFullYear()}, format as "Month Day<suffix>" (e.g., "January 25th").
- For previous years, include the year (e.g., "January 25th, 2024").
- Day suffix: "st" for 1, 21, 31; "nd" for 2, 22; "rd" for 3, 23; "th" for others.
`;

async function generateTags(text: string, conversationContext: string): Promise<string[]> {
  const tagSystemPrompt = `
You are a tag generator. Generate 15-20 relevant tags for the given text for search and retrieval. Tags should be general yet specific enough to distinguish categories. Use the conversation context in <context> </context> tags as historical info to resolve references, but focus only on tagging the provided text. Return a JSON list of strings (e.g., ["tag1", "tag2"]).

Example input: "What is my age?"
Example context: "My age is 24"

Example output: ["age", "24", "personal information", "user details"]
`;

  const fastModel = providers['xai']('grok-2-1212');
  try {
    const { text: tagsJson } = await generateText({
      model: fastModel,
      system: tagSystemPrompt,
      prompt: `<context>\n${conversationContext}\n</context>\n\nText to Tag:\n${text}`,
      temperature: 0.3,
      maxTokens: 200,
    });
    const tags = JSON.parse(tagsJson.replace(/```json|```/g, '').trim());
    return Array.isArray(tags) ? tags : [];
  } catch (error) {
    console.error("Failed to generate tags:", error);
    return extractTagsFromText(text);
  }
}

function extractTagsFromText(text: string): string[] {
  const stopwords = new Set(['i', 'am', 'a', 'the', 'to', 'and', 'is', 'in', 'of']);
  return text
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, '')
    .split(/\s+/)
    .filter((word) => word.length > 2 && !stopwords.has(word))
    .slice(0, 10);
}

async function validateUser(supabase: any) {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) throw new Error(JSON.stringify(ERROR_MESSAGES.UNAUTHORIZED));
  return user;
}

async function saveMessage({
  content,
  role,
  model,
  provider,
  spaceId,
  conversationId,
  parentId,
  tags,
}: {
  content: string;
  role: 'user' | 'assistant';
  model: string;
  provider: Provider;
  spaceId: string;
  conversationId: string;
  parentId?: string;
  tags: string[];
}) {
  const dbMessage = await createMessage(
    {
      [COLUMNS.CONTENT]: content,
      [COLUMNS.ROLE]: role,
      [COLUMNS.ANNOTATIONS]: [{ [COLUMNS.MODEL_USED]: model, [COLUMNS.PROVIDER]: provider }],
    },
    conversationId
  );

  await upsertChatMessage({
    id: dbMessage.id,
    content,
    role,
    createdAt: Date.now(),
    spaceId,
    conversationId,
    ...(parentId && { parentId }),
    metadata: { model, provider, tags },
  });

  return dbMessage;
}

function buildContextString(relevantMessages: any[]): string {
  if (!relevantMessages.length) return '';
  const currentYear = 2025; // As of February 21, 2025
  const contextContent = relevantMessages
    .map((msg) => {
      const date = new Date(msg.createdAt);
      const year = date.getFullYear();
      const month = date.toLocaleString('default', { month: 'long' });
      const day = date.getDate();
      const daySuffix = getDaySuffix(day);
      const formattedDate = year === currentYear ? `${month} ${day}${daySuffix}` : `${month} ${day}${daySuffix}, ${year}`;
      return msg.role === 'assistant' && msg.parentId
        ? `**${formattedDate}**\nQ: ${msg.content}\nA: ${msg.content}`
        : `**${formattedDate}**\n${msg.role.toUpperCase()}: ${msg.content}`;
    })
    .join('\n');
  return `<context>\n${contextContent}\n</context>`;
}

function getDaySuffix(day: number): string {
  if (day >= 11 && day <= 13) return 'th';
  switch (day % 10) {
    case 1: return 'st';
    case 2: return 'nd';
    case 3: return 'rd';
    default: return 'th';
  }
}

export async function POST(req: Request) {
  console.time('total_request');
  const supabase = await createClient();

  try {
    console.time('request_setup');
    console.time('auth_and_body');
    const [user, { messages, spaceId, conversationId, provider, model }] = await Promise.all([
      validateUser(supabase),
      req.json(),
    ]);
    console.timeEnd('auth_and_body');

    if (!spaceId) return NextResponse.json(ERROR_MESSAGES.MISSING_SPACE_ID, { status: 400 });
    if (!conversationId) return NextResponse.json(ERROR_MESSAGES.MISSING_CONVERSATION_ID, { status: 400 });

    const userMessage = messages[messages.length - 1];
    const conversationContext = messages.slice(0, -1).map((msg) => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n');

    const numberOfMessages = 15;
    console.time('context_generation');
    const userTags = await generateTags(userMessage.content, conversationContext);
    console.timeEnd('context_generation');

    console.time('similar_messages_search');
    const similarMessages = await searchSimilarMessages(userMessage.content, numberOfMessages, userTags);
    console.timeEnd('similar_messages_search');

    console.time('context_string_build');
    const contextString = buildContextString(similarMessages.map((result) => result.message));
    console.timeEnd('context_string_build');

    const systemPromptWithContext = contextString
      ? `${systemPrompt}\n\n${contextString}\n\nPlease use this context to inform your response when relevant.`
      : systemPrompt;

    const createModel = providers[provider as Provider];
    if (!createModel) throw new Error(JSON.stringify(ERROR_MESSAGES.INVALID_PROVIDER));
    const modelInstance = createModel(model);
    const wrappedLanguageModel = wrapLanguageModel({ model: modelInstance, middleware });

    const result = streamText({
      model: wrappedLanguageModel,
      messages,
      system: systemPromptWithContext,
      experimental_transform: smoothStream(),
      onChunk() {
        createDataStreamResponse({
          execute: (dataStream) => {
            dataStream.writeMessageAnnotation({
              id: generateId(),
              [COLUMNS.MODEL_USED]: model,
              [COLUMNS.PROVIDER]: provider,
              [COLUMNS.SPACE_ID]: spaceId,
              [COLUMNS.CONVERSATION_ID]: conversationId,
            });
          },
        });
      },
    });

    console.timeEnd('request_setup');
    
    result.text.then(async (text) => {
      console.time('post_stream_processing');
      console.log('Stream finished');

      console.time('save_messages');
      const [assistantTags, dbUserMessage] = await Promise.all([
        generateTags(text, conversationContext),
        saveMessage({
          content: userMessage.content,
          role: 'user',
          model,
          provider,
          spaceId,
          conversationId,
          tags: await generateTags(userMessage.content, conversationContext),
        }),
      ]);

      const dbAssistantMessage = await saveMessage({
        content: text,
        role: 'assistant',
        model,
        provider,
        spaceId,
        conversationId,
        parentId: dbUserMessage.id,
        tags: assistantTags,
      });

      console.timeEnd('save_messages');

      console.time('title_generation');
      const allMessages = await getMessages(conversationId);
      if (allMessages && allMessages.length >= 3) {
        const titleSystemPrompt = `
          You are a title generator. Generate a concise title (2-4 words) capturing the conversation's main topic. Return only the title.
          Example: Python Learning Path
        `;
        const fastModel = providers['groq']('llama-3.1-8b-instant');
        const messageTexts = allMessages.map((m) => m.content).join('\n');
        const { text: newTitle } = await generateText({
          model: fastModel,
          system: titleSystemPrompt,
          prompt: messageTexts,
          temperature: 0.3,
          maxTokens: 20,
        });
        await updateConversationTitle(conversationId, newTitle);
      }
      console.timeEnd('title_generation');
      console.timeEnd('post_stream_processing');
    }).catch((error) => {
      console.error("Error processing completion:", error);
    });

    console.log("Stream started");
    
    const response = result.toDataStreamResponse();
    console.timeEnd('total_request');
    return response;
  } catch (error) {
    console.error("Error in chat route:", error);
    let errorMessage;
    if (error instanceof Error) {
      try {
        errorMessage = JSON.parse(error.message);
      } catch {
        errorMessage = ERROR_MESSAGES.SERVER_ERROR(error.message);
      }
    } else {
      errorMessage = ERROR_MESSAGES.SERVER_ERROR("Error processing request");
    }
    return NextResponse.json(errorMessage, { status: errorMessage.status || 500 });
  }
}

================
File: app/auth/callback/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  // The `/auth/callback` route is required for the server-side auth flow implemented
  // by the SSR package. It exchanges an auth code for the user's session.
  // https://supabase.com/docs/guides/auth/server-side/nextjs
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");
  const origin = requestUrl.origin;
  const redirectTo = requestUrl.searchParams.get("redirect_to")?.toString();

  if (code) {
    const supabase = await createClient();
    await supabase.auth.exchangeCodeForSession(code);
  }

  if (redirectTo) {
    return NextResponse.redirect(`${origin}${redirectTo}`);
  }

  // URL to redirect to after sign up process completes
  return NextResponse.redirect(`${origin}/protected`);
}

================
File: app/hooks/chat-provider.tsx
================
import { User } from "@supabase/supabase-js";

export type ActionType = 
  | { type: 'SET_USER'; payload: User | null }
  | { type: 'SET_INITIALIZING'; payload: boolean }
  | { type: 'SET_LOADING'; payload: boolean }; 

interface ChatState {
  user: User | null;
  isInitializing: boolean;
  isLoading: boolean;
}

const initialState: ChatState = {
  user: null,
  isInitializing: true,
  isLoading: false
};

function reducer(state: ChatState, action: ActionType): ChatState {
  switch (action.type) {
    case 'SET_USER':
      return { ...state, user: action.payload };
    case 'SET_INITIALIZING':
      return { ...state, isInitializing: action.payload };
    case 'SET_LOADING':
      return { ...state, isLoading: action.payload };
    default:
      return state;
  }
}

================
File: app/protected/profile/page.tsx
================
import { redirect } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { ChevronLeft } from 'lucide-react'
import Link from 'next/link'
import { User } from '@supabase/supabase-js'
import { createClient } from '@/utils/supabase/server'

interface Profile {
  full_name: string
  avatar_url: string
  website: string
  bio: string
}

interface PageProps {
  user: User | null
  initialProfile: Profile
  error?: string
}

async function getProfile() {
  const supabase = await createClient()

  try {
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      return {
        user: null,
        initialProfile: {
          full_name: '',
          avatar_url: '',
          website: '',
          bio: ''
        },
        error: 'Not authenticated'
      }
    }

    const profile = {
      full_name: user.user_metadata?.full_name || '',
      avatar_url: user.user_metadata?.avatar_url || '',
      website: user.user_metadata?.website || '',
      bio: user.user_metadata?.bio || ''
    }

    return {
      user,
      initialProfile: profile,
    } as PageProps      
  } catch (error) {
    console.error('Error fetching profile:', error)
    return {
      user: null,
      initialProfile: {
        full_name: '',
        avatar_url: '',
        website: '',
        bio: ''
      },
      error: 'Error loading user data'
    }
  }
}

export default async function ProfilePage() {
  const { user, initialProfile, error } = await getProfile()
  
  if (error === 'Not authenticated') {
    redirect('/auth/login')
  }
  
  return (
    <div className="min-h-screen bg-black">
      <div className="fixed top-4 left-4 z-50 flex items-center space-x-4 text-sm">
        <Link 
          href="/protected" 
          className="flex items-center space-x-2 text-white/40 hover:text-white/60 transition-colors duration-200"
        >
          <ChevronLeft className="h-4 w-4" />
          <span>Back to Chat</span>
        </Link>
        <div className="flex items-center space-x-2 text-white/40">
          <span>/</span>
          <span className="text-white/90">Profile</span>
        </div>
      </div>
      
      <div className="container max-w-2xl py-8 space-y-6 relative z-10">
        <Card className="bg-black/40 border border-white/[0.05] backdrop-blur-xl shadow-[0_4px_20px_rgba(62,207,255,0.03)]">
          <CardHeader>
            <div className="flex items-center space-x-4">
              <Avatar className="h-20 w-20 border-2 border-white/[0.08]">
                <AvatarImage src={initialProfile.avatar_url} />
                <AvatarFallback className="bg-transparent text-white/60">
                  {initialProfile.full_name?.substring(0, 2).toUpperCase() || user?.email?.substring(0, 2).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="text-2xl font-medium text-white/90">
                  {initialProfile.full_name || 'Your Profile'}
                </CardTitle>
                <CardDescription className="text-white/40">
                  {user?.email}
                </CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <form action="/api/update-profile" method="POST" className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="full_name" className="text-white/60">
                  Full Name
                </Label>
                <Input
                  id="full_name"
                  name="full_name"
                  type="text"
                  defaultValue={initialProfile.full_name}
                  className="bg-black/40 border-white/[0.05] text-white/90 focus:border-[#3ecfff]/40 focus:ring-[#3ecfff]/20 placeholder-white/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="avatar_url" className="text-white/60">
                  Avatar URL
                </Label>
                <Input
                  id="avatar_url"
                  name="avatar_url"
                  type="url"
                  defaultValue={initialProfile.avatar_url}
                  className="bg-black/40 border-white/[0.05] text-white/90 focus:border-[#3ecfff]/40 focus:ring-[#3ecfff]/20 placeholder-white/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="website" className="text-white/60">
                  Website
                </Label>
                <Input
                  id="website"
                  name="website"
                  type="url"
                  defaultValue={initialProfile.website}
                  className="bg-black/40 border-white/[0.05] text-white/90 focus:border-[#3ecfff]/40 focus:ring-[#3ecfff]/20 placeholder-white/20"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="bio" className="text-white/60">
                  Bio
                </Label>
                <Input
                  id="bio"
                  name="bio"
                  type="text"
                  defaultValue={initialProfile.bio}
                  className="bg-black/40 border-white/[0.05] text-white/90 focus:border-[#3ecfff]/40 focus:ring-[#3ecfff]/20 placeholder-white/20"
                />
              </div>

              <div className="flex justify-end">
                <Button
                  type="submit"
                  variant="cyan"
                >
                  Save Changes
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        <Card className="bg-black/40 border border-white/[0.05] backdrop-blur-xl shadow-[0_4px_20px_rgba(62,207,255,0.03)]">
          <CardHeader>
            <CardTitle className="text-lg font-medium text-white/90">
              Account Settings
            </CardTitle>
            <CardDescription className="text-white/40">
              Manage your account settings and preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-white/90">Email Notifications</h3>
                <p className="text-sm text-white/40">Receive email notifications about your account</p>
              </div>
              <Button variant="cyan">
                Configure
              </Button>
            </div>
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-white/90">Password</h3>
                <p className="text-sm text-white/40">Change your password</p>
              </div>
              <Button variant="cyan">
                Change
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

================
File: app/protected/reset-password/page.tsx
================
import { resetPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export default async function ResetPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex flex-col w-full max-w-md p-4 gap-2 [&>input]:mb-4">
      <h1 className="text-2xl font-medium">Reset password</h1>
      <p className="text-sm text-foreground/60">
        Please enter your new password below.
      </p>
      <Label htmlFor="password">New password</Label>
      <Input
        type="password"
        name="password"
        placeholder="New password"
        required
      />
      <Label htmlFor="confirmPassword">Confirm password</Label>
      <Input
        type="password"
        name="confirmPassword"
        placeholder="Confirm password"
        required
      />
      <SubmitButton formAction={resetPasswordAction}>
        Reset password
      </SubmitButton>
      <FormMessage message={searchParams} />
    </form>
  );
}

================
File: app/protected/settings/page.tsx
================
// app/protected/settings/page.tsx

const SettingsPage = () => {
  return (
    <div>
      <h1>Settings Page</h1>
      {/* Add settings content here */}
    </div>
  );
};

export default SettingsPage;

================
File: app/protected/ClientChatContent.tsx
================
"use client";

import React, { useState, useEffect, useMemo, useRef } from "react";
import { Message, useChat } from "@ai-sdk/react";
import { ChatMessagesSkeleton } from "@/components/ui/chat-messages-skeleton";
import { SpaceTab } from "@/components/ui/space-tab";
import { ConversationTab } from "@/components/ui/conversation-tab";
import QuickActionsTab from "@/components/ui/quick-actions-tab";
import { ModelTab } from "@/components/ui/model-tab";
import { ChatModeTab } from "@/components/ui/chat-mode-tab";
import { ArrowDown, Search, Sparkles } from "lucide-react";
import { BaseTab } from "@/components/ui/base-tab";
import { useConversationStore } from '@/lib/stores/conversation-store';
import { useSpaceStore } from "@/lib/stores/space-store";
import { User } from "@supabase/supabase-js";
import { getMessages, getConversations, setActiveConversation as setActiveConversationDB } from "../actions";
import { UnifiedInput } from "@/components/ui/unified-input";
import { ChatMessages } from '@/components/ui/chat-messages';
import { UserProfileDropdown } from "@/components/ui/user-profile-dropdown";
import { Space, Conversation } from "@/types";
import { debounce } from 'lodash';
import { useStickToBottom } from "@/hooks/use-stick-to-bottom";

interface ClientChatContentProps {
  user: User;
  defaultSpace: Space | null;
  defaultConversations: Conversation[] | null;
  spaces: Space[] | null;
  defaultMessages: Message[] | null;
}

export default function ClientChatContent({
  user,
  defaultSpace,
  defaultConversations,
  defaultMessages,
  spaces,
}: ClientChatContentProps) {
  const { activeSpace, setActiveSpace, setSpaces } = useSpaceStore();
  const { setConversations, setActiveConversation, activeConversation } = useConversationStore();
  const [isSpacesLoading, setIsSpacesLoading] = useState(true);
  const [isConversationsLoading, setIsConversationsLoading] = useState(true);
  const [isMessagesLoading, setIsMessagesLoading] = useState(true);
  const [isStickToBottom, setIsStickToBottom] = useState(true)
  const [searchMode, setSearchMode] = useState('chat')
  const messagesContainerRef = useRef<HTMLDivElement>(null)

  const cachedConversations = useMemo(() => defaultConversations || [], [defaultConversations]);
  const cachedSpaces = useMemo(() => spaces || [], [spaces]);

  const { messages, setMessages, input, isLoading: isChatLoading, handleInputChange, handleSubmit } = useChat({
    id: searchMode,
    api: "/api/chat",
    body: {
      spaceId: activeSpace?.id || '',
      conversationId: activeConversation?.id || null,
      provider: activeSpace?.provider || '',
      model: activeSpace?.model || '',
    },
    initialMessages: defaultMessages || [],
  });

  useEffect(() => {
    const initializeChat = async () => {
      try {
        if (!activeSpace || !spaces?.length) {
          setIsSpacesLoading(true);
          await Promise.all([
            defaultSpace && setActiveSpace(defaultSpace),
            setSpaces(cachedSpaces),
          ]);
          setIsSpacesLoading(false);
        }
        if (!activeConversation || !cachedConversations.length) {
          setIsConversationsLoading(true);
          await Promise.all([
            setConversations(cachedConversations),
            cachedConversations.length && setActiveConversation(cachedConversations[0]),
          ]);
          setIsConversationsLoading(false);
        }
      } catch (error) {
        console.error('Error initializing chat:', error);
      } finally {
        setIsSpacesLoading(false);
        setIsConversationsLoading(false);
      }
    };
    initializeChat();
  }, [defaultSpace, cachedConversations, cachedSpaces, setActiveSpace, setConversations, setActiveConversation, setSpaces]);

  useEffect(() => {
    const loadSpaceData = async () => {
      if (!activeSpace?.id) return;
      setIsConversationsLoading(true);
      setIsMessagesLoading(true);
      setMessages([]);
      try {
        const conversations = await getConversations(activeSpace.id);
        setConversations(conversations || []);
        const newActiveConversation = conversations?.length ? conversations[0] : null;
        if (newActiveConversation) {
          await setActiveConversationDB(newActiveConversation.id);
          setActiveConversation(newActiveConversation);
        } else {
          setActiveConversation(null);
          setMessages([]);
        }
      } catch (error) {
        console.error('Error loading space data:', error);
        setConversations([]);
        setActiveConversation(null);
        setMessages([]);
      } finally {
        setIsConversationsLoading(false);
        setIsMessagesLoading(false);
      }
    };
    loadSpaceData();
  }, [activeSpace?.id, setConversations, setActiveConversation, setMessages]);

  useEffect(() => {
    const loadConversationMessages = async () => {
      if (!activeConversation?.id) {
        setMessages([]);
        setIsMessagesLoading(false);
        return;
      }
      setIsMessagesLoading(true);
      try {
        const messageData = await getMessages(activeConversation.id);
        setMessages(messageData || []);
      } catch (error) {
        console.error('Error loading messages:', error);
        setMessages([]);
      } finally {
        setIsMessagesLoading(false);
      }
    };
    loadConversationMessages();
  }, [activeConversation?.id, setMessages]);

  const handleScrollToBottom = () => {
    const messagesContainer = document.querySelector('.messages-container');
    if (messagesContainer) {
        messagesContainer.scrollTo({
            top: messagesContainer.scrollHeight,
            behavior: 'smooth'
        });
    }
}


  return (
    <div className="flex flex-col h-full bg-black text-white relative chat-container">
      <div className="fixed top-4 right-4 z-50">
        {user && <UserProfileDropdown user={user} />}
      </div>
      <div className="fixed top-4 left-1/2 -translate-x-1/2 z-50">
        <div className="relative p-1 rounded-full bg-black/20 border border-white/[0.08] backdrop-blur-xl"
          style={{
            background: `color-mix(in srgb, ${activeSpace?.color || '#3ecfff'}10, transparent)`,
            boxShadow: `0 0 20px ${activeSpace?.color || '#3ecfff'}10, inset 0 0 20px ${activeSpace?.color || '#3ecfff'}05`
          }}>
          <div className="flex items-center divide-x divide-white/[0.08]">
            <div className="px-1 first:pl-1 last:pr-1">
              <SpaceTab />
            </div>
            <div className="px-1 first:pl-1 last:pr-1">
              <ModelTab />
            </div>
            <div className="px-1 first:pl-1 last:pr-1">
              <ChatModeTab mode={searchMode} onModeChange={setSearchMode} />
            </div>
            {!isStickToBottom && messages.length > 0 && (
              <div className="px-1 first:pl-1 last:pr-1">
                <BaseTab
                  icon={<ArrowDown className="w-3 h-3" />}
                  label="Scroll to Bottom"
                  onClick={handleScrollToBottom}
                />
              </div>
            )}
          </div>
        </div>
      </div>
      <div className="flex-1 w-full h-full flex flex-col">
        <div className="absolute top-0 left-0 w-full h-screen pointer-events-none">
          <div className="absolute top-0 left-[20%] w-[500px] h-[500px] bg-[#3ecfff]/[0.015] blur-[120px] rounded-full" />
          <div className="absolute top-[20%] right-[20%] w-[400px] h-[400px] bg-[#D4966A]/[0.015] blur-[100px] rounded-full" />
          <div className="absolute bottom-[10%] left-[30%] w-[600px] h-[600px] bg-[#3ecfff]/[0.01] blur-[130px] rounded-full" />
        </div>
        {isMessagesLoading ? (
          <ChatMessagesSkeleton />
        ) : (
          <ChatMessages
            messages={messages}
            onStickToBottomChange={setIsStickToBottom}
            ref={messagesContainerRef}
            isLoading={isChatLoading}
            userAvatarUrl={user?.user_metadata?.avatar_url}
          />
        )}
        <div className="fixed left-1/2 bottom-8 -translate-x-1/2 w-[800px] z-50">
          <div className="relative w-full">
            <UnifiedInput
              value={input}
              onChange={handleInputChange}
              onSubmit={handleSubmit}
              disabled={isChatLoading}
              searchMode={searchMode}
              onSearchModeChange={setSearchMode}
              onSubmit={handleSubmit}
              disabled={!activeSpace || isSpacesLoading || isConversationsLoading || isMessagesLoading || isChatLoading}
            >
              <div className="flex items-center divide-x divide-white/[0.05] bg-white/[0.03] border-t border-l border-r border-white/[0.05] rounded-t-2xl overflow-hidden backdrop-blur-xl w-full shadow-[0_-4px_20px_rgba(62,207,255,0.03)]">
                <div className="px-1 first:pl-2 last:pr-2 py-1 flex-1">
                  <QuickActionsTab />
                </div>
                <div className="px-1 first:pl-2 last:pr-2 py-1 flex-1">
                  <ModelTab />
                </div>
                <div className="px-1 first:pl-2 last:pr-2 py-1 flex-1">
                  <BaseTab
                    icon={<Search className="w-3 h-3" />}
                    label="Messages"
                    shortcut="F"
                  />
                </div>
                <div className="px-1 first:pl-2 last:pr-2 py-1 flex-1">
                  <BaseTab
                    icon={<Sparkles className="w-3 h-3" />}
                    label="Prompts"
                    shortcut="P"
                  />
                </div>
                <div className="flex-shrink min-w-0 flex-1 flex items-center px-1 first:pl-2 last:pr-2 py-1">
                  <ConversationTab activeConversation={activeConversation} />
                </div>
              </div>
            </UnifiedInput>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/protected/page.tsx
================
import { redirect } from "next/navigation";
import ClientChatContent from "@/app/protected/ClientChatContent";
import { createClient } from "@/utils/supabase/server";
import { createSpace, getActiveSpace, getConversations, getSpaces, setActiveSpace, createConversation, createMessage, getMessages, getSpaceData } from "../actions";
import { Providers } from "@/components/providers";
import { COLUMNS, DEFAULTS } from "@/lib/constants";
import { AVAILABLE_MODELS, type Provider } from "@/config/models";
import { Tabs } from "@/components/tabs";

const DEFAULT_PROVIDER: Provider = 'anthropic'
const DEFAULT_MODEL = AVAILABLE_MODELS[DEFAULT_PROVIDER][0].id

export default async function ChatPage() {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    redirect("/sign-in");
  }

  let spaces = await getSpaces();
  let activeSpace = await getActiveSpace();

  if (!spaces || spaces.length === 0) {
    const space = await createSpace(
      DEFAULTS.SPACE_NAME,
      '',
      DEFAULT_MODEL,
      DEFAULT_PROVIDER,
      true // Set as active immediately
    );

    if (!space) {
      throw new Error("Failed to create default space");
    }

    const conversation = await createConversation(space.id, "Welcome");
    if (!conversation) {
      throw new Error("Failed to create initial conversation");
    }

    spaces = [space];
    activeSpace = space;
  }

  if (!activeSpace && spaces && spaces.length > 0) {
    const firstSpace = spaces[0];
    await setActiveSpace(firstSpace.id);
    activeSpace = firstSpace;
  }

  const spaceData = await getSpaceData(activeSpace?.id || '');
  
  if (spaceData?.space) {
    activeSpace = spaceData.space;
  }

  const defaultConversations = spaceData?.conversations || [];
  const defaultMessages = defaultConversations.length > 0 
    ? await getMessages(defaultConversations[0].id)
    : null;

  return (
    <Providers>
      <div className="flex flex-col h-screen bg-black text-white">
        <ClientChatContent
          user={user}
          defaultSpace={activeSpace}
          defaultConversations={defaultConversations}
          defaultMessages={defaultMessages}
          spaces={spaces}
        />
      </div>
    </Providers>
  );
}

================
File: app/actions.ts
================
"use server";

import { createClient } from "@/utils/supabase/server";
import {
  COLUMNS,
  DB_TABLES,
  DEFAULTS,
} from "@/lib/constants";
import { Conversation, Space } from "@/types";
import { Message } from "ai";
import { headers } from 'next/headers';
import { redirect } from 'next/navigation';
import { encodedRedirect } from "@/utils/utils";
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

const CACHE_KEYS = {
  SPACE_HISTORY: (spaceId: string) => `space_history:${spaceId}`,
  NOTIFICATIONS: (userId: string) => `notifications:${userId}`,
  SPACES: (userId: string) => `spaces:${userId}`,
  SPACE: (spaceId: string) => `space:${spaceId}`,
  ACTIVE_SPACE: (userId: string) => `active_space:${userId}`,
  ACTIVE_CONVERSATION: (userId: string) => `active_conversation:${userId}`,
  CONVERSATIONS: (spaceId: string) => `conversations:${spaceId}`,
  MESSAGES: (conversationId: string) => `messages:${conversationId}`,
  SPACE_DATA: (spaceId: string) => `space_data:${spaceId}`,
};

const CACHE_TTL = {
  SPACE_HISTORY: 60 * 5, // 5 minutes
  NOTIFICATIONS: 60 * 5, // 5 minutes
  SPACES: 60 * 5, // 5 minutes
  SPACE: 60 * 5, // 5 minutes
  ACTIVE_SPACE: 60 * 60, // 1 hour
  ACTIVE_CONVERSATION: 60 * 60, // 1 hour
  CONVERSATIONS: 60 * 5, // 5 minutes
  MESSAGES: 60 * 5, // 5 minutes
  SPACE_DATA: 60 * 5, // 5 minutes
};

export async function getSpaces(): Promise<Space[] | null> {
    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    // Try to get from cache first
    const cacheKey = CACHE_KEYS.SPACES(user.id);
    const cachedSpaces = await redis.get<Space[]>(cacheKey);
    if (cachedSpaces) {
        return cachedSpaces;
    }

    // If not in cache, get from DB
    const { data, error } = await supabase
        .from(DB_TABLES.SPACES)
        .select("*")
        .eq(COLUMNS.USER_ID, user.id)
        .eq(COLUMNS.IS_DELETED, false)
        .order(COLUMNS.UPDATED_AT, { ascending: false });

    if (error) {
        console.error("Error fetching spaces:", error);
        return null;
    }

    // Cache the result
    if (data) {
        await redis.set(cacheKey, data, { ex: CACHE_TTL.SPACES });
    }

    return data;
}

export async function getSpace(id: string): Promise<Space | null> {
    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();
  
    if (!user) {
        console.error("User not found");
        return null;
    }

    // Try to get from cache first
    const cacheKey = CACHE_KEYS.SPACE(id);
    const cachedSpace = await redis.get<Space>(cacheKey);
    if (cachedSpace) {
        return cachedSpace;
    }

    const { data, error } = await supabase
        .from(DB_TABLES.SPACES)
        .select("*")
        .eq(COLUMNS.ID, id)
        .eq(COLUMNS.USER_ID, user.id)
        .single();

    if (error) {
        console.error("Error fetching space:", error);
        return null;
    }

    // Cache the result
    if (data) {
        await redis.set(cacheKey, data, { ex: CACHE_TTL.SPACE });
    }

    return data;
}

export async function createSpace(
    name: string,
    description: string,
    model: string,
    provider: string,
    setActive: boolean,
    color?: string
): Promise<Space | null> {
    const supabase = await createClient();
    const {
        data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    const { data, error } = await supabase
        .from(DB_TABLES.SPACES)
        .insert([
            {
                [COLUMNS.NAME]: name || DEFAULTS.SPACE_NAME,
                [COLUMNS.DESCRIPTION]: description || '',
                [COLUMNS.USER_ID]: user.id,
                [COLUMNS.MODEL]: model,
                [COLUMNS.PROVIDER]: provider,
                [COLUMNS.COLOR]: color || '#3ecfff',
            },
        ])
        .select()
        .single();

    if (error) {
        console.error("Error creating space:", error);
        return null;
    }

    if (data) {
        // Invalidate spaces cache
        await redis.del(CACHE_KEYS.SPACES(user.id));
        
        if (setActive) {
            await setActiveSpace(data.id);
        }
    }

    return data;
}

export async function updateSpace(id: string, updates: Partial<Space>): Promise<Space | null> {
    const supabase = await createClient();
    const {
        data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    const { data, error } = await supabase
        .from(DB_TABLES.SPACES)
        .update(updates)
        .eq(COLUMNS.ID, id)
        .eq(COLUMNS.USER_ID, user.id)
        .select()
        .single();

    if (error) {
        console.error('Error updating space:', error);
        return null;
    }

    if (data) {
        // Invalidate related caches
        await Promise.all([
            redis.del(CACHE_KEYS.SPACES(user.id)),
            redis.del(CACHE_KEYS.SPACE(id)),
            redis.del(CACHE_KEYS.ACTIVE_SPACE(user.id)),
            redis.del(CACHE_KEYS.SPACE_DATA(id))
        ]);
    }

    return data;
}

export async function setActiveSpace(spaceId: string): Promise<void> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return;
    }

    const { error: deleteError } = await supabase
        .from(DB_TABLES.ACTIVE_SPACES)
        .delete()
        .eq(COLUMNS.USER_ID, user.id);

    if (deleteError) {
        console.error("Error removing existing active space:", deleteError);
    }

    const { error: insertError } = await supabase
        .from(DB_TABLES.ACTIVE_SPACES)
        .insert({
            [COLUMNS.USER_ID]: user.id,
            [COLUMNS.SPACE_ID]: spaceId
        });

    if (insertError) {
        console.error("Error setting active space:", insertError);
    } else {
        // Update cache
        const space = await getSpace(spaceId);
        if (space) {
            await redis.set(CACHE_KEYS.ACTIVE_SPACE(user.id), space, { ex: CACHE_TTL.ACTIVE_SPACE });
        }
    }
}

export async function getActiveSpace(): Promise<Space | null> {
    const supabase = await createClient();
    const {
        data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    // Try to get from cache first
    const cacheKey = CACHE_KEYS.ACTIVE_SPACE(user.id);
    const cachedSpace = await redis.get<Space>(cacheKey);
    if (cachedSpace) {
        return cachedSpace;
    }

    const { data: activeSpaceData, error: activeSpaceError } = await supabase
        .from(DB_TABLES.ACTIVE_SPACES)
        .select(COLUMNS.SPACE_ID)
        .eq(COLUMNS.USER_ID, user.id)
        .single();

    if (activeSpaceError || !activeSpaceData) {
        return null;
    }

    const { data: space, error: spaceError } = await supabase
        .from(DB_TABLES.SPACES)
        .select("*")
        .eq(COLUMNS.ID, activeSpaceData.space_id)
        .eq(COLUMNS.USER_ID, user.id)
        .single();

    if (spaceError) {
        console.error("Error fetching active space:", spaceError);
        return null;
    }

    // Cache the result
    if (space) {
        await redis.set(cacheKey, space, { ex: CACHE_TTL.ACTIVE_SPACE });
    }

    return space;
}

export interface SpaceData {
    space: Space | null;
    conversations: Conversation[] | null;
    messages: Message[] | null;
}

export async function getSpaceData(spaceId: string): Promise<SpaceData | null> {
    const supabase = await createClient();
    const {
        data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    if (!spaceId) {
        return { space: null, conversations: [], messages: null };
    }

    // Try to get from cache first
    const cacheKey = CACHE_KEYS.SPACE_DATA(spaceId);
    const cachedData = await redis.get<SpaceData>(cacheKey);
    if (cachedData) {
        return cachedData;
    }

    // Fetch space and conversations in parallel
    const [space, conversations] = await Promise.all([
        supabase
            .from(DB_TABLES.SPACES)
            .select("*")
            .eq(COLUMNS.ID, spaceId)
            .eq(COLUMNS.USER_ID, user.id)
            .single()
            .then(({ data, error }) => {
                if (error) {
                    console.error("Error fetching space:", error);
                    return null;
                }
                return data;
            }),
        supabase
            .from(DB_TABLES.CONVERSATIONS)
            .select("*")
            .eq(COLUMNS.SPACE_ID, spaceId)
            .order(COLUMNS.UPDATED_AT, { ascending: false })
            .then(({ data, error }) => {
                if (error) {
                    console.error("Error fetching conversations:", error);
                    return [];
                }
                return data || [];
            })
    ]);

    // If we have conversations, get messages for the most recent one
    let messages = null;
    if (conversations.length > 0) {
        const { data, error } = await supabase
            .from(DB_TABLES.MESSAGES)
            .select("*")
            .eq('conversation_id', conversations[0].id)
            .eq(COLUMNS.IS_DELETED, false)
            .order(COLUMNS.CREATED_AT, { ascending: true });

        if (error) {
            console.error("Error fetching messages:", error);
        } else {
            messages = data;
        }
    }

    const spaceData = { space, conversations, messages };
    await redis.set(cacheKey, spaceData, { ex: CACHE_TTL.SPACE_DATA });
    return spaceData;
}

export async function getConversations(spaceId: string): Promise<Conversation[] | null> {
    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    if (!spaceId) {
        return [];
    }

    const cacheKey = CACHE_KEYS.CONVERSATIONS(spaceId);
    const cachedConversations = await redis.get<Conversation[]>(cacheKey);
    if (cachedConversations) {
        return cachedConversations;
    }

    const { data, error } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .select("*")
        .eq(COLUMNS.SPACE_ID, spaceId)
        .order(COLUMNS.UPDATED_AT, { ascending: false });

    if (error) {
        console.error("Error fetching conversations:", error);
        return null;
    }

    if (data) {
        await redis.set(cacheKey, data, { ex: CACHE_TTL.CONVERSATIONS });
    }

    return data;
}

export async function createConversation(spaceId: string, title?: string): Promise<Conversation | null> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user || !spaceId) {
        console.error("Missing required data for conversation creation");
        return null;
    }

    const timestamp = new Date().toISOString();
    const { data, error } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .insert([{
            space_id: spaceId,
            title: title || DEFAULTS.CONVERSATION_TITLE,
            created_at: timestamp,
            updated_at: timestamp
        }])
        .select()
        .single();

    if (error) {
        console.error("Error creating conversation:", error);
        return null;
    }

    await redis.del(CACHE_KEYS.SPACE_DATA(spaceId));

    return data;
}

export async function setActiveConversation(conversationId: string): Promise<void> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return;
    }

    const { error: deleteError } = await supabase
        .from(DB_TABLES.ACTIVE_CONVERSATIONS)
        .delete()
        .eq(COLUMNS.USER_ID, user.id);

    if (deleteError) {
        console.error("Error removing existing active conversation:", deleteError);
    }

    const { error: insertError } = await supabase
        .from(DB_TABLES.ACTIVE_CONVERSATIONS)
        .insert({
            [COLUMNS.USER_ID]: user.id,
            conversation_id: conversationId
        });

    if (insertError) {
        console.error("Error setting active conversation:", insertError);
    } else {
        // Update cache
        const conversation = await getConversation(conversationId);
        if (conversation) {
            await redis.set(CACHE_KEYS.ACTIVE_CONVERSATION(user.id), conversation, { ex: CACHE_TTL.ACTIVE_CONVERSATION });
        }
    }
}

export async function getActiveConversation(): Promise<Conversation | null> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    // Try to get from cache first
    const cacheKey = CACHE_KEYS.ACTIVE_CONVERSATION(user.id);
    const cachedConversation = await redis.get<Conversation>(cacheKey);
    if (cachedConversation) {
        return cachedConversation;
    }

    const { data: activeConversationData, error: activeConversationError } = await supabase
        .from(DB_TABLES.ACTIVE_CONVERSATIONS)
        .select('conversation_id')
        .eq(COLUMNS.USER_ID, user.id)
        .single();

    if (activeConversationError || !activeConversationData) {
        return null;
    }

    const { data: conversation, error: conversationError } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .select("*")
        .eq(COLUMNS.ID, activeConversationData.conversation_id)
        .single();

    if (conversationError) {
        console.error("Error fetching active conversation:", conversationError);
        return null;
    }

    // Cache the result
    if (conversation) {
        await redis.set(cacheKey, conversation, { ex: CACHE_TTL.CONVERSATIONS });
    }

    return conversation;
}

export async function getConversation(id: string): Promise<Conversation | null> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return null;
    }

    const { data, error } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .select("*")
        .eq(COLUMNS.ID, id)
        .single();

    if (error) {
        console.error("Error fetching conversation:", error);
        return null;
    }

    return data;
}

export async function getMessages(conversationId: string): Promise<Message[] | null> {
    if (!conversationId) {
        console.error("Invalid conversation ID: Cannot fetch messages without a valid conversation ID");
        return null;
    }

    const cacheKey = CACHE_KEYS.MESSAGES(conversationId);
    const cachedMessages = await redis.get<Message[]>(cacheKey);
    if (cachedMessages) {
        return cachedMessages;
    }

    const supabase = await createClient();
    const { data, error } = await supabase
        .from(DB_TABLES.MESSAGES)
        .select("*")
        .eq('conversation_id', conversationId)
        .eq(COLUMNS.IS_DELETED, false)
        .order(COLUMNS.CREATED_AT, { ascending: true });

    if (error) {
        console.error("Error fetching messages:", error);
        return null;
    }

    // Cache the result
    if (data) {
        await redis.set(cacheKey, data, { ex: CACHE_TTL.MESSAGES });
    }

    return data;
}

export async function updateConversationTitle(conversationId: string, title: string): Promise<void> {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
        console.error("User not found");
        return;
    }

    // Get the conversation to find its space_id
    const { data: conversation, error: getError } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .select('space_id')
        .eq(COLUMNS.ID, conversationId)
        .single();

    if (getError) {
        console.error("Error getting conversation:", getError);
        return;
    }

    // Update the conversation title in the database
    const { error: updateError } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .update({ title })
        .eq(COLUMNS.ID, conversationId);

    if (updateError) {
        console.error("Error updating conversation title:", updateError);
        return;
    }

    // Update all relevant caches
    try {
        // Update conversations cache
        const conversationsCacheKey = CACHE_KEYS.CONVERSATIONS(conversation.space_id);
        const cachedConversations = await redis.get<Conversation[]>(conversationsCacheKey);
        if (cachedConversations) {
            const updatedConversations = cachedConversations.map(conv =>
                conv.id === conversationId ? { ...conv, title } : conv
            );
            await redis.set(conversationsCacheKey, updatedConversations, { ex: CACHE_TTL.CONVERSATIONS });
        }

        // Update active conversation cache if this is the active one
        const activeCacheKey = CACHE_KEYS.ACTIVE_CONVERSATION(user.id);
        const cachedActive = await redis.get<Conversation>(activeCacheKey);
        if (cachedActive && cachedActive.id === conversationId) {
            await redis.set(activeCacheKey, { ...cachedActive, title }, { ex: CACHE_TTL.ACTIVE_CONVERSATION });
        }

        // Update space data cache
        const spaceDataCacheKey = CACHE_KEYS.SPACE_DATA(conversation.space_id);
        const cachedSpaceData = await redis.get<SpaceData>(spaceDataCacheKey);
        if (cachedSpaceData?.conversations) {
            const updatedSpaceData = {
                ...cachedSpaceData,
                conversations: cachedSpaceData.conversations.map(conv =>
                    conv.id === conversationId ? { ...conv, title } : conv
                )
            };
            await redis.set(spaceDataCacheKey, updatedSpaceData, { ex: CACHE_TTL.SPACE_DATA });
        }
    } catch (error) {
        console.error("Error updating caches:", error);
    }
}

export async function createMessage(messageData: Partial<Message>, conversationId: string) {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user || !messageData.content || !messageData.role || !conversationId) {
        console.error("Missing required data for message creation");
        return null;
    }

    const timestamp = new Date().toISOString();

    const { data: conversation } = await supabase
        .from(DB_TABLES.CONVERSATIONS)
        .select("space_id")
        .eq(COLUMNS.ID, conversationId)
        .single();

    if (!conversation) {
        console.error("Conversation not found");
        return null;
    }

    const [messageResult, updateResult] = await Promise.all([
        supabase
            .from(DB_TABLES.MESSAGES)
            .insert([{
                content: messageData.content,
                role: messageData.role,
                annotations: messageData.annotations,
                user_id: user.id,
                is_deleted: false,
                created_at: timestamp,
                updated_at: timestamp,
                conversation_id: conversationId
            }])
            .select()
            .single(),
        supabase
            .from(DB_TABLES.CONVERSATIONS)
            .update({ updated_at: timestamp })
            .eq(COLUMNS.ID, conversationId)
    ]);

    if (messageResult.error) {
        console.error("Error creating message:", messageResult.error);
        return null;
    }

    // Update messages cache
    const messagesCacheKey = CACHE_KEYS.MESSAGES(conversationId);
    const cachedMessages = await redis.get<Message[]>(messagesCacheKey) || [];
    await redis.set(messagesCacheKey, [...cachedMessages, messageResult.data], { ex: CACHE_TTL.MESSAGES });

    // Update space data cache
    const spaceDataCacheKey = CACHE_KEYS.SPACE_DATA(conversation.space_id);
    const cachedSpaceData = await redis.get<SpaceData>(spaceDataCacheKey);
    if (cachedSpaceData?.messages) {
        cachedSpaceData.messages = [...cachedSpaceData.messages, messageResult.data];
        await redis.set(spaceDataCacheKey, cachedSpaceData, { ex: CACHE_TTL.SPACE_DATA });
    }

    return messageResult.data;
}

export const signUpAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");

  if (!email || !password) {
    return encodedRedirect(
      "error",
      "/sign-up",
      "Email and password are required",
    );
  }

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/callback`,
    },
  });

  if (error) {
    console.error(error.code + " " + error.message);
    return encodedRedirect("error", "/sign-up", error.message);
  } else {
    return encodedRedirect(
      "success",
      "/sign-up",
      "Thanks for signing up! Please check your email for a verification link.",
    );
  }
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;
  const supabase = await createClient();

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return encodedRedirect("error", "/sign-in", error.message);
  }

  return redirect("/protected");
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");
  const callbackUrl = formData.get("callbackUrl")?.toString();

  if (!email) {
    return encodedRedirect("error", "/forgot-password", "Email is required");
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect(
      "error",
      "/forgot-password",
      "Could not reset password",
    );
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    "success",
    "/forgot-password",
    "Check your email for a link to reset your password.",
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get("password") as string;
  const confirmPassword = formData.get("confirmPassword") as string;

  if (!password || !confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password and confirm password are required",
    );
  }

  if (password !== confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Passwords do not match",
    );
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password update failed",
    );
  }

  encodedRedirect("success", "/protected/reset-password", "Password updated");
};

export async function deleteSpace(spaceId: string): Promise<void> {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    throw new Error('Unauthorized');
  }

  // Soft delete the space
  const { error } = await supabase
    .from(DB_TABLES.SPACES)
    .update({ [COLUMNS.IS_DELETED]: true })
    .eq(COLUMNS.ID, spaceId)
    .eq(COLUMNS.USER_ID, user.id);

  if (error) {
    console.error('Error deleting space:', error);
    throw new Error('Failed to delete space');
  }

  // Clear related cache
  const cacheKeys = [
    CACHE_KEYS.SPACES(user.id),
    CACHE_KEYS.SPACE(spaceId),
    CACHE_KEYS.SPACE_DATA(spaceId),
  ];

  await Promise.all(cacheKeys.map(key => redis.del(key)));
}

export type SpaceActionType = 
  | 'created'
  | 'deleted'
  | 'updated'
  | 'model_changed'
  | 'conversation_added'
  | 'conversation_deleted';

export interface SpaceHistoryEntry {
  id: string;
  space_id: string;
  user_id: string;
  action_type: SpaceActionType;
  title: string;
  description: string;
  metadata?: Record<string, any>;
  created_at: string;
}

export interface CreateSpaceHistoryOptions {
  spaceId: string;
  actionType: SpaceActionType;
  title: string;
  description: string;
  metadata?: Record<string, any>;
}

export async function createSpaceHistory({
  spaceId,
  actionType,
  title,
  description,
  metadata
}: CreateSpaceHistoryOptions): Promise<SpaceHistoryEntry | null> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return null;
  }

  const { data, error } = await supabase
    .from('space_history')
    .insert([{
      space_id: spaceId,
      user_id: user.id,
      action_type: actionType,
      title,
      description,
      metadata
    }])
    .select()
    .single();

  if (error) {
    console.error("Error creating space history entry:", error);
    return null;
  }

  // Update space history cache
  const cacheKey = CACHE_KEYS.SPACE_HISTORY(spaceId);
  const cachedHistory = await redis.get<SpaceHistoryEntry[]>(cacheKey) || [];
  await redis.set(cacheKey, [data, ...cachedHistory], { ex: CACHE_TTL.SPACE_HISTORY });

  return data;
}

export async function getSpaceHistory(spaceId: string, limit = 50): Promise<SpaceHistoryEntry[]> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return [];
  }

  // Try to get from cache first
  const cacheKey = CACHE_KEYS.SPACE_HISTORY(spaceId);
  const cachedHistory = await redis.get<SpaceHistoryEntry[]>(cacheKey);
  if (cachedHistory) {
    return cachedHistory;
  }

  const { data, error } = await supabase
    .from('space_history')
    .select("*")
    .eq("space_id", spaceId)
    .order("created_at", { ascending: false })
    .limit(limit);

  if (error) {
    console.error("Error fetching space history:", error);
    return [];
  }

  // Cache the result
  if (data) {
    await redis.set(cacheKey, data, { ex: CACHE_TTL.SPACE_HISTORY });
  }

  return data;
}

export type NotificationType = 
  | 'space_created'
  | 'space_deleted'
  | 'model_changed'
  | 'conversation_created'
  | 'conversation_deleted';

export interface Notification {
  id: string;
  user_id: string;
  type: NotificationType;
  title: string;
  description: string;
  metadata?: Record<string, any>;
  is_read: boolean;
  created_at: string;
  updated_at: string;
}

export interface CreateNotificationOptions {
  type: NotificationType;
  title: string;
  description: string;
  metadata?: Record<string, any>;
  isInApp?: boolean; // If true, notification will be marked as read automatically
}

export async function createNotification({
  type,
  title,
  description,
  metadata,
  isInApp = true // Default to true for backward compatibility
}: CreateNotificationOptions): Promise<Notification | null> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return null;
  }

  const { data, error } = await supabase
    .from(DB_TABLES.NOTIFICATIONS)
    .insert([{
      user_id: user.id,
      type,
      title,
      description,
      metadata,
      is_read: isInApp, // Automatically mark as read if it's an in-app notification
    }])
    .select()
    .single();

  if (error) {
    console.error("Error creating notification:", error);
    return null;
  }

  // Update notifications cache
  const cacheKey = CACHE_KEYS.NOTIFICATIONS(user.id);
  const cachedNotifications = await redis.get<Notification[]>(cacheKey) || [];
  await redis.set(cacheKey, [data, ...cachedNotifications], { ex: CACHE_TTL.NOTIFICATIONS });

  return data;
}

export async function getNotifications(limit = 50): Promise<Notification[]> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return [];
  }

  // Try to get from cache first
  const cacheKey = CACHE_KEYS.NOTIFICATIONS(user.id);
  const cachedNotifications = await redis.get<Notification[]>(cacheKey);
  if (cachedNotifications) {
    return cachedNotifications;
  }

  const { data, error } = await supabase
    .from(DB_TABLES.NOTIFICATIONS)
    .select("*")
    .eq("user_id", user.id)
    .order("created_at", { ascending: false })
    .limit(limit);

  if (error) {
    console.error("Error fetching notifications:", error);
    return [];
  }

  // Cache the result
  if (data) {
    await redis.set(cacheKey, data, { ex: CACHE_TTL.NOTIFICATIONS });
  }

  return data;
}

export async function markNotificationAsRead(notificationId: string): Promise<boolean> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return false;
  }

  const { error } = await supabase
    .from(DB_TABLES.NOTIFICATIONS)
    .update({ is_read: true })
    .eq("id", notificationId)
    .eq("user_id", user.id);

  if (error) {
    console.error("Error marking notification as read:", error);
    return false;
  }

  // Update cache
  const cacheKey = CACHE_KEYS.NOTIFICATIONS(user.id);
  const cachedNotifications = await redis.get<Notification[]>(cacheKey);
  if (cachedNotifications) {
    const updatedNotifications = cachedNotifications.map(n =>
      n.id === notificationId ? { ...n, is_read: true } : n
    );
    await redis.set(cacheKey, updatedNotifications, { ex: CACHE_TTL.NOTIFICATIONS });
  }

  return true;
}

export async function markAllNotificationsAsRead(): Promise<boolean> {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    console.error("User not found");
    return false;
  }

  const { error } = await supabase
    .from(DB_TABLES.NOTIFICATIONS)
    .update({ is_read: true })
    .eq("user_id", user.id)
    .eq("is_read", false);

  if (error) {
    console.error("Error marking all notifications as read:", error);
    return false;
  }

  // Update cache
  const cacheKey = CACHE_KEYS.NOTIFICATIONS(user.id);
  const cachedNotifications = await redis.get<Notification[]>(cacheKey);
  if (cachedNotifications) {
    const updatedNotifications = cachedNotifications.map(n => ({ ...n, is_read: true }));
    await redis.set(cacheKey, updatedNotifications, { ex: CACHE_TTL.NOTIFICATIONS });
  }

  return true;
}

export const signOutAction = async () => {
  const supabase = await createClient();
  
  try {
    // Clear all redis cache for the user
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      await Promise.all([
        redis.del(CACHE_KEYS.SPACES(user.id)),
        redis.del(CACHE_KEYS.ACTIVE_SPACE(user.id)),
        redis.del(CACHE_KEYS.NOTIFICATIONS(user.id))
      ]);
    }

    // Sign out from Supabase
    await supabase.auth.signOut();

    // No need to return redirect since we handle navigation client-side
    return { success: true };
  } catch (error) {
    console.error('Error during sign out:', error);
    return { success: false, error };
  }
};

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes command-item-click {
  0% {
    box-shadow: 0 0 0 0 rgba(62, 207, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.1);
  }
  15% {
    box-shadow: 0 0 30px 8px rgba(62, 207, 255, 0.3);
    border-color: rgba(62, 207, 255, 0.4);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(62, 207, 255, 0);
    border-color: rgba(255, 255, 255, 0.1);
  }
}

.animate-command-item-click {
  animation: command-item-click 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}
@import '@/styles/prism.css';

:root {
  color-scheme: dark;
  --surface: #151515;
  --surface-elevated: #1f1f1f;
  --primary: #5E6AD2;
  --primary-light: #8A94F0;
  --text: #FFFFFF;
  --text-secondary: rgba(255, 255, 255, 0.6);
  --border: rgba(255, 255, 255, 0.1);
  --radius: 0.5rem;
}

body {
  margin: 0;
  overflow: hidden;
  font-family: Inter, -apple-system, BlinkMacSystemFont, sans-serif;
  scroll-behavior: smooth;
}

input, textarea {
  background: transparent;
  color: var(--text);
  font-size: 14px;
  line-height: 1.5;
  transition: all 0.2s ease;
}

input:focus, textarea:focus {
  outline: none;
  background: rgba(255, 255, 255, 0.03);
}

.btn {
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  transition: all 0.2s ease;
}

.btn-primary {
  background: var(--primary);
  color: white;
}

.btn-primary:hover {
  background: var(--primary-light);
}

::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.15);
}

.command-content {
  transition: opacity 0.2s ease, transform 0.2s ease;
}

.command-content-enter {
  opacity: 0;
  transform: translateY(10px);
}

.command-content-exit {
  opacity: 0;
  transform: translateY(-10px);
}

/* ... (your existing styles) ... */

/* cmdk Styles (Adapted for our modern aesthetic) */
[cmdk-root] {
  @apply max-w-2xl w-full bg-black/80 rounded-xl p-0 font-sans border border-white/[0.1] shadow-[0_0_30px_rgba(62,207,255,0.1)];
}

[cmdk-input] {
  @apply font-sans w-full text-sm p-4 outline-none bg-transparent text-white/90 placeholder:text-white/40 transition-colors duration-200;
}

[cmdk-item] {
  @apply relative flex items-center gap-3 mx-2 my-1 px-4 py-3 text-sm outline-none transition-all duration-200 rounded-lg text-white/75 hover:text-white/90;
}

[cmdk-item][data-selected="true"] {
  @apply bg-white/[0.03] text-white border border-white/[0.05];
}

[cmdk-item][data-disabled="true"] {
  @apply text-white/30 cursor-not-allowed;
}

[cmdk-group-heading] {
  @apply select-none text-xs text-white/50 px-4 flex items-center py-2 font-medium;
}

[cmdk-empty] {
  @apply text-sm flex items-center justify-center h-16 text-white/40 bg-white/[0.02] rounded-lg mx-2 border border-white/[0.05];
}

[cmdk-separator] {
  @apply h-px w-full bg-gradient-to-r from-transparent via-white/[0.08] to-transparent my-1;
}

/* Updated shine effect for modern look */
.dark {
  [cmdk-root]:after {
    content: '';
    background: linear-gradient(
      45deg,
      rgba(62, 207, 255, 0.03) 0%,
      rgba(62, 207, 255, 0.05) 25%,
      rgba(62, 207, 255, 0.1) 50%,
      rgba(62, 207, 255, 0.05) 75%,
      rgba(62, 207, 255, 0.03) 100%
    );
    z-index: -1;
    position: absolute;
    border-radius: 12px;
    top: -1px;
    left: -1px;
    width: calc(100% + 2px);
    height: calc(100% + 2px);
    animation: shine 3s ease infinite;
    background-size: 200% 200%;
  }

  [cmdk-item][data-selected="true"]:after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 8px;
    padding: 1px;
    background: linear-gradient(
      to right,
      rgba(62, 207, 255, 0.1),
      rgba(255, 255, 255, 0.1)
    );
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }
}

/* Animations (added to global scope)*/

@keyframes border {
  to {
    box-shadow: 0 0 0 1px var(--gray6); /* Using your existing --gray6 */
  }
}
@keyframes loadingDots {
  0% { content: '.' }
  33% { content: '..' }
  66% { content: '...' }
  100% { content: '.' }
}

.loading-dots::after {
  content: '.';
  display: inline-block;
  animation: loadingDots 1.5s infinite;
}

@keyframes showTopShine {
    to {
      opacity: 1;
    }
  }

/* Loading animation, adapted for Tailwind */
@keyframes loading {
  0% {
    opacity: 0;
    transform: translateX(0);
  }
  50% {
    opacity: 1;
    transform: translateX(100%);
  }
  100% {
    opacity: 0;
    transform: translateX(0);
  }
}

/* add these in if needed in components*/
/*.cmdk-loading-placeholder, .cmdk-loading-spinner {}*/

/* Added Keyframes */
/* For consistency, I'm adding slideIn/slideOut here even if not used *yet*. */
@keyframes slideIn {
 0% {
  opacity: 0;
  transform: scale(0.96);
 }

 100% {
  opacity: 1;
  transform: scale(1);
 }
}

@keyframes slideOut {
 0% {
  opacity: 1;
  transform: scale(1);
 }

 100% {
  opacity: 0;
  transform: scale(0.96);
 }
}

/* Add additional custom variables as needed*/
:root {
   /* ...other variables...*/
    --cmdk-shadow: 0 16px 70px rgb(0 0 0 / 20%); /* Example, might need adjustment */

}

/* Tailwind config or separate CSS file */
@keyframes rotate-slow {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes halo-pulse {
  0% { transform: scale(1); opacity: 0.6; }
  50% { transform: scale(1.1); opacity: 0.8; }
  100% { transform: scale(1); opacity: 0.6; }
}

@keyframes pulse-slow {
  0% { opacity: 0.4; }
  50% { opacity: 0.7; }
  100% { opacity: 0.4; }
}

@keyframes shimmer {
  0% { background-position: 0% 50%; }
  100% { background-position: 100% 50%; }
}

@keyframes bounce-slow {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
}

@keyframes glow {
  0% { box-shadow: inset 0 0 8px rgba(255, 255, 255, 0.8); }
  50% { box-shadow: inset 0 0 12px rgba(255, 255, 255, 1); }
  100% { box-shadow: inset 0 0 8px rgba(255, 255, 255, 0.8); }
}

@keyframes float {
  0% { transform: translateY(0) translateX(0); opacity: 0.5; }
  50% { transform: translateY(-2px) translateX(1px); opacity: 0.7; }
  100% { transform: translateY(0) translateX(0); opacity: 0.5; }
}

/* Apply animation durations */
.animate-rotate-slow { animation: rotate-slow 10s linear infinite; }
.animate-halo-pulse { animation: halo-pulse 4s ease-in-out infinite; }
.animate-pulse-slow { animation: pulse-slow 6s ease-in-out infinite; }
.animate-shimmer { animation: shimmer 3s linear infinite; }
.animate-bounce-slow { animation: bounce-slow 4s ease-in-out infinite; }
.animate-glow { animation: glow 3s ease-in-out infinite; }
.animate-float { animation: float 3s ease-in-out infinite; }

@layer base {}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/toaster";
import Script from "next/script";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Vinci",
  description: "Vinci App",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <link 
          rel="stylesheet" 
          href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css"
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
          {children}
          <Toaster />
          <Script 
            src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js" 
            strategy="lazyOnload"
          />
          <Script 
            src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/xml.min.js"
            strategy="lazyOnload"
          />
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import Hero from "@/components/hero";

export default async function Home() {
  return (
    <>
      <Hero />
      <main className="flex-1 flex flex-col gap-6 px-4">
        <h2 className="font-medium text-xl mb-4">Next steps</h2>
      </main>
    </>
  );
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

================
File: components/ui/base-tab.tsx
================
import { ReactNode, CSSProperties } from 'react'

interface BaseTabProps {
  icon?: ReactNode
  label: string
  shortcut?: string
  onClick?: () => void
  minWidth?: 'space' | 'model' | 'actions'
  roundedBottom?: boolean
  isActive?: boolean
  style?: CSSProperties
  wrapperStyle?: CSSProperties
  className?: string
  color?: string
}

export function BaseTab({ 
  icon, 
  color,
  label, 
  shortcut, 
  onClick, 
  minWidth, 
  style,
  wrapperStyle,
  className = ''
}: BaseTabProps) {
  const minWidthClass = {
    space: 'min-w-[100px]',
    model: 'min-w-[120px]',
    actions: ''
  }[minWidth || 'actions']

  return (
    <div 
      className={`relative`}
      style={{
        ...wrapperStyle
      }}
    >
      <div
        onClick={onClick}
        className={`px-3 py-1.5 text-white text-xs font-medium flex items-center gap-1.5 relative overflow-hidden cursor-pointer ${minWidthClass}
           transition-all duration-300 group ${className}`}
        style={{
          ...style,
        }}
      >
        {icon && (
          <div className="relative z-10 text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300">
            {icon}
          </div>
        )}
        <span className="text-white/75 truncate relative z-10 group-hover:text-white/95 transition-colors duration-300">
          {label}
        </span>
        {shortcut && (
          <span className="text-white/60 text-[10px] ml-auto shrink-0 relative z-10">⌘{shortcut}</span>
        )}
      </div>
    </div>
  )
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        ghost: "hover:bg-zinc-700/50 text-zinc-400",
        toggle: "hover:bg-zinc-700/50 text-zinc-300 border-t border-zinc-700/50 rounded-t-md rounded-b-none",
        cyan: "bg-[#3ecfff]/10 text-[#3ecfff] border border-[#3ecfff]/20 shadow-[0_0_12px_rgba(62,207,255,0.1)] hover:bg-[#3ecfff]/20 rounded-xl",
        destructive: "bg-red-500/10 text-red-500 hover:bg-red-500/20 border border-red-500/20",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-8 px-3 rounded-md",
        icon: "h-8 w-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  active?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, active, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }), active && "bg-zinc-700/50")}
        ref={ref}
        {...props}
      />
    )
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/chat-message.tsx
================
import { User } from 'lucide-react';
import { FC } from 'react';
import { getModelName, type Provider } from '@/config/models';
import { ProviderIcon } from './provider-icon';
import { Message } from 'ai';
import { MarkdownRenderer } from './markdown-renderer';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

interface ChatMessageProps {
    message: Message;
    userAvatarUrl?: string;
}

const UserAvatar = ({ avatarUrl }: { avatarUrl?: string }) => (
    <Avatar className="h-8 w-8 border bg-white/[0.03] border-white/[0.1]">
        <AvatarImage src={avatarUrl || ""} />
        <AvatarFallback className="bg-white/[0.03]">
            <User className="h-4 w-4 text-white/80" />
        </AvatarFallback>
    </Avatar>
);

const AIAvatar = () => (
    <div className="relative group">
        {/* Subtle outer glow with dynamic pulsing */}
        <div className="absolute -inset-2 bg-gradient-to-r from-cyan-500/20 via-blue-400/20 to-cyan-500/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-700 animate-pulse-slow" />
        
        {/* Animated aura ring with rotating gradient */}
        <div className="absolute -inset-4 opacity-60">
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-cyan-500/15 to-blue-500/15 animate-rotate-slow" />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-cyan-500/10 to-blue-500/10 animate-halo-pulse" />
        </div>
        
        {/* Main avatar container with dynamic gradient and shine */}
        <Avatar className="relative h-8 w-8 rounded-full bg-gradient-to-b from-cyan-900/30 to-blue-900/30 backdrop-blur-sm border border-white/20 shadow-lg shadow-cyan-500/30 overflow-hidden">
            <AvatarImage src="" />
            <AvatarFallback className="bg-transparent">
                <div className="relative w-full h-full flex items-center justify-center">
                    {/* Shimmering background with subtle particle effect */}
                    <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/20 to-blue-500/20 animate-shimmer" />
                    
                    {/* Subtle light rays with pulsing effect */}
                    <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.4),transparent_60%)] animate-pulse-slow" />
                    
                    {/* Central orb with dynamic glow */}
                    <div className="relative w-4 h-4 rounded-full bg-gradient-to-br from-cyan-400 to-blue-500 flex items-center justify-center animate-bounce-slow">
                        <div className="absolute inset-[1px] rounded-full bg-gradient-to-b from-white/70 to-white/30" />
                        <div className="absolute inset-0 rounded-full shadow-[inset_0_0_8px_rgba(255,255,255,0.8)] animate-glow" />
                        
                        {/* Tiny particle effect for liveliness */}
                        <div className="absolute -top-1 -right-1 w-1.5 h-1.5 bg-white/50 rounded-full animate-float" />
                        <div className="absolute -bottom-1 -left-1 w-1.5 h-1.5 bg-white/50 rounded-full animate-float delay-1000" />
                    </div>
                </div>
            </AvatarFallback>
        </Avatar>
    </div>
);

const ModelInfo = ({ provider, modelName }: { provider?: Provider; modelName: string }) => (
    <div className="flex items-center gap-1.5 mb-2.5">
        {provider && (
            <div className="px-2 py-0.5 rounded bg-white/[0.03] border border-white/[0.05] text-white/80 text-[10px] font-medium flex items-center gap-1.5 relative overflow-hidden w-fit before:absolute before:inset-0 before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
                <ProviderIcon provider={provider} size={14} />
            </div>
        )}
        <div className="px-2.5 py-0.5 rounded bg-white/[0.03] border border-white/[0.05] text-white/80 text-[10px] font-medium flex items-center gap-1.5 relative overflow-hidden w-fit before:absolute before:inset-0 before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
            <span className="text-white">{modelName}</span>
        </div>
    </div>
);


export const ChatMessage: FC<ChatMessageProps> = ({ message, userAvatarUrl }) => {
    const isUser = message.role === 'user';

    const annotations = message.annotations as Array<{
        model_used?: string;
        provider?: string;
    }> | undefined;

    const modelAnnotation = annotations?.find(a => a.model_used);
    const providerAnnotation = annotations?.find(a => a.provider);

    const modelName = modelAnnotation?.model_used
        ? getModelName(modelAnnotation.provider as Provider, modelAnnotation.model_used)
        : 'AI';

    const providerName = providerAnnotation?.provider
        ? providerAnnotation.provider.charAt(0).toUpperCase() + providerAnnotation.provider.slice(1)
        : '';

    return (
        <div className={`flex items-start gap-4 w-full mx-auto group transition-opacity ${isUser ? 'flex-row-reverse' : ''}`}>
            {isUser ? <UserAvatar avatarUrl={userAvatarUrl} /> : <AIAvatar />}

            <div className="space-y-2 overflow-hidden">
                <div className="prose prose-invert max-w-none w-full">
                    {message.role === 'assistant' && annotations && (
                        <ModelInfo
                            provider={providerAnnotation?.provider as Provider}
                            modelName={modelName}
                        />
                    )}

                    {isUser ? (
                        <div className="text-sm leading-relaxed whitespace-pre-wrap break-words text-white shadow-[0_0_15px_-5px_rgba(255,255,255,0.3)]">
                            {message.content}
                        </div>
                    ) : (
                        <MarkdownRenderer content={message.content} />
                    )}
                </div>
            </div>
        </div>
    );
};

================
File: components/ui/chat-messages-skeleton.tsx
================
export function ChatMessagesSkeleton() {
  return (
    <div className="relative flex-1 flex flex-col">
      <div className="messages-container absolute inset-0 overflow-y-auto py-12 px-4 pb-52">
        <div className="max-w-[85%] mx-auto">
          <div className="space-y-12 min-h-full animate-pulse">
            {/* AI Message Skeleton */}
            <div className="flex items-start gap-4">
              <div className="flex h-8 w-8 shrink-0 items-center justify-center rounded-md border bg-white/[0.03] border-white/[0.1]">
                <div className="w-5 h-5 rounded-full bg-white/10" />
              </div>
              <div className="flex-1 space-y-2 overflow-hidden max-w-[85%]">
                <div className="flex items-center gap-1.5 mb-2.5">
                  <div className="w-20 h-4 bg-white/10 rounded" />
                </div>
                <div className="space-y-2">
                  <div className="h-4 bg-white/10 rounded w-full" />
                  <div className="h-4 bg-white/10 rounded w-4/5" />
                  <div className="h-4 bg-white/10 rounded w-2/3" />
                </div>
              </div>
            </div>

            {/* User Message Skeleton */}
            <div className="flex items-start gap-4 justify-end">
              <div className="flex-1 space-y-2 overflow-hidden max-w-[85%] text-right">
                <div className="space-y-2">
                  <div className="h-4 bg-white/10 rounded w-3/4 ml-auto" />
                  <div className="h-4 bg-white/10 rounded w-1/2 ml-auto" />
                </div>
              </div>
              <div className="flex h-8 w-8 shrink-0 items-center justify-center rounded-md border bg-white/[0.03] border-white/[0.1]">
                <div className="w-5 h-5 rounded-full bg-white/10" />
              </div>
            </div>

            {/* Another AI Message Skeleton */}
            <div className="flex items-start gap-4">
              <div className="flex h-8 w-8 shrink-0 items-center justify-center rounded-md border bg-white/[0.03] border-white/[0.1]">
                <div className="w-5 h-5 rounded-full bg-white/10" />
              </div>
              <div className="flex-1 space-y-2 overflow-hidden max-w-[85%]">
                <div className="flex items-center gap-1.5 mb-2.5">
                  <div className="w-20 h-4 bg-white/10 rounded" />
                </div>
                <div className="space-y-2">
                  <div className="h-4 bg-white/10 rounded w-full" />
                  <div className="h-4 bg-white/10 rounded w-3/4" />
                  <div className="h-4 bg-white/10 rounded w-1/2" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: components/ui/chat-messages.tsx
================
'use client';

import { useStickToBottom } from '@/hooks/use-stick-to-bottom';
import { FC, useEffect, useState, forwardRef } from 'react';
import { ChatMessage } from './chat-message';
import { LoadingMessage } from './loading-message';
import { Message } from 'ai';

interface ChatMessagesProps {
  messages: Message[];
  onStickToBottomChange?: (isStickToBottom: boolean) => void;
  onScrollToBottom?: () => void;
  isLoading?: boolean;
}

export const ChatMessages = forwardRef<HTMLDivElement, ChatMessagesProps>(
  ({ messages, onStickToBottomChange, onScrollToBottom, isLoading }, ref) => {
    const { containerRef, isStickToBottom } = useStickToBottom();

    useEffect(() => {
      onStickToBottomChange?.(isStickToBottom);
    }, [isStickToBottom, onStickToBottomChange]);

    useEffect(() => {
      if (containerRef.current && onScrollToBottom) {
        onScrollToBottom();
      }
    }, [onScrollToBottom]);

    return (
      <div className="relative flex-1 flex flex-col">
        <div
          ref={containerRef}
          className="messages-container absolute inset-0 overflow-y-auto py-12 px-4 pb-52"
        >
          <div className="max-w-[85%] mx-auto">
            <div className="space-y-12 min-h-full">
              {messages.map((message, index) => (
                <div key={message.id}>
                  <ChatMessage message={message} />
                  {index < messages.length - 1 && messages[index].role !== messages[index + 1].role && (
                    <div className="w-full flex justify-center my-8">
                      <div className="w-1/3 h-px bg-white/[0.05]" />
                    </div>
                  )}
                </div>
              ))}
              {isLoading && messages[messages.length - 1]?.role !== 'assistant' && (
                <>
                  {messages.length > 0 && (
                    <div className="w-full flex justify-center my-8">
                      <div className="w-1/3 h-px bg-white/[0.05]" />
                    </div>
                  )}
                  <LoadingMessage />
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }
);

ChatMessages.displayName = 'ChatMessages';

================
File: components/ui/chat-mode-tab.tsx
================
'use client'

import React from 'react'
import { BaseTab } from './base-tab'
import { Search, MessageSquare, Sparkles, GitCompare } from 'lucide-react'
import { useQuickActionsCommand } from './quick-actions-command-provider'

interface ChatModeTabProps {
  mode: 'chat' | 'search' | 'semantic' | 'hybrid'
  onModeChange: (mode: 'chat' | 'search' | 'semantic' | 'hybrid') => void
}

const getModeIcon = (mode: string) => {
  switch (mode) {
    case 'search':
      return <Search className="w-3.5 h-3.5" />
    case 'semantic':
      return <Sparkles className="w-3.5 h-3.5" />
    case 'hybrid':
      return <GitCompare className="w-3.5 h-3.5" />
    default:
      return <MessageSquare className="w-3.5 h-3.5" />
  }
}

const getModeLabel = (mode: string) => {
  const label = mode.charAt(0).toUpperCase() + mode.slice(1)
  return `Mode: ${label}`
}

export const ChatModeTab: React.FC<ChatModeTabProps> = ({ mode, onModeChange }) => {
  const { toggleQuickActionsCommand } = useQuickActionsCommand()

  const handleClick = () => {
    toggleQuickActionsCommand({
      withCustomOptions: {
        title: 'Select Chat Mode',
        options: [
          { id: 'chat', label: 'Chat', icon: <MessageSquare className="w-4 h-4" /> },
          { id: 'search', label: 'Search', icon: <Search className="w-4 h-4" /> },
          { id: 'semantic', label: 'Semantic', icon: <Sparkles className="w-4 h-4" /> },
          { id: 'hybrid', label: 'Hybrid', icon: <GitCompare className="w-4 h-4" /> }
        ],
        onSelect: (id) => onModeChange(id as any)
      }
    })
  }

  return (
    <BaseTab
      icon={getModeIcon(mode)}
      label={getModeLabel(mode)}
      shortcut="C"
      isActive={true}
      minWidth="mode"
      onClick={handleClick}
    />
  )
}

================
File: components/ui/checkbox.tsx
================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

================
File: components/ui/code-block.tsx
================
'use client'

import { useMemo, useState } from 'react'
import hljs from 'highlight.js'
import { Copy, Check } from 'lucide-react'
import { LanguageIcon } from './language-icon'

interface CodeBlockProps {
  code: string
  language?: string
  className?: string
}

export function CodeBlock({ code, language = 'plain', className = '' }: CodeBlockProps) {
  const [isCopied, setIsCopied] = useState(false)
  
  const highlightedCode = useMemo(() => {
    try {
      if (language && language !== 'plain' && hljs.getLanguage(language)) {
        return hljs.highlight(code, { language }).value
      }
      return hljs.highlightAuto(code).value
    } catch (error) {
      console.error('Error highlighting code:', error)
    return code
    }
  }, [code, language])

  return (
    <div className="relative">
      <div className="relative overflow-hidden rounded-xl bg-white/[0.03] border border-white/[0.05] transition-all duration-300 backdrop-blur-xl hover:bg-white/[0.05] hover:border-white/[0.1]">
        <div className="absolute right-4 top-3 flex items-center gap-1.5 z-10">
          <div className="px-2 py-0.5 rounded bg-white/[0.03] border border-white/[0.05] text-white/80 text-[10px] font-medium flex items-center gap-1.5 relative overflow-hidden w-fit
            before:absolute before:inset-0 before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
            <LanguageIcon language={language} size={12} className="text-white/60" />
            <span className="text-white/80">{language}</span>
          </div>
          <button 
            onClick={() => {
              navigator.clipboard.writeText(code)
              setIsCopied(true)
              setTimeout(() => setIsCopied(false), 2000)
            }}
            className="px-2 py-0.5 rounded bg-white/[0.03] border border-white/[0.05] text-white/80 text-[10px] font-medium flex items-center gap-1.5 relative overflow-hidden w-fit
              before:absolute before:inset-0 before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10
              hover:bg-white/[0.06] hover:border-white/[0.15] transition-all duration-300"
          >
            {isCopied ? (
              <>
                <Check className="w-3 h-3 text-white/60" />
                <span className="text-white/80">Copied</span>
              </>
            ) : (
              <>
                <Copy className="w-3 h-3 text-white/60" />
                <span className="text-white/80">Copy</span>
              </>
            )}
          </button>
        </div>
        <div className="relative">
          <pre className="hljs !bg-transparent pl-4 pt-12 pb-4">
            <code 
              className={`text-[13px] leading-relaxed hljs language-${language}`}
            dangerouslySetInnerHTML={{ __html: highlightedCode }}
            />
          </pre>
        </div>
      </div>
    </div>
  )
}

================
File: components/ui/command-badge.tsx
================
import { cn } from '@/lib/utils';

interface CommandBadgeProps {
  children: React.ReactNode;
  variant?: 'active' | 'info' | 'count';
  className?: string;
}

export function CommandBadge({ children, variant = 'info', className }: CommandBadgeProps) {
  return (
    <span
      className={cn(
        'px-1.5 py-0.5 rounded-md text-[10px] font-medium',
        variant === 'active' && 'bg-[#3ecfff]/10 text-[#3ecfff] border border-[#3ecfff]/20',
        variant === 'info' && 'text-white/40 border border-white/10',
        variant === 'count' && 'bg-white/5 text-white/60',
        className
      )}
    >
      {children}
    </span>
  );
}

================
File: components/ui/command-item.tsx
================
import { useState, useCallback } from 'react';
import { Command } from 'cmdk';
import { cn } from '@/lib/utils';

// Base styles for command items
const baseCommandItemClass = (isActive?: boolean) => cn(
  'group relative flex items-center gap-3 w-[calc(100%-16px)] min-h-[56px] mx-2 my-1 px-4 py-3 text-sm outline-none',
  'transition-all duration-200 rounded-lg',
  'data-[selected=true]:bg-white/[0.08] data-[selected=true]:border-white/20 data-[selected=true]:text-white',
  'hover:bg-white/[0.08] hover:border-white/20',
  isActive ? 'bg-white/[0.05] border border-white/10 shadow-[0_0_1px_rgba(255,255,255,0.1)] text-white' : 'text-white/90 border border-transparent'
);

interface AnimatedCommandItemProps extends React.ComponentProps<typeof Command.Item> {
  isActive?: boolean;
}

export function AnimatedCommandItem({ children, className, isActive, ...props }: AnimatedCommandItemProps) {
  const [isClicked, setIsClicked] = useState(false);

  const handleClick = useCallback((e: React.MouseEvent) => {
    setIsClicked(true);
    setTimeout(() => setIsClicked(false), 500);
    props.onSelect?.(e.currentTarget.getAttribute('data-value') || '');
  }, [props.onSelect]);

  return (
    <Command.Item
      {...props}
      className={cn(
        baseCommandItemClass(isActive),
        isClicked && 'animate-command-item-click',
        className
      )}
      onSelect={undefined}
      onClick={handleClick}
    >
      {children}
    </Command.Item>
  );
}

// For backwards compatibility
export const commandItemClass = baseCommandItemClass;

================
File: components/ui/command-modal.tsx
================
import { Command } from 'cmdk';
import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { Search } from 'lucide-react';
import { cn } from '@/lib/utils';

interface CommandModalProps {
    isOpen: boolean;
    onClose: () => void;
    placeholder?: string;
    children?: React.ReactNode;
    leftElement?: React.ReactNode;
    footerElement?: React.ReactNode;
    searchValue?: string;
    onSearchChange?: (value: string) => void;
    hideSearch?: boolean;
    // Navigation state
    showSpaceForm?: boolean;
    setShowSpaceForm?: (show: boolean) => void;
    showSpaces?: boolean;
    setShowSpaces?: (show: boolean) => void;
    showModels?: boolean;
    setShowModels?: (show: boolean) => void;
    selectedProvider?: any;
    setSelectedProvider?: (provider: any) => void;
    showConversations?: boolean; //for showing conversations list
    setShowConversations?: (show: boolean) => void; //for showing conversations list
    isCreatingSpace?: boolean;
}

export function CommandModal({
    isOpen,
    onClose,
    placeholder = 'Type a command or search...',
    children,
    leftElement,
    footerElement,
    searchValue,
    onSearchChange,
    hideSearch = false,
    showSpaceForm,
    setShowSpaceForm,
    showSpaces,
    setShowSpaces,
    showModels,
    setShowModels,
     selectedProvider,
    setSelectedProvider,
    showConversations,
    setShowConversations
}: CommandModalProps) {

    const [isFocused, setIsFocused] = useState(false);
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (isOpen && !hideSearch) {
            // Small delay to ensure the modal is rendered
            const timeoutId = setTimeout(() => {
                inputRef.current?.focus();
            }, 50);
            return () => clearTimeout(timeoutId);
        }
    }, [isOpen, hideSearch]);



    return (
        <AnimatePresence>
            {isOpen && (
                <div className="fixed inset-0 z-50 flex items-start justify-center pt-[15vh]">
                    {/* Enhanced backdrop with deeper blur */}
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className="absolute inset-0 bg-black/90"
                        onClick={onClose}
                    />

                    {/* Command Menu with enhanced animations */}
                    <motion.div
                        initial={{ opacity: 0, scale: 0.95, y: 10 }}
                        animate={{ opacity: 1, scale: 1, y: 0 }}
                        exit={{ opacity: 0, scale: 0.95, y: 10 }}
                        transition={{ 
                            duration: 0.2,
                            ease: [0.16, 1, 0.3, 1]
                        }}
                        className="relative w-full max-w-2xl"
                    >
                        <Command
                            className="relative overflow-hidden w-full bg-black/80 border border-white/[0.1] shadow-[0_0_30px_rgba(62,207,255,0.1)] rounded-xl"
                            onKeyDown={(e) => {
                                if (e.key === 'Escape') {
                                    onClose();

                                } else if (e.key === 'Backspace' && !searchValue) {
                                    // Handle back navigation when search is empty

                                    if (showSpaceForm && setShowSpaceForm) {
                                        setShowSpaceForm(false);
                                        e.preventDefault();
                                    } else if (showSpaces && setShowSpaces) {
                                        setShowSpaces(false);
                                        e.preventDefault();
                                     } else if (showModels && setShowModels) {
                                        if(selectedProvider && setSelectedProvider){
                                            setSelectedProvider(null);
                                        } else {
                                            setShowModels(false);
                                        }
                                        e.preventDefault();
                                    }
                                     else if (showConversations && setShowConversations) { //handle back for conv.
                                        setShowConversations(false);
                                        e.preventDefault();
                                    }
                                    onSearchChange?.('');
                                }
                            }}
                           shouldFilter={true} // Enable filtering.
                            loop
                        >
                            <div
                                className={cn(
                                    "flex items-center px-4 gap-3",
                                    !hideSearch ? 'border-b border-white/[0.08]' : 'py-3'
                                )}
                            >
                                {leftElement && (
                                    <div className="text-white/60 transition-colors duration-200 group-hover:text-white/80">
                                        {leftElement}
                                    </div>
                                )}
                                {!hideSearch && (
                                    <div className="flex items-center flex-1">
                                        <Search className="w-5 h-5 text-white/50 transition duration-150 hover:text-white/70" />
                                        <Command.Input
                                            ref={inputRef}
                                            value={searchValue}
                                            onValueChange={onSearchChange}
                                            placeholder={placeholder}
                                            onFocus={() => setIsFocused(true)}
                                            onBlur={() => setIsFocused(false)}
                                            className={cn(
                                                "flex-1 h-12 bg-transparent text-white/90 outline-none",
                                                "text-base placeholder:text-white/50",
                                                "focus:placeholder:text-white/70 focus:bg-white/[0.02]",
                                                "px-3 py-2"
                                            )}
                                        />
                                    </div>
                                )}
                            </div>

                            <div className="flex flex-col h-[min(70vh,500px)]">
                                <Command.List className="flex-1 overflow-y-auto overscroll-contain scrollbar-thin scrollbar-track-transparent scrollbar-thumb-white/10 p-4 space-y-2">
                                    {!hideSearch && searchValue && (
                                        <Command.Empty className="py-8 text-center">
                                            <p className="text-sm text-white/40">No results found.</p>
                                            <p className="text-xs text-white/30 mt-1">Try searching for actions, conversations, or spaces</p>
                                        </Command.Empty>
                                    )}

                                    {children}
                                </Command.List>

                                {footerElement && (
                                    <div className="flex items-center justify-center p-2 border-t border-white/[0.08]">
                                        {footerElement}
                                    </div>
                                )}
                            </div>
                        </Command>
                    </motion.div>
                </div>
            )}
        </AnimatePresence>
    );
}

================
File: components/ui/conversation-tab.tsx
================
import { MessageSquare, Plus, Check } from 'lucide-react'
import { useState } from 'react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { BaseTab } from '@/components/ui/base-tab'
import { Conversation } from '@/types'
import { useQuickActionsCommand } from './quick-actions-command-provider'
import { useSpaceStore } from '@/lib/stores/space-store'
import { useConversationStore } from '@/lib/stores/conversation-store'
import { createConversation } from '@/app/actions'
import { cn } from '@/lib/utils'
import { useToast } from '@/hooks/use-toast'

interface ConversationTabProps {
  activeConversation: Conversation | null
}

export function ConversationTab({ activeConversation }: ConversationTabProps) {
  const { toggleQuickActionsCommand } = useQuickActionsCommand()
  const { activeSpace } = useSpaceStore()
  const { setActiveConversation } = useConversationStore()
  const { toast } = useToast()
  const [isCreating, setIsCreating] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)

  const handleNewConversation = async () => {
    if (!activeSpace || isCreating) return
    
    try {
      setIsCreating(true)
      const newConversation = await createConversation(activeSpace.id, 'New Conversation')
      
      if (newConversation) {
        setActiveConversation(newConversation)

        setShowSuccess(true)
        setTimeout(() => setShowSuccess(false), 1500)
        
        // Show toast notification
        toast({
          title: 'New Conversation Created',
          description: 'You can start chatting right away.',
          variant: 'default',
          className: cn(
            'bg-black/90 border border-white/10',
            'backdrop-blur-xl shadow-xl shadow-black/20',
            'text-white/90 font-medium',
            'rounded-lg'  
          ),
          duration: 2000,
        });
      }
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className="flex items-center w-full gap-px min-w-0">
      <div className="flex-1 min-w-0 overflow-hidden">
        <BaseTab
          icon={<MessageSquare className="w-3 h-3" />}
          label={activeConversation?.title || 'Conversations'}
          shortcut="D"
          isActive={!!activeConversation}
          minWidth="space"
          onClick={() => toggleQuickActionsCommand({ withConversations: true })}
          className="overflow-hidden text-ellipsis"
        />
      </div>
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <button
              onClick={handleNewConversation}
              className={cn(
                'h-full p-2 flex items-center rounded-md border-white/[0.08]',
                'hover:bg-white/[0.08] bg-white/[0.03] active:bg-white/[0.02]',
                'transition-colors duration-200',
                'focus:outline-none',
                'disabled:opacity-50 disabled:cursor-not-allowed'
              )}
              disabled={!activeSpace || isCreating}
            >
              {showSuccess ? (
                <Check className="w-3 h-3 text-emerald-400 animate-in fade-in-0 zoom-in-95" />
              ) : (
                <Plus className={cn(
                  'w-3 h-3',
                  isCreating ? 'text-white/30 animate-pulse' : 'text-white/60'
                )} />
              )}
            </button>
          </TooltipTrigger>
          <TooltipContent>
            <p>Create New Conversation</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  )
}

================
File: components/ui/conversations-list.tsx
================
import { Command } from 'cmdk'
import { Plus, MessageSquare, Clock, MessageCircle } from 'lucide-react'
import { Conversation } from '@/types'
import { commandItemClass } from './command-item'
import { createConversation, setActiveConversation as setActiveConversationDB, createSpaceHistory } from '@/app/actions'
import { useToast } from '@/hooks/use-toast'
import { useConversationStore } from '@/lib/stores/conversation-store'
import { CommandBadge } from './command-badge'
import { cn } from '@/lib/utils'

interface ConversationsListProps {
  onConversationSelect: (conversationId: string) => Promise<void>
  spaceId: string
}

export function ConversationsList({
  onConversationSelect,
  spaceId
}: ConversationsListProps) {
  const { conversations, activeConversation, setActiveConversation } = useConversationStore()
  const { toast } = useToast()

  if (!conversations) {
    return (
      <div className="py-8 text-center">
        <MessageSquare className="w-6 h-6 text-white/20 mx-auto mb-3 animate-pulse" />
        <p className="text-sm text-white/40">Loading conversations...</p>
      </div>
    );
  }

  if (conversations.length === 0) {
    return (
      <div className="py-8 text-center">
        <MessageSquare className="w-6 h-6 text-white/20 mx-auto mb-3" />
        <p className="text-sm text-white/40">No conversations found</p>
        <p className="text-xs text-white/30 mt-1">Start a new conversation to begin</p>
      </div>
    );
  }

  return (
    <>
      <Command.Group heading="Quick Actions" className="pb-4">
        <Command.Item
          value="create new conversation start conversation"
          onSelect={async () => {
            const newConversation = await createConversation(spaceId, 'New Conversation');
            if (newConversation) {
              await setActiveConversationDB(newConversation.id);
              await onConversationSelect(newConversation.id);

              // Record in space history
              await createSpaceHistory({
                spaceId,
                actionType: 'conversation_added',
                title: 'New Conversation Created',
                description: 'A new conversation was started.',
                metadata: { conversationId: newConversation.id }
              });

              // Show toast notification
              toast({
                title: 'New Conversation Created',
                description: 'You can start chatting right away.',
                variant: 'default',
                className: cn(
                  'bg-black/90 border border-white/10',
                  'backdrop-blur-xl shadow-xl shadow-black/20',
                  'text-white/90 font-medium',
                  'rounded-lg'
                ),
                duration: 2000,
              });
            }
          }}
          className={commandItemClass()}
        >
          <div className="flex items-center gap-3 w-full">
            <div className="flex-shrink-0 w-8 h-8 rounded-md bg-[#3ecfff]/10 flex items-center justify-center">
              <Plus className="w-4 h-4 text-[#3ecfff]" />
            </div>
            <div className="flex-1">
              <div className="font-medium text-white/90">New Conversation</div>
              <p className="text-sm text-white/50">Start a fresh chat with AI</p>
            </div>
          </div>
        </Command.Item>
      </Command.Group>

      <Command.Group heading="Recent Conversations" className="pb-4">
        {conversations.map((conversation) => (
          <Command.Item
            key={conversation.id}
            value={`conversation ${conversation.id} ${conversation.title}`}
            onSelect={async () => {
              await setActiveConversationDB(conversation.id);
              await onConversationSelect(conversation.id);
            }}
            className={commandItemClass(conversation.id === activeConversation?.id)}
          >
            <div className="flex items-center gap-3 w-full">
              <div className={cn(
                'flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center',
                conversation.id === activeConversation?.id ? 'bg-[#3ecfff]/10' : 'bg-white/5 group-hover:bg-white/10'
              )}>
                <MessageCircle className={cn(
                  'w-4 h-4 transition-colors duration-300',
                  conversation.id === activeConversation?.id ? 'text-[#3ecfff]' : 'text-white/60 group-hover:text-white/80'
                )} />
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <span className="font-medium text-white/90 truncate">
                    {conversation.title || 'Untitled Conversation'}
                  </span>
                  <div className="flex items-center gap-2 ml-2">
                    {conversation.id === activeConversation?.id && (
                      <CommandBadge variant="active">Active</CommandBadge>
                    )}
                    {conversation.messageCount > 0 && (
                      <CommandBadge variant="count">{conversation.messageCount} messages</CommandBadge>
                    )}
                  </div>
                </div>
                {conversation.lastMessage && (
                  <div className="flex items-center gap-2 text-sm text-white/50">
                    <Clock className="w-3 h-3" />
                    <span className="truncate">{conversation.lastMessage}</span>
                  </div>
                )}
              </div>
            </div>
          </Command.Item>
        ))}
      </Command.Group>
    </>
  )
}

================
File: components/ui/delete-space-dialog.tsx
================
'use client';

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Trash2 } from 'lucide-react';
import { deleteSpace, createSpaceHistory } from '@/app/actions';
import { useSpaceStore } from '@/lib/stores/space-store';
import React, { useState } from 'react';
import { toast } from "@/hooks/use-toast";

import { cn } from "@/lib/utils";

interface DeleteSpaceDialogProps {
  spaceId: string;
  spaceName: string;
}

export function DeleteSpaceDialog({ spaceId, spaceName }: DeleteSpaceDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const { setSpaces, spaces, setActiveSpace } = useSpaceStore();

  const handleDelete = async () => {
    try {
      setIsDeleting(true);
      await deleteSpace(spaceId);
      
      // Update local state
      if (spaces) {
        const updatedSpaces = spaces.filter(space => space.id !== spaceId);
        setSpaces(updatedSpaces);
        
        // Set the most recent space as active
        if (updatedSpaces.length > 0) {
          const mostRecentSpace = updatedSpaces[0];
          await setActiveSpace(mostRecentSpace.id);
        }
      }
      
      // Close both dialogs
      setIsOpen(false);

      // Show toast notification
      // Show toast notification
      toast({
        title: 'Space Deleted',
        description: `${spaceName} has been deleted.`,
        variant: 'default',
        className: cn(
          'bg-black/90 border border-white/10',
          'backdrop-blur-xl shadow-xl shadow-black/20',
          'text-white/90 font-medium',
          'rounded-lg'
        ),
        duration: 3000,
      });

      // Record in space history
      await createSpaceHistory({
        spaceId,
        actionType: 'deleted',
        title: 'Space Deleted',
        description: `${spaceName} has been deleted.`,
        metadata: { spaceName }
      });
      const commandDialog = document.querySelector('[cmdk-dialog]');
      if (commandDialog instanceof HTMLElement) {
        commandDialog.style.display = 'none';
      }
    } catch (error) {
      console.error('Error deleting space:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button
          variant="destructive"
          size="icon"
          className="flex-shrink-0 w-6 h-6 p-1 rounded-md flex items-center justify-center group"
          onClick={(e) => {
            e.stopPropagation();
          }}
        >
          <Trash2 className="w-4 h-4" />
        </Button>
      </DialogTrigger>
      <DialogContent 
        className="fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-full max-w-lg overflow-hidden bg-black/80 border border-white/[0.1] shadow-[0_0_30px_rgba(62,207,255,0.1)] rounded-xl p-6 z-50"
        onClick={(e) => e.stopPropagation()}
      >
        <DialogHeader>
          <DialogTitle>Delete Space</DialogTitle>
          <DialogDescription className="text-white/60">
            Are you sure you want to delete &quot;{spaceName}&quot;? This action cannot be undone.
          </DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button
            variant="ghost"
            onClick={() => setIsOpen(false)}
            className="text-white/60 hover:text-white/90 hover:bg-white/10 rounded-xl h-8"
          >
            Cancel
          </Button>
          <Button
            variant="destructive"
            onClick={handleDelete}
            disabled={isDeleting}
            className="rounded-xl h-8"
          >
            {isDeleting ? 'Deleting...' : 'Delete Space'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};

================
File: components/ui/input.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

================
File: components/ui/label.tsx
================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: components/ui/language-icon.tsx
================
import { 
  Java, 
  Python, 
  JavaScript, 
  TypeScript, 
  RustLight, 
  Go, 
  CSharp, 
  Ruby, 
  PHP, 
  Swift, 
  Kotlin, 
  HTML5, 
  C,
  Clojure,
  Dart,
  CSS3, 
  JSON, 
  Markdown, 
  MicrosoftSQLServer,
  PostgreSQL,
  MySQL 
} from 'developer-icons'

interface LanguageIconProps {
  language: string
  size?: number
  className?: string
}

const LANGUAGE_ALIASES: Record<string, string> = {
  'cs': 'csharp',
  'c#': 'csharp',
  'js': 'javascript',
  'ts': 'typescript',
  'py': 'python',
  'rb': 'ruby',
  'go': 'golang',
  'rs': 'rust',
  'jsx': 'javascript',
  'tsx': 'typescript',
  'yml': 'yaml',
  'md': 'markdown',
  'sh': 'shell',
  'bash': 'shell',
  'zsh': 'shell',
  'mssql': 'sqlserver',
  'postgres': 'postgresql',
  'c++': 'c',
  'clj': 'clojure'
}

const LANGUAGE_COMPONENTS: Record<string, React.ComponentType<any>> = {
  python: Python,
  javascript: JavaScript,
  typescript: TypeScript,
  java: Java,
  rust: RustLight,
  golang: Go,
  csharp: CSharp,
  ruby: Ruby,
  php: PHP,
  swift: Swift,
  kotlin: Kotlin,
  html: HTML5,
  css: CSS3,
  json: JSON,
  markdown: Markdown,
  sql: MicrosoftSQLServer,
  sqlserver: MicrosoftSQLServer,
  postgresql: PostgreSQL,
  mysql: MySQL,
  c: C,
  clojure: Clojure,
  dart: Dart
}

export function LanguageIcon({ language, size = 16, className = '' }: LanguageIconProps) {
  const normalizedLanguage = language?.toLowerCase() || ''
  const canonicalLanguage = LANGUAGE_ALIASES[normalizedLanguage] || normalizedLanguage
  const IconComponent = LANGUAGE_COMPONENTS[canonicalLanguage]
  
  if (!IconComponent) return null
  
  return (
    <div className={`relative inline-block ${className}`}>
      <IconComponent size={size} />
    </div>
  )
}

================
File: components/ui/loading-message.tsx
================
import { FC } from 'react'

export const LoadingMessage: FC = () => {
  return (
    <div className="flex items-start gap-4 w-full mx-auto group">
      <div className="flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-md border bg-gradient-to-b from-white/[0.07] to-white/[0.03] border-white/[0.05] relative">
        <div className="absolute inset-0 rounded-md bg-blue-500/20" />
        <div className="w-5 h-5 rounded-full bg-gradient-to-br from-blue-400 to-indigo-500 relative">
          <div className="absolute inset-0 rounded-full bg-gradient-to-t from-transparent to-white/30" />
          <div className="absolute -inset-1 rounded-full bg-blue-500/20 animate-pulse" />
        </div>
      </div>
      <div className="flex-1 space-y-2 overflow-hidden max-w-[85%]">
        <div className="prose prose-invert max-w-none space-y-2">
          <div className="h-[22px] bg-white/10 rounded w-[35%] animate-pulse" />
          <div className="h-[22px] bg-white/10 rounded w-[55%] animate-pulse" />
          <div className="h-[22px] bg-white/10 rounded w-[75%] animate-pulse" />
        </div>
      </div>
    </div>
  )
}

================
File: components/ui/markdown-renderer.tsx
================
'use client'

import React, { JSX } from 'react'
import { useMemo } from 'react'
import MarkdownIt from 'markdown-it'
import hljs from 'highlight.js'
import DOMPurify from 'dompurify'
import { CodeBlock } from './code-block'

interface MarkdownRendererProps {
  content: string
  className?: string
}

function configureMarkdownIt() {
  return new MarkdownIt({
    linkify: true,
    typographer: true,
    breaks: true,
    highlight: (str, lang) => {
      try {
        if (lang && hljs.getLanguage(lang)) {
          return hljs.highlight(str, { language: lang }).value
        }
        return hljs.highlightAuto(str).value
      } catch (error) {
        console.error('Error highlighting code:', error)
        return str 
      }
    }
  })
}

function configureInlineCodeRenderer(md: MarkdownIt) {
  md.renderer.rules.code_inline = (tokens, idx) => {
    const content = tokens[idx].content
    try {
      const highlighted = hljs.highlightAuto(content).value
      return `<code class="bg-zinc-800/50 border border-zinc-700 rounded-md px-1.5 py-0.5 text-[13px] font-mono">${highlighted}</code>`
    } catch (error) {
      console.error('Error highlighting inline code:', error)
      return `<code class="bg-zinc-800/50 border border-zinc-700 rounded-md px-1.5 py-0.5 text-[13px] font-mono text-zinc-100">${content}</code>`
    }
  }
}

function configureListRenderers(md: MarkdownIt) {
  md.renderer.rules.list_open = (tokens, idx) => {
    const token = tokens[idx]
    if (token.type === 'ordered_list_open') {
      return '<ol class="list-decimal">'
    }
    return '<ul class="list-disc">'
  }

  md.renderer.rules.list_item_open = (tokens, idx) => {
    if (tokens[idx + 2]?.content?.includes(':')) {
      const [title, ...rest] = tokens[idx + 2].content.split(':')
      tokens[idx + 2].content = `**${title.trim()}:**${rest.join(':')}`
    }
    return '<li>'
  }
}

function processContent(content: string) {
  return content
    .split('\n')
    .map(line => {
      const trimmedLine = line.trim()
      if (trimmedLine.startsWith('•')) {
        const textAfterBullet = trimmedLine.substring(1).trim()
        if (textAfterBullet.includes(':')) {
          const [title, ...rest] = textAfterBullet.split(':')
          return `- **${title.trim()}:**${rest.join(':')}`
        }
        return `- ${textAfterBullet}`
      }
      return line
    })
    .join('\n')
}

function processTokens(tokens: any[], md: MarkdownIt) {
  let currentGroup: typeof tokens = []
  const processedTokens: JSX.Element[] = []
  
  tokens.forEach((token, index) => {
    if (token.type === 'fence') {
      if (currentGroup.length > 0) {
        const rendered = md.renderer.render(currentGroup, md.options, {})
        const sanitized = DOMPurify.sanitize(rendered)
        if (sanitized.trim()) {
          processedTokens.push(
            <div key={`group-${index}`} dangerouslySetInnerHTML={{ __html: sanitized }} />
          )
        }
        currentGroup = []
      }
      
      processedTokens.push(
        <CodeBlock
          key={`fence-${index}`}
          code={token.content}
          language={token.info || 'plain'}
        />
      )
    } else {
      currentGroup.push(token)
    }
  })
  
  if (currentGroup.length > 0) {
    const rendered = md.renderer.render(currentGroup, md.options, {})
    const sanitized = DOMPurify.sanitize(rendered)
    if (sanitized.trim()) {
      processedTokens.push(
        <div key="final-group" dangerouslySetInnerHTML={{ __html: sanitized }} />
      )
    }
  }

  return processedTokens
}

export function MarkdownRenderer({ content, className = '' }: MarkdownRendererProps) {
  const renderedContent = useMemo(() => {
    const md = configureMarkdownIt()
    configureInlineCodeRenderer(md)
    configureListRenderers(md)
    
    const processedContent = processContent(content)
    const tokens = md.parse(processedContent, {})
    return processTokens(tokens, md)
  }, [content])

  return (
    <div
      className={`
        max-w-none
        [&_h1]:mt-8 [&_h1]:mb-4
        [&_h2]:mt-8 [&_h2]:mb-4
        [&_h3]:mt-8 [&_h3]:mb-4
        [&_h4]:mt-8 [&_h4]:mb-4
        [&_h5]:mt-8 [&_h5]:mb-4
        [&_h6]:mt-8 [&_h6]:mb-4
        [&_p]:mt-4 [&_p]:mb-4
        [&_ul]:mt-4 [&_ul]:mb-4 [&_ul]:list-disc [&_ul]:pl-6
        [&_ol]:mt-4 [&_ol]:mb-4 [&_ol]:list-decimal [&_ol]:pl-8
        [&_li]:mt-2 [&_li]:mb-2 [&_li]:pl-1
        [&_ol_li]:pl-0
        [&_strong]:font-semibold
        [&_blockquote]:mt-6 [&_blockquote]:mb-6 [&_blockquote]:pl-4 [&_blockquote]:border-l-2 [&_blockquote]:border-zinc-700 [&_blockquote]:italic
        [&_a]:text-blue-400 [&_a]:underline [&_a:hover]:text-blue-300
        [&_code.inline-code]:bg-zinc-800/50 [&_code.inline-code]:border [&_code.inline-code]:border-zinc-700 [&_code.inline-code]:rounded-md [&_code.inline-code]:px-1.5 [&_code.inline-code]:py-0.5 [&_code.inline-code]:text-[13px] [&_code.inline-code]:font-mono [&_code.inline-code]:text-zinc-100
        ${className}`}
    >
      {renderedContent}
    </div>
  )
}

================
File: components/ui/model-tab.tsx
================
import { getModelName, type Provider } from '@/config/models'
import { ProviderIcon } from './provider-icon'
import React from 'react'
import { useSpaceStore } from '@/lib/stores/space-store'
import { BaseTab } from './base-tab'
import { useQuickActionsCommand } from './quick-actions-command-provider'

export const ModelTab = () => {
  const activeSpace = useSpaceStore((state) => state.activeSpace)
  const hasModel = !!(activeSpace?.provider && activeSpace?.model)
  const { toggleQuickActionsCommand } = useQuickActionsCommand()

  return (
    <BaseTab
      icon={hasModel ? (
        <ProviderIcon
          provider={activeSpace.provider as Provider}
          size={14}
          className='opacity-100 shrink-0'
        />
      ) : (
        <div className='w-3.5 h-3.5 rounded-full bg-gray-500/50 shrink-0' />
      )}
      label={hasModel ? getModelName(activeSpace.provider as Provider, activeSpace.model) : 'No Model Selected'}
      shortcut="M"
      isActive={hasModel}
      minWidth="model"
      onClick={() => toggleQuickActionsCommand({ withModels: true })}
    />
  )
}

================
File: components/ui/models-list.tsx
================
import { Command } from 'cmdk';
import { AVAILABLE_MODELS, PROVIDER_NAMES, PROVIDER_DESCRIPTIONS, type Provider } from '@/config/models';
import { commandItemClass } from './command-item';
import { ProviderIcon } from './provider-icon';
import { Space } from '@/types';
import { updateSpace } from '@/app/actions';
import { CommandBadge } from './command-badge';
import { cn } from '@/lib/utils';
import { Bot, Zap, Sparkles } from 'lucide-react';
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from "@/components/ui/tooltip";

interface ModelsListProps {
    selectedProvider: Provider | null;
    onProviderSelect: (provider: Provider) => void;
    onModelSelect: (modelId: string, provider: Provider) => Promise<void>;
    activeSpace: Space | null;
}

export function ModelsList({ selectedProvider, onProviderSelect, onModelSelect, activeSpace }: ModelsListProps) {
    const handleModelSelection = async (modelId: string, provider: Provider) => {
        if (!activeSpace || (activeSpace.model === modelId && activeSpace.provider === provider)) return;
        try {
            const updatedSpace = await updateSpace(activeSpace.id, { model: modelId, provider: provider });
            if (updatedSpace) {
                await onModelSelect(modelId, provider);
            }
        } catch (error) {
            console.error('Failed to update space with new model:', error);
        }
    };

    if (!selectedProvider) {
        return (
            <Command.Group heading="AI Providers" className="pb-4">
                {Object.entries(PROVIDER_NAMES).map(([provider, name]) => (
                    <Command.Item
                        key={provider}
                        value={`provider ${provider} ${name}`}
                        onSelect={() => onProviderSelect(provider as Provider)}
                        className={commandItemClass(activeSpace?.provider === provider)}
                    >
                        <div className="flex items-center gap-3 w-full">
                            <div className={cn(
                                'flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center',
                                activeSpace?.provider === provider ? 'bg-[#3ecfff]/10' : 'bg-white/5 group-hover:bg-white/10'
                            )}>
                                <ProviderIcon
                                    provider={provider as Provider}
                                    size={16}
                                    className={cn(
                                        'transition-colors duration-300',
                                        activeSpace?.provider === provider ? 'text-[#3ecfff]' : 'text-white/60 group-hover:text-white/80'
                                    )}
                                />
                            </div>
                            <div className="flex-1 min-w-0">
                                <div className="flex items-center justify-between">
                                    <span className="font-medium text-white/90">{name}</span>
                                    <div className="flex items-center gap-2">
                                        <CommandBadge variant="count" className="flex items-center gap-1">
                                            <Sparkles className="w-3 h-3" />
                                            {AVAILABLE_MODELS[provider as Provider].length}
                                        </CommandBadge>
                                        {activeSpace?.provider === provider && (
                                            <CommandBadge variant="active">Active</CommandBadge>
                                        )}
                                    </div>
                                </div>
                                <p className="text-sm text-white/50">{PROVIDER_DESCRIPTIONS[provider as Provider]}</p>
                            </div>
                        </div>
                    </Command.Item>
                ))}
            </Command.Group>
        )
    }

    const models = AVAILABLE_MODELS[selectedProvider] || [];

    return (
        <Command.Group className="pb-4">
            {models.map((model) => (
                <Command.Item
                    key={model.id}
                    value={`model ${model.id} ${model.name}`}
                    onSelect={() => handleModelSelection(model.id, selectedProvider)}
                    className={commandItemClass(activeSpace?.model === model.id)}
                >
                    <div className="flex items-center gap-3 w-full">
                        <div className={cn(
                            'flex-shrink-0 w-8 h-8 rounded-md flex items-center justify-center',
                            activeSpace?.model === model.id ? 'bg-[#3ecfff]/10' : 'bg-white/5 group-hover:bg-white/10'
                        )}>
                            <ProviderIcon
                                provider={selectedProvider}
                                size={16}
                                className={cn(
                                    'transition-colors duration-300',
                                    activeSpace?.model === model.id ? 'text-[#3ecfff]' : 'text-white/60 group-hover:text-white/80'
                                )}
                            />
                        </div>
                        <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between">
                                <span className="font-medium text-white/90">{model.name}</span>
                                <div className="flex items-center gap-2">
                                    <TooltipProvider>
                                        <Tooltip>
                                            <TooltipTrigger>
                                                <CommandBadge variant="count" className="flex items-center gap-1">
                                                    {model.contextWindow.toLocaleString()}
                                                </CommandBadge>
                                            </TooltipTrigger>
                                            <TooltipContent>
                                                <p>Context window size in tokens</p>
                                            </TooltipContent>
                                        </Tooltip>
                                    </TooltipProvider>
                                    {model.multimodal && (
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <CommandBadge variant="count" className="flex items-center gap-1">
                                                        Multimodal
                                                    </CommandBadge>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>Supports images and other media types</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                    {model.features?.includes('fast') && (
                                        <TooltipProvider>
                                            <Tooltip>
                                                <TooltipTrigger>
                                                    <CommandBadge variant="count" className="flex items-center gap-1">
                                                        Fast
                                                    </CommandBadge>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>Optimized for faster response times</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        </TooltipProvider>
                                    )}
                                    {activeSpace?.model === model.id && (
                                        <CommandBadge variant="active">Active</CommandBadge>
                                    )}
                                </div>
                            </div>
                            <p className="text-sm text-white/50">{model.description}</p>
                        </div>
                    </div>
                </Command.Item>
            ))}
        </Command.Group>
    )
}

================
File: components/ui/planet-icon.tsx
================
import React, { useMemo } from 'react';

interface PlanetIconProps {
  size?: number;
  seed?: string; // Ensures the same seed produces the same planet
}

const PlanetIcon = ({ size = 32, seed }: PlanetIconProps) => {
  // Compute a stable number from the seed for use in filters
  const filterSeed = useMemo(() => {
    return Math.floor(
      seed
        ? Array.from(seed).reduce((acc, char) => acc + char.charCodeAt(0), 0)
        : Math.random() * 1000
    );
  }, [seed]);

  // Seeded random number generator for reproducibility
  const random = useMemo(() => {
    const seedNum = seed
      ? Array.from(seed).reduce((acc, char) => acc + char.charCodeAt(0), 0)
      : Math.random() * 1000;
    let callCount = 0;
    return () => {
      callCount += 1;
      const x = Math.sin(seedNum + callCount) * 10000;
      return x - Math.floor(x);
    };
  }, [seed]);

  // Generate planet properties
  const {
    hasWater,
    baseHue,
    saturation,
    landHue,
    landColor,
    mountainColor,
    hasRings,
    ringColor,
    hasTrees,
    hasAtmosphere,
  } = useMemo(() => {
    const hasWater = random() < 0.7; // 70% chance of water
    const baseHue = hasWater ? 180 + random() * 60 : random() * 360; // Favor blues when water exists
    const saturation = 60 + random() * 30; // 60%–90%
    const landHue = hasWater ? random() * 120 : (baseHue + random() * 60) % 360; // Green/brown or varied
    const landColor = `hsl(${landHue}, 70%, 50%)`;
    const mountainColor = `hsl(${landHue}, 50%, 30%)`;
    const hasRings = random() < 0.3; // 30% chance
    const ringColor = hasRings ? `hsl(${(baseHue + 180) % 360}, ${saturation}%, 60%)` : null;
    const hasTrees = random() < 0.5; // 50% chance
    const hasAtmosphere = random() < 0.6; // 60% chance of visible atmosphere

    return {
      hasWater,
      baseHue,
      saturation,
      landHue,
      landColor,
      mountainColor,
      hasRings,
      ringColor,
      hasTrees,
      hasAtmosphere,
    };
  }, [random]);

  // Unique gradient IDs
  const baseGradientId = useMemo(() => `base_${Math.random().toString(36).substr(2, 9)}`, []);
  const shadowGradientId = useMemo(() => `shadow_${Math.random().toString(36).substr(2, 9)}`, []);
  const atmosphereGradientId = useMemo(
    () => `atmosphere_${Math.random().toString(36).substr(2, 9)}`,
    []
  );

  // Enhanced land mass generator for more organic coastlines
  const generateLandMassPath = () => {
    const startX = 10 + random() * 20;
    const startY = 10 + random() * 20;
    // Using cubic Bézier curves for a more natural contour
    return `
      M ${startX} ${startY}
      C ${startX + 5} ${startY - 5}, ${startX + 15} ${startY - 5}, ${startX + 20} ${startY}
      C ${startX + 15} ${startY + 10}, ${startX + 5} ${startY + 10}, ${startX} ${startY}
      Z
    `;
  };

  // Enhanced mountain path with natural quadratic curves
  const generateMountainPath = (baseX: number, baseY: number) => {
    const controlX = baseX + 4 + random() * 2;
    const controlY = baseY - 4 - random() * 2;
    const endX = baseX + 8 + random() * 2;
    const endY = baseY;
    return `M ${baseX} ${baseY} Q ${controlX} ${controlY} ${endX} ${endY} Z`;
  };

  return (
    <svg width={size} height={size} viewBox="0 0 50 50" className="flex-shrink-0">
      <defs>
        {/* Realistic base gradient with an extra stop for more depth */}
        <radialGradient id={baseGradientId} cx="0.4" cy="0.4" r="0.6">
          <stop offset="0%" stopColor={`hsl(${baseHue}, ${saturation}%, 85%)`} />
          <stop offset="50%" stopColor={`hsl(${baseHue}, ${saturation}%, 60%)`} />
          <stop offset="100%" stopColor={`hsl(${baseHue}, ${saturation}%, 35%)`} />
        </radialGradient>

        {/* Shadow gradient for 3D effect */}
        <radialGradient id={shadowGradientId} cx="0.75" cy="0.25" r="0.75">
          <stop offset="0%" stopColor="rgba(0,0,0,0)" />
          <stop offset="100%" stopColor="rgba(0,0,0,0.5)" />
        </radialGradient>

        {/* Atmosphere gradient for a subtle halo */}
        {hasAtmosphere && (
          <radialGradient id={atmosphereGradientId} cx="0.5" cy="0.5" r="0.8">
            <stop offset="0%" stopColor={`hsl(${baseHue}, ${saturation}%, 85%)`} stopOpacity="0.15" />
            <stop offset="100%" stopColor="transparent" />
          </radialGradient>
        )}

        {/* Bump filter: adds fractal noise and displacement for a realistic textured surface */}
        <filter id="bumpFilter" filterUnits="objectBoundingBox" x="-0.3" y="-0.3" width="1.6" height="1.6">
          <feTurbulence
            type="fractalNoise"
            baseFrequency="0.02"
            numOctaves="4"
            seed={filterSeed}
            result="noise"
          />
          <feDisplacementMap
            in="SourceGraphic"
            in2="noise"
            scale="3"
            xChannelSelector="R"
            yChannelSelector="G"
          />
        </filter>

        {/* Specular highlights filter: adds a subtle shiny reflection */}
        <filter id="specularHighlights" filterUnits="objectBoundingBox" x="-20%" y="-20%" width="140%" height="140%">
          <feGaussianBlur in="SourceAlpha" stdDeviation="1" result="blur" />
          <feSpecularLighting
            in="blur"
            surfaceScale="1"
            specularConstant="1"
            specularExponent="20"
            lightingColor="#ffffff"
            result="specOut"
          >
            <fePointLight x="-50" y="-50" z="100" />
          </feSpecularLighting>
          <feComposite in="specOut" in2="SourceAlpha" operator="in" result="specOut" />
          <feMerge>
            <feMergeNode in="specOut" />
            <feMergeNode in="SourceGraphic" />
          </feMerge>
        </filter>
      </defs>

      {/* Rings */}
      {hasRings && ringColor && (
        <ellipse
          cx="25"
          cy="25"
          rx="24"
          ry="6"
          fill="none"
          stroke={ringColor}
          strokeWidth="2"
          opacity="0.7"
          transform="rotate(-20 25 25)"
        />
      )}

      {/* Planet base with filters */}
      <g filter="url(#bumpFilter)">
        <g filter="url(#specularHighlights)">
          <circle cx="25" cy="25" r="20" fill={`url(#${baseGradientId})`} />
        </g>
      </g>

      {/* Land masses */}
      <path d={generateLandMassPath()} fill={landColor} opacity="0.9" />
      {random() < 0.6 && <path d={generateLandMassPath()} fill={landColor} opacity="0.9" />}

      {/* Mountains */}
      <path d={generateMountainPath(20, 30)} fill={mountainColor} opacity="0.85" />
      {random() < 0.5 && <path d={generateMountainPath(15, 25)} fill={mountainColor} opacity="0.85" />}

      {/* Trees */}
      {hasTrees && (
        <g>
          {Array.from({ length: 3 + Math.floor(random() * 3) }).map((_, i) => (
            <circle
              key={i}
              cx={15 + random() * 20}
              cy={20 + random() * 10}
              r="1"
              fill="hsl(120, 50%, 40%)"
              opacity="0.9"
            />
          ))}
        </g>
      )}

      {/* Atmospheric glow */}
      {hasAtmosphere && (
        <circle cx="25" cy="25" r="22" fill={`url(#${atmosphereGradientId})`} opacity="0.3" />
      )}

      {/* 3D shadow for depth */}
      <circle cx="25" cy="25" r="20" fill={`url(#${shadowGradientId})`} />
    </svg>
  );
};

export default PlanetIcon;

================
File: components/ui/provider-icon.tsx
================
import { 
  Anthropic, 
  OpenAI, 
  Cohere, 
  Mistral, 
  Google, 
  XAI, 
  Together, 
  DeepSeek, 
  Perplexity, 
  Groq 
} from '@lobehub/icons';
import { Provider } from '@/config/models';

interface ProviderIconProps {
  provider: Provider;
  size?: number;
  className?: string;
}

const PROVIDER_COMPONENTS = {
  groq: Groq,
  anthropic: Anthropic,
  openai: OpenAI,
  cohere: Cohere.Color,
  mistral: Mistral.Color,
  google: Google.Color,
  xai: XAI,
  togetherai: Together.Color,
  deepseek: DeepSeek.Color,
  cerebras: OpenAI,
  perplexity: Perplexity.Color
} as const;

export function ProviderIcon({ provider, size = 24, className = '' }: ProviderIconProps) {
  const IconComponent = PROVIDER_COMPONENTS[provider];
  if (!IconComponent) return null;
  
  return (
    <div className={`relative inline-block ${className}`} style={{ width: size, height: size }}>
      <IconComponent size={size} />
    </div>
  );
}

================
File: components/ui/quick-actions-command-provider.tsx
================
'use client';

import React, { createContext, useContext } from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
import { QuickActionsCommand } from '@/components/ui/quick-actions-command';
import { useCommandWindow } from '@/lib/hooks/use-command-window';

interface QuickActionsCommandContextType {
  isOpen: boolean;
  openQuickActionsCommand: (options?: { withSpaces?: boolean; withModels?: boolean; withConversations?: boolean }) => void;
  closeQuickActionsCommand: () => void;
  toggleQuickActionsCommand: (options?: { withSpaces?: boolean; withModels?: boolean; withConversations?: boolean }) => void;
  showSpaces: boolean;
  setShowSpaces: (show: boolean) => void;
  showModels: boolean;
  setShowModels: (show: boolean) => void;
  showConversations: boolean;
  setShowConversations: (show: boolean) => void;
}

const QuickActionsCommandContext = createContext<QuickActionsCommandContextType | undefined>(undefined);

export function QuickActionsCommandProvider({ children }: { children: React.ReactNode }) {
  const {
    isOpen,
    showSpaces,
    showModels,
    showConversations,
    setShowSpaces,
    setShowModels,
    setShowConversations,
    openCommandWindow: openQuickActionsCommand,
    closeCommandWindow: closeQuickActionsCommand,
    toggleCommandWindow: toggleQuickActionsCommand
  } = useCommandWindow();

  useHotkeys('meta+k, ctrl+k', (e) => {
    e.preventDefault();
    toggleQuickActionsCommand();
  }, { enableOnFormTags: true });

  useHotkeys('meta+s, ctrl+s', (e) => {
    e.preventDefault();
    toggleQuickActionsCommand({ withSpaces: true });
  }, { enableOnFormTags: true });

  useHotkeys('meta+m, ctrl+m', (e) => {
    e.preventDefault();
    toggleQuickActionsCommand({ withModels: true });
  }, { enableOnFormTags: true });

  useHotkeys('meta+d, ctrl+d', (e) => {
    e.preventDefault();
    openQuickActionsCommand({ withConversations: true });
  }, { enableOnFormTags: true });

  return (
    <QuickActionsCommandContext.Provider
      value={{
        isOpen,
        openQuickActionsCommand,
        closeQuickActionsCommand,
        toggleQuickActionsCommand,
        showSpaces,
        setShowSpaces,
        showModels,
        setShowModels,
        showConversations,
        setShowConversations
      }}
    >
      {children}
      <QuickActionsCommand isOpen={isOpen} onClose={closeQuickActionsCommand} />
    </QuickActionsCommandContext.Provider>
  );
}

export function useQuickActionsCommand() {
  const context = useContext(QuickActionsCommandContext);
  if (context === undefined) {
    throw new Error('useQuickActionsCommand must be used within a QuickActionsCommandProvider');
  }
  return context;
}

================
File: components/ui/quick-actions-command.tsx
================
'use client';

import { CommandModal } from '@/components/ui/command-modal';
import { ArrowLeft, Plus, Search, Sparkles } from 'lucide-react';
import { useQuickActionsCommand } from '@/components/ui/quick-actions-command-provider';
import { Command } from 'cmdk';
import { useState, useEffect } from 'react';
import { AVAILABLE_MODELS, PROVIDER_NAMES, type Provider } from '@/config/models';
import { QuickActionsList } from '@/components/ui/quick-actions-list'
import { SpacesList } from '@/components/ui/spaces-list'
import { ModelsList } from '@/components/ui/models-list'
import { ConversationsList } from '@/components/ui/conversations-list'
import { createSpace, getSpaces, setActiveSpace, updateSpace, getConversations, createConversation, createMessage, createSpaceHistory } from '@/app/actions';
import { useSpaceStore } from '@/lib/stores/space-store';
import { SpaceForm } from './space-form';
import { Conversation } from '@/types';
import { useConversationStore } from '@/lib/stores/conversation-store'
import { ConversationTab } from '@/components/ui/conversation-tab'
import { BaseTab } from '@/components/ui/base-tab'
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface QuickActionsCommandProps {
  isOpen: boolean;
  onClose: () => void;
}

export const QuickActionsCommand = ({ isOpen, onClose }: QuickActionsCommandProps) => {
  const { showSpaces, setShowSpaces, showModels, setShowModels, showConversations, setShowConversations } = useQuickActionsCommand();
  const { spaces, setSpaces, activeSpace, setActiveSpace } = useSpaceStore();
  const { activeConversation, setActiveConversation } = useConversationStore();
  const [searchValue, setSearchValue] = useState('');
  const [selectedProvider, setSelectedProvider] = useState<Provider | null>(null);
  const [showSpaceForm, setShowSpaceForm] = useState(false);
  const [spaceForm, setSpaceForm] = useState<{
    name: string;
    description: string;
    provider: Provider;
    model: string;
    color: string;
  }>({
    name: '',
    description: '',
    provider: 'groq',
    model: AVAILABLE_MODELS['groq'][0]?.id || '',
    color: ''
  });

  useEffect(() => {
    setSearchValue('');
    setSelectedProvider(null);
  }, [showSpaces, showModels, showConversations]);

  useEffect(() => {
    if (!isOpen) {
      setShowSpaceForm(false);
      setSpaceForm({
        name: '',
        description: '',
        provider: 'groq',
        model: AVAILABLE_MODELS['groq'][0]?.id || '',
        color: ''
      });
    }
  }, [isOpen]);


  const handleSpaceSelect = async (spaceId: string) => {
    setSearchValue('');
    onClose();

    await setActiveSpace(spaceId);

    const updatedSpaces = await getSpaces();
    if (updatedSpaces) {
      setSpaces(updatedSpaces);
      const newActiveSpace = updatedSpaces.find((s) => s.id === spaceId);
      if (newActiveSpace) {
        setActiveSpace(newActiveSpace);
      }
    }
  };

  const handleCreateConversation = async () => {
    onClose();

    const newConversation = await createConversation(activeSpace.id, 'New Conversation');
    if (newConversation) {
      setActiveConversation(newConversation);
      setConversations([...(conversations || []), newConversation]);
    }


    toast({
      title: 'New Conversation Created',
      description: 'You can start chatting right away.',
      variant: 'default',
      className: cn(
        'bg-black/90 border border-white/10',
        'backdrop-blur-xl shadow-xl shadow-black/20',
        'text-white/90 font-medium',
        'rounded-lg'  
      ),
      duration: 2000,
    })
  }

  const handleConversationSelect = async (conversationId: string) => {
    setSearchValue('');
    onClose();
    
    const { conversations } = useConversationStore.getState()
    const conversation = conversations?.find(c => c.id === conversationId)
    if (conversation) {
      await setActiveConversation(conversation)
    }
  };

  const [isCreatingSpace, setIsCreatingSpace] = useState(false);

  const handleCreateSpace = async () => {
    if (!spaceForm.name) return;
    setIsCreatingSpace(true);

    const newSpace = await createSpace(
      spaceForm.name,
      spaceForm.description,
      spaceForm.model,
      spaceForm.provider,
      true,
      spaceForm.color
    );
    
    if (newSpace) {
      const conversation = await createConversation(newSpace.id, "Welcome to Your Space");
      if (conversation) {
        await createMessage({
          content: `Welcome to your new space, ${spaceForm.name}! 🎉

          This space is designed to be your personalized AI assistant environment. Here's what makes it special:

          • Context Awareness: All conversations in this space share context, helping me understand your preferences and history better.

          • Persistent Memory: I'll remember important details from our conversations, making future interactions more efficient.

          • Customized Model: This space uses ${PROVIDER_NAMES[spaceForm.provider]} with the ${spaceForm.model} model, optimized for your needs.

          Feel free to start a conversation or ask any questions. I'm here to help!`,
          role: 'assistant'
        }, conversation.id);

        setActiveConversation(conversation);
      }
      
      const allSpaces = await getSpaces();
      if (allSpaces) setSpaces(allSpaces);
      
      setActiveSpace(newSpace);
    }
    setIsCreatingSpace(false);

    // Show toast and create notification
    toast({
      title: 'Space Created',
      description: `${spaceForm.name} has been created.`,
      variant: 'default',
      className: cn(
        'bg-black/90 border border-white/10',
        'backdrop-blur-xl shadow-xl shadow-black/20',
        'text-white/90 font-medium',
        'rounded-lg'
      ),
      duration: 3000,
    });

    // Record in space history
    await createSpaceHistory({
      spaceId: newSpace.id,
      actionType: 'created',
      title: 'Space Created',
      description: `${spaceForm.name} has been created.`,
      metadata: { 
        spaceName: spaceForm.name,
        model: spaceForm.model,
        provider: spaceForm.provider
      }
    });

    onClose();
  };

  const handleModelSelect = async (modelId: string, provider: Provider) => {
    if (!activeSpace) return;
    setSearchValue('');
    onClose();

    const updatedSpace = await updateSpace(activeSpace.id, { model: modelId, provider: provider });
    if (updatedSpace) {
      setActiveSpace(updatedSpace);
    }
  };

  const handleGoBack = () => {
    if (showSpaceForm) {
      setShowSpaceForm(false);
    } else if (showSpaces) {
      setShowSpaces(false);
    } else if (showModels) {
      if (selectedProvider) {
        setSelectedProvider(null);
      } else {
        setShowModels(false);
      }
    } else if (showConversations) {
      setShowConversations(false);
    }
    setSearchValue('');
  };

  return (
    <CommandModal
      isOpen={isOpen}
      onClose={() => {
        onClose()
        setShowSpaces(false)
        setShowModels(false)
        setShowConversations(false)
        setSearchValue('')
        setSelectedProvider(null)
        setShowSpaceForm(false)
      }}
      placeholder={showSpaceForm ? "Configure your new space..." :
        showSpaces ? "Search spaces..." :
        showModels ? (selectedProvider ? `Search ${PROVIDER_NAMES[selectedProvider]} models...` : "Select a provider...") :
        showConversations ? "Search conversations..." : "Search quick actions..."}
      searchValue={showSpaceForm ? '' : searchValue}
      onSearchChange={showSpaceForm ? undefined : setSearchValue}
      hideSearch={showSpaceForm}
      leftElement={(showSpaces || showModels || showConversations || showSpaceForm) ? (
        <button
          onClick={handleGoBack}
          className="flex items-center gap-2 text-white/70 hover:text-white transition-colors px-2 py-1 rounded-md
            border border-white/10 bg-white/5 hover:bg-white/10 mr-2"
        >
          <ArrowLeft className="w-4 h-4" />
          <span className="text-sm font-medium">Back</span>
        </button>
      ) : null}
      showSpaceForm={showSpaceForm}
      isCreatingSpace={isCreatingSpace}
      setShowSpaceForm={setShowSpaceForm}
      showSpaces={showSpaces}
      setShowSpaces={setShowSpaces}
      showModels={showModels}
      setShowModels={setShowModels}
      selectedProvider={selectedProvider}
      setSelectedProvider={setSelectedProvider}
    >
      <Command.List>
        {showSpaceForm ? (
          <SpaceForm
            spaceForm={spaceForm}
            onSpaceFormChange={setSpaceForm}
            onSubmit={handleCreateSpace}
            isCreating={isCreatingSpace}
          />
        ) : !showSpaces && !showModels && !showConversations ? (
          <QuickActionsList
            onShowSpaces={() => {
              setShowSpaces(true)
              setSearchValue('')
            }}
            onShowModels={() => {
              setShowModels(true)
              setSearchValue('')
            }}
            onShowConversations={() => {
              setShowConversations(true)
              setSearchValue('')
            }}
            onCreateSpace={() => {
              setSearchValue('')
            }}
            onCreateConversation={() => {
              handleCreateConversation()
            }}
          />
        ) : showSpaces ? (
          <SpacesList
            spaces={spaces}
            onSpaceSelect={handleSpaceSelect}
            activeSpaceId={activeSpace?.id}
            onCreateSpace={() => {
              setShowSpaceForm(true)
              setSearchValue('')
            }}
          />
        ) : showModels ? (
          <ModelsList
            selectedProvider={selectedProvider}
            onProviderSelect={(provider) => {
              setSelectedProvider(provider)
              setSearchValue('')
            }}
            onModelSelect={handleModelSelect}
            activeSpace={activeSpace}
          />
        ) : showConversations && activeSpace ? (
          <ConversationsList
            spaceId={activeSpace.id}
            onConversationSelect={handleConversationSelect}
          />
        ) : null}
      </Command.List>
    </CommandModal>
  )
};

================
File: components/ui/quick-actions-list.tsx
================
import { Command } from 'cmdk';
import { Cpu, Sparkles, Globe, MessageSquare, Plus, Search, ArrowRight, History } from 'lucide-react';
import { JSX } from 'react';
import { AnimatedCommandItem } from './command-item';

interface QuickAction {
    id: string;
    name: string;
    description?: string;
    icon: JSX.Element;
    callback?: () => void;
    shortcut?: string[];
    category?: 'navigation' | 'creation' | 'action';
}

interface QuickActionsListProps {
    onShowSpaces: () => void;
    onShowModels: () => void;
    onShowConversations: () => void;
    onCreateSpace?: () => void;
    onCreateConversation?: () => void;
}

export function QuickActionsList({ onShowSpaces, onShowModels, onShowConversations, onCreateSpace, onCreateConversation }: QuickActionsListProps) {

    const aiActions: QuickAction[] = [
        {
            id: 'generate',
            name: 'Generate Content',
            description: 'Create new AI-generated content',
            icon: <Sparkles className="w-4 h-4" />,
            category: 'action'
        },
        {
            id: 'continue',
            name: 'Continue Generation',
            description: 'Continue from the last AI response',
            icon: <ArrowRight className="w-4 h-4" />,
            category: 'action'
        }
    ];

    const navigationActions: QuickAction[] = [
        {
            id: 'conversations',
            name: 'Search Conversations',
            description: 'Find and switch between conversations',
            icon: <Search className="w-4 h-4" />,
            callback: onShowConversations,
            shortcut: ['⌘', 'C'],
            category: 'navigation'
        },
        {
            id: 'recent-conversations',
            name: 'Recent Conversations',
            description: 'View your latest conversations',
            icon: <History className="w-4 h-4" />,
            category: 'navigation'
        },
        {
            id: 'spaces',
            name: 'Switch Space',
            description: 'Change to a different workspace',
            icon: <Globe className="w-4 h-4" />,
            callback: onShowSpaces,
            shortcut: ['⌘', 'S'],
            category: 'navigation'
        },
        {
            id: 'models',
            name: 'Change Model',
            description: 'Select a different AI model',
            icon: <Cpu className="w-4 h-4" />,
            callback: onShowModels,
            shortcut: ['⌘', 'M'],
            category: 'navigation'
        }
    ];

    const creationActions: QuickAction[] = [
        {
            id: 'new-conversation',
            name: 'New Conversation',
            description: 'Start a fresh conversation',
            icon: <Plus className="w-4 h-4" />,
            callback: onCreateConversation,
            category: 'creation'
        },
        {
            id: 'create-space',
            name: 'Create New Space',
            description: 'Create a new workspace',
            icon: <Plus className="w-4 h-4" />,
            callback: onCreateSpace,
            category: 'creation'
        }
    ];


    const renderQuickActions = (actions: QuickAction[]) => {
        return actions.map((item, index) => (
            <AnimatedCommandItem
                key={item.id}
                value={`${item.id} ${item.name} ${item.description || ''}`}
                onSelect={() => {
                    item.callback?.();
                }}
                data-selected={index === 0 ? 'true' : undefined}
            >
                <div className="flex items-center gap-3 w-full">
                    <span className="flex-shrink-0 opacity-70 group-hover:opacity-100 group-data-[selected=true]:opacity-100 transition-opacity">
                        {item.icon}
                    </span>
                    <div className="flex-1">
                        <div className="flex items-center justify-between">
                            <span className="font-medium transition-colors duration-200 group-hover:text-white">
                                {item.name}
                            </span>
                            {item.shortcut && (
                                <div className="flex items-center gap-2">
                                    <span className="flex gap-1 items-center">
                                        {item.shortcut.map((key, i) => (
                                            <kbd key={i} className="flex items-center justify-center w-6 h-6 rounded bg-white/10 border border-white/20 text-white/70 text-xs font-medium">
                                                {key}
                                            </kbd>
                                        ))}
                                    </span>
                                </div>
                            )}
                        </div>
                        {item.description && (
                            <p className="text-sm text-white/50 group-hover:text-white/70 transition-colors">
                                {item.description}
                            </p>
                        )}
                    </div>
                </div>
            </AnimatedCommandItem>
        ));
    };

    return (
        <>
            <Command.Group heading="Quick Actions" className="pb-4">
                {renderQuickActions(aiActions)}
            </Command.Group>

            <Command.Group heading="Navigation" className="pb-4">
                {renderQuickActions(navigationActions)}
            </Command.Group>

            <Command.Group heading="Create New" className="pb-4">
                {renderQuickActions(creationActions)}
            </Command.Group>
        </>
    );
}

================
File: components/ui/quick-actions-tab.tsx
================
import { Sparkles } from "lucide-react";
import { BaseTab } from "./base-tab";
import { useQuickActionsCommand } from "./quick-actions-command-provider";

export default function QuickActionsTab() {
    const { toggleQuickActionsCommand } = useQuickActionsCommand();

    return (
        <BaseTab
            icon={<Sparkles className="w-3 h-3" />}
            label="Quick Actions"
            shortcut="K"
            minWidth="actions"
            onClick={() => toggleQuickActionsCommand()}
        />
    );
}

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/space-form.tsx
================
import { Command } from 'cmdk'
import { AVAILABLE_MODELS, PROVIDER_NAMES, type Provider } from '@/config/models'
import { ProviderIcon } from './provider-icon'
import { useState } from 'react'

interface SpaceFormProps {
  spaceForm: {
    name: string
    description: string
    provider: Provider
    model: string
  }
  onSpaceFormChange: (form: any) => void
  onSubmit: () => void
  isCreating?: boolean
}

export function SpaceForm({ spaceForm, onSpaceFormChange, onSubmit, isCreating = false }: SpaceFormProps) {
  return (
    <div className="pt-1 pb-4 pl-4 pr-4 space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="text-xs font-medium text-white/40">Name</label>
          <input
            placeholder="Enter space name"
            value={spaceForm.name}
            onChange={(e) => onSpaceFormChange({ ...spaceForm, name: e.target.value })}
            onKeyDown={(e) => e.stopPropagation()}
            className="w-full bg-white/5 border border-white/10 rounded-md px-3 py-2 text-sm text-white/90 placeholder:text-white/40 focus:outline-none focus:ring-1 focus:ring-[#3ecfff]/50 focus:border-[#3ecfff]/50 transition-all"
            autoFocus
          />
        </div>
        <div className="space-y-2">
          <label className="text-xs font-medium text-white/40">Description</label>
          <textarea
            placeholder="Enter space description (optional)"
            value={spaceForm.description}
            onChange={(e) => onSpaceFormChange({ ...spaceForm, description: e.target.value })}
            onKeyDown={(e) => e.stopPropagation()}
            className="w-full bg-white/5 border border-white/10 rounded-md px-3 py-2 text-sm text-white/90 placeholder:text-white/40 min-h-[80px] resize-none focus:outline-none focus:ring-1 focus:ring-[#3ecfff]/50 focus:border-[#3ecfff]/50 transition-all"
          />
        </div>
      </div>

      <div className="space-y-2">
        <label className="text-xs font-medium text-white/40">Provider</label>
        <div className="grid grid-cols-2 gap-2">
          {Object.entries(PROVIDER_NAMES).map(([provider, name]) => (
            <button
              key={provider}
              onClick={() => {
                const newProvider = provider as Provider
                onSpaceFormChange({
                  ...spaceForm,
                  provider: newProvider,
                  model: AVAILABLE_MODELS[newProvider][0]?.id || ''
                })
              }}
              className={`flex items-center gap-2 px-3 py-2 rounded-md border transition-colors ${
                spaceForm.provider === provider
                  ? 'bg-white/10 border-white/20 shadow-sm shadow-white/5'
                  : 'bg-white/5 border-white/10 hover:bg-white/[0.07]'
              }`}
            >
              <ProviderIcon
                provider={provider as Provider}
                size={16}
                className={spaceForm.provider === provider ? 'text-[#3ecfff]' : 'text-white/60'}
              />
              <span className="text-sm text-white/90">{name}</span>
            </button>
          ))}
        </div>
      </div>

      <div className="space-y-2">
        <label className="text-xs font-medium text-white/40">Model</label>
        <div className="space-y-1.5">
          {AVAILABLE_MODELS[spaceForm.provider].map((model) => (
            <button
              key={model.id}
              onClick={() => onSpaceFormChange({ ...spaceForm, model: model.id })}
              className={`w-full flex items-center gap-2 px-3 py-2 rounded-md border transition-all duration-200 ${
                spaceForm.model === model.id
                  ? 'bg-white/10 border-white/20 shadow-sm shadow-white/5'
                  : 'bg-white/5 border-white/10 hover:bg-white/[0.07]'
              }`}
            >
              <ProviderIcon
                provider={spaceForm.provider}
                size={16}
                className={spaceForm.model === model.id ? 'text-[#3ecfff]' : 'text-white/60'}
              />
              <span className="text-sm text-white/90">{model.name}</span>
            </button>
          ))}
        </div>
      </div>

      <button
        onClick={onSubmit}
        disabled={!spaceForm.name || isCreating}
        className={`w-full px-4 py-2.5 rounded-md text-sm font-medium transition-all duration-200 ${
          spaceForm.name && !isCreating
            ? 'bg-[#3ecfff] hover:bg-[#3ecfff]/90 text-black shadow-lg shadow-[#3ecfff]/20'
            : 'bg-white/5 text-white/40 cursor-not-allowed border border-white/10'
        }`}
      >
        {isCreating ? (
          <span className="loading-dots">Creating space</span>
        ) : (
          'Create Space'
        )}
      </button>
    </div>
  )
}

================
File: components/ui/space-tab.tsx
================
'use client'

import { useSpaceStore } from '@/lib/stores/space-store';
import { BaseTab } from './base-tab';
import { useQuickActionsCommand } from './quick-actions-command-provider';
import PlanetIcon from './planet-icon';

export const SpaceTab = () => {
  const activeSpace = useSpaceStore((state) => state.activeSpace);
  const { toggleQuickActionsCommand } = useQuickActionsCommand();

  const spaceColor = activeSpace?.color || '#3ecfff';

  return (
    <div className="relative flex items-center">
      {activeSpace && <PlanetIcon size={20} seed={activeSpace.id} className="mr-2" />}
      <BaseTab
        color={spaceColor}
        label={activeSpace ? activeSpace.name : 'No Active Space'}
        shortcut="S"
        isActive={!!activeSpace}
        minWidth="space"
        onClick={() => toggleQuickActionsCommand({ withSpaces: true })}
      />
    </div>
  );
};

================
File: components/ui/spaces-list.tsx
================
import { Command } from 'cmdk';
import { Plus, Settings } from 'lucide-react';
import PlanetIcon from './planet-icon';
import { Space } from '@/types';
import { createSpace } from '@/app/actions';
import { useState } from 'react';
import { commandItemClass } from './command-item';
import { useSpaceStore } from '@/lib/stores/space-store';
import { CommandBadge } from './command-badge';
import { cn } from '@/lib/utils';
import { ProviderIcon } from './provider-icon';
import { PROVIDER_NAMES } from '@/config/models';
import { DeleteSpaceDialog } from './delete-space-dialog';

interface SpacesListProps {
  spaces: Space[] | null;
  onSpaceSelect: (spaceId: string) => Promise<void>;
  activeSpaceId?: string;
  onCreateSpace?: () => void;
}

export function SpacesList({ spaces, onSpaceSelect, activeSpaceId, onCreateSpace }: SpacesListProps) {


  if (!spaces) {
    return (
      <div className="py-8 text-center">
        <PlanetIcon size={24} className="mx-auto mb-3 animate-pulse opacity-20" />
        <p className="text-sm text-white/40">Loading spaces...</p>
      </div>
    );
  }

  if (spaces.length === 0) {
    return (
      <div className="py-8 text-center">
        <PlanetIcon size={24} className="mx-auto mb-3 opacity-20" />
        <p className="text-sm text-white/40">No spaces found</p>
        <p className="text-xs text-white/30 mt-1">Create a new space to get started</p>
      </div>
    );
  }

  return (
    <>
      <Command.Group heading="Quick Actions" className="pb-4">
        <Command.Item
          value="create new space create space"
          onSelect={() => onCreateSpace?.()}
          className={commandItemClass()}
        >
          <div className="flex items-center gap-3 w-full">
            <div className="flex-shrink-0 w-8 h-8 rounded-md bg-[#3ecfff]/10 flex items-center justify-center">
              <Plus className="w-4 h-4 text-[#3ecfff]" />
            </div>
            <div className="flex-1">
              <div className="font-medium text-white/90">Create New Space</div>
              <p className="text-sm text-white/50">Set up a new workspace with custom models</p>
            </div>
          </div>
        </Command.Item>
      </Command.Group>

      <Command.Group heading="Your Spaces" className="pb-4">
        {spaces.map((space) => (
          <Command.Item
            key={space.id}
            value={`${space.id} ${space.name} ${space.description || ''}`}
            onSelect={() => onSpaceSelect(space.id)}
            className={commandItemClass(space.id === activeSpaceId)}
          >
            <div className="flex items-center gap-3 w-full">
            <PlanetIcon size={20} seed={space.id} />
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <span className="font-medium text-white/90 truncate">{space.name}</span>
                  <div className="flex items-center gap-2 ml-2">
                    {space.id === activeSpaceId && <CommandBadge variant="active">Active</CommandBadge>}
                    {space.provider && (
                      <div className="w-5 h-5 flex items-center justify-center">
                        <ProviderIcon provider={space.provider} size={16} />
                      </div>
                    )}
                    {!space.id.includes('default') && spaces.length > 1 && (
                      <div className="flex items-center justify-center w-5 h-5">
                        <DeleteSpaceDialog spaceId={space.id} spaceName={space.name} />
                      </div>
                    )}
                  </div>
                </div>
                {space.description && (
                  <p className="text-sm text-white/50 truncate">{space.description}</p>
                )}
              </div>
            </div>
          </Command.Item>
        ))}
      </Command.Group>
    </>

  );
}

================
File: components/ui/status-tab.tsx
================
import React, { useMemo } from 'react';

export const StatusTab: React.FC = React.memo(() => {

  const { statusText, statusColor } = useMemo(() => {
    const text = 'Ready';
    const color = 'bg-green-500';

    return { statusText: text, statusColor: color };
  }, []);

  return (
    <div
      className="px-3 py-1 rounded-t-lg backdrop-blur-2xl bg-white/[0.03] border border-white/[0.05] text-white text-xs font-medium flex items-center gap-1.5 relative overflow-hidden
        before:absolute before:inset-0 before:backdrop-blur-3xl before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10"
    >
      <div className={`w-1.5 h-1.5 rounded-full ${statusColor}`} />
      <span>{statusText}</span>
    </div>
  );
});

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/syntax-highlighter.ts
================
// A lightweight syntax highlighter with VS Code-inspired theming
// Optimized for readability and performance

import { getHighlighter, type BundledLanguage, type BundledTheme } from 'shiki'

let highlighter: Awaited<ReturnType<typeof getHighlighter>> | null = null

const initializeHighlighter = async () => {
  if (!highlighter) {
    highlighter = await getHighlighter({
      themes: ['dracula'],
      langs: [
        'javascript',
        'typescript',
        'jsx',
        'tsx',
        'python',
        'java',
        'c',
        'cpp',
        'csharp',
        'go',
        'rust',
        'ruby',
        'php',
        'swift',
        'kotlin',
        'scala',
        'html',
        'css',
        'scss',
        'json',
        'yaml',
        'markdown',
        'sql',
        'shell',
        'bash',
        'powershell',
        'dockerfile',
        'graphql',
        'xml'
      ]
    })
  }
  return highlighter
}

const normalizeLanguage = (language: string): BundledLanguage => {
  const languageMap: Record<string, BundledLanguage> = {
    'js': 'javascript',
    'ts': 'typescript',
    'py': 'python',
    'rb': 'ruby',
    'rs': 'rust',
    'sh': 'shell',
    'yml': 'yaml',
    'md': 'markdown',
    'bash': 'shell',
    'zsh': 'shell',
    'cs': 'csharp',
    'plaintext': 'markdown',
    'txt': 'markdown'
  }

  return (languageMap[language] || language) as BundledLanguage
}

export const highlight = async (code: string, language: string): Promise<string> => {
  try {
    const instance = await initializeHighlighter()
    const normalizedLang = normalizeLanguage(language)
    
    const html = instance.codeToHtml(code, {
      lang: normalizedLang,
      theme: 'dracula'
    })

    // Enhance the HTML output with better styling
    return html
      .replace('<pre class="shiki"', '<pre class="shiki overflow-x-auto p-4 text-sm leading-relaxed font-mono"')
      .replace('<code>', '<code class="grid">')
      // Add line numbers
      .replace(
        /(<span class="line">)/g,
        '<span class="line flex"><span class="text-[#6272A4] opacity-50 select-none w-12 text-right pr-4 inline-block"></span>'
      )
  } catch (error) {
    // Fallback to basic HTML escaping if highlighting fails
    const escaped = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;')

    return `<pre class="overflow-x-auto p-4 text-sm leading-relaxed font-mono bg-[#282A36] text-[#F8F8F2]"><code>${escaped}</code></pre>`
  }
}

================
File: components/ui/tab-skeleton.tsx
================
export function TabSkeleton() {
  return (
    <div className="flex items-center gap-2 animate-pulse">
      {/* Space Tab Skeleton */}
      <div className="px-3 py-1 rounded-t-lg backdrop-blur-2xl border border-white/[0.05] min-w-[100px]
        before:absolute before:inset-0 before:backdrop-blur-3xl before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
        <div className="flex items-center gap-1.5">
          <div className="w-2 h-2 rounded-full bg-white/10" />
          <div className="h-3 w-16 bg-white/10 rounded" />
        </div>
      </div>

      {/* Quick Actions Tab Skeleton */}
      <div className="px-3 py-1 rounded-t-lg backdrop-blur-2xl border border-white/[0.05]
        before:absolute before:inset-0 before:backdrop-blur-3xl before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
        <div className="flex items-center gap-1.5">
          <div className="w-3 h-3 rounded bg-white/10" />
          <div className="h-3 w-20 bg-white/10 rounded" />
        </div>
      </div>

      {/* Model Tab Skeleton */}
      <div className="px-3 py-1 rounded-t-lg backdrop-blur-2xl border border-white/[0.05] min-w-[120px]
        before:absolute before:inset-0 before:backdrop-blur-3xl before:bg-gradient-to-b before:from-white/[0.07] before:to-white/[0.03] before:-z-10">
        <div className="flex items-center gap-1.5">
          <div className="w-3.5 h-3.5 rounded-full bg-white/10" />
          <div className="h-3 w-24 bg-white/10 rounded" />
        </div>
      </div>
    </div>
  )
}

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-lg px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 bg-black/90 border border-white/10 backdrop-blur-xl shadow-xl shadow-black/20 text-white/90 font-medium",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/unified-input.tsx
================
"use client";

import React, { ChangeEvent, useRef, useState, useEffect, useCallback } from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
import { Button } from './button';

interface UnifiedInputProps {
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>) => void;
  onSubmit: () => void;
  disabled?: boolean;
  children?: React.ReactNode;
}

export const UnifiedInput: React.FC<UnifiedInputProps> = ({
  value,
  onChange,
  onSubmit,
  disabled = false,
  children
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const focusInput = useCallback(() => {
    textareaRef.current?.focus();
  }, []);

  useHotkeys('meta+/', (e) => {
    e.preventDefault();
    focusInput();
  }, { enableOnFormTags: true });

  useEffect(() => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    const adjustHeight = () => {
      textarea.style.height = 'auto';
      const newHeight = Math.min(textarea.scrollHeight, 200);
      textarea.style.height = `${newHeight}px`;
    };

    adjustHeight();
  }, [value]);

  const handleSubmit = () => {
    if (!value.trim() || disabled) return;
    onSubmit();
  };

  return (
    <div className="relative">
      {children}
      <div 
        className={`
          relative rounded-2xl rounded-t-none
          bg-white/[0.03] border border-white/[0.05]
          transition-all duration-300
          overflow-hidden backdrop-blur-xl
          ${isFocused ? 'bg-white/[0.05] border-white/[0.1]' : ''}
        `}
      >
        <div className="flex items-center gap-2">
          <textarea
            ref={textareaRef}
            value={value}
            onChange={onChange}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit();
              }
            }}
            placeholder={"Type your message... (Press ⌘+/ to focus)"}
            className="flex-1 text-sm resize-none min-h-[48px] max-h-[200px] px-4 py-3 focus:bg-transparent bg-transparent focus:outline-none transition-colors duration-200 overflow-y-auto scrollbar-thin scrollbar-thumb-white/10 scrollbar-track-transparent text-white/90 placeholder:text-white/40"
            style={{ overflow: value.split('\n').length > 8 ? 'auto' : 'hidden' }}
            rows={1}
          />

            <Button
              variant="cyan"
              onClick={(e) => {
                e.preventDefault();
                handleSubmit();
              }}
              disabled={disabled}
              className="h-8"
            >
              Send
            </Button>
          </div>
        </div>
        </div>
  );
};

================
File: components/ui/user-profile-dropdown.tsx
================
'use client'

import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { User } from '@supabase/supabase-js'
import { signOutAction } from '@/app/actions'
import { getNotifications, markAllNotificationsAsRead, markNotificationAsRead } from '@/app/actions'
import { useNotificationStore } from '@/lib/stores/notification-store'
import { Bell } from 'lucide-react'
import { cn } from '@/lib/utils'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Settings, User as UserIcon, LogOut } from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'

interface UserProfileDropdownProps {
  user: User
}

export function UserProfileDropdown({ user }: UserProfileDropdownProps) {
  const { notifications, unreadCount, setNotifications, addNotification } = useNotificationStore();
  const [isOpen, setIsOpen] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);

  // Load initial notifications
  useEffect(() => {
    const loadNotifications = async () => {
      const notifications = await getNotifications();
      setNotifications(notifications);
    };
    loadNotifications();
  }, []);

  // Set up realtime subscription
  useEffect(() => {
    const supabase = createClient();
    
    // Subscribe to realtime notifications
    const channel = supabase
      .channel('notifications')
      .on('postgres_changes', 
        { 
          event: 'INSERT', 
          schema: 'public', 
          table: 'notifications',
          filter: `user_id=eq.${user.id}`
        }, 
        (payload) => {
          const newNotification = payload.new;
          if (newNotification) {
            console.log('New notification received:', newNotification);
            addNotification(newNotification);
          }
        }
      )
      .subscribe();

    console.log('Subscribed to notifications channel');

    return () => {
      console.log('Unsubscribing from notifications channel');
      channel.unsubscribe();
    };
  }, [user.id, addNotification]);

  const handleMarkAsRead = async (notificationId: string) => {
    await markNotificationAsRead(notificationId);
    const notifications = await getNotifications();
    setNotifications(notifications);
  };

  const handleMarkAllAsRead = async () => {
    await markAllNotificationsAsRead();
    const notifications = await getNotifications();
    setNotifications(notifications);
  };
  const router = useRouter()
  const userInitials = user.email
    ? user.email.substring(0, 2).toUpperCase()
    : '??'

  const handleLogout = async () => {
    router.push('/sign-in')
    await signOutAction()
  }

  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="ghost" 
          className="relative h-8 w-8 rounded-full bg-white/[0.03] border border-white/[0.08] backdrop-blur-xl hover:bg-white/[0.06] hover:border-white/[0.15] transition-all duration-300 group"
        >
          <Avatar className="h-8 w-8">
            <AvatarImage src={user.user_metadata.avatar_url} alt={user.email || ''} />
            <AvatarFallback className="bg-transparent text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300">{userInitials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent 
        className="w-56 bg-black/20 border border-white/[0.05] backdrop-blur-xl" 
        align="end" 
        forceMount
      >
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1.5">
            <p className="text-sm font-medium leading-none text-white/90 truncate max-w-[200px]">
              {user.user_metadata.full_name || user.email}
            </p>
            <p className="text-xs leading-none text-white/40 truncate max-w-[200px]">
              {user.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator className="bg-white/[0.05]" />
        <DropdownMenuGroup>
          <DropdownMenuItem 
            onClick={(e) => {
              e.preventDefault();
              setShowNotifications(!showNotifications);
            }}
            className="group px-3 py-1.5 hover:bg-transparent focus:bg-transparent cursor-pointer relative"
          >
            <Bell className="mr-2 h-4 w-4 text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300" />
            <span className="text-white/75 group-hover:text-white/95 transition-colors duration-300">Notifications</span>
            {unreadCount > 0 && (
              <span className="absolute right-2 top-1/2 -translate-y-1/2 bg-[#3ecfff] text-black text-xs px-1.5 py-0.5 rounded-full">
                {unreadCount}
              </span>
            )}
          </DropdownMenuItem>
          {showNotifications && (
            <>
              {unreadCount > 0 && (
                <div className="px-3 py-2">
                  <button
                    onClick={handleMarkAllAsRead}
                    className="text-xs text-white/50 hover:text-white/90 transition-colors"
                  >
                    Mark all as read
                  </button>
                </div>
              )}
              <div className="max-h-48 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="px-3 py-2 text-sm text-white/50">
                No notifications
              </div>
            ) : (
              notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={cn(
                    'px-3 py-2 text-sm hover:bg-white/[0.03] transition-colors cursor-default',
                    !notification.is_read && 'bg-white/[0.03]'
                  )}
                >
                  <div className="flex items-center justify-between gap-2">
                    <div className="font-medium text-white/90">{notification.title}</div>
                    {!notification.is_read && (
                      <button
                        onClick={() => handleMarkAsRead(notification.id)}
                        className="text-xs text-white/50 hover:text-white/90 transition-colors"
                      >
                        Mark as read
                      </button>
                    )}
                  </div>
                  <div className="mt-1 text-white/70 text-xs">{notification.description}</div>
                  <div className="mt-1 text-[10px] text-white/40">
                    {new Date(notification.created_at).toLocaleDateString()} at{' '}
                    {new Date(notification.created_at).toLocaleTimeString()}
                  </div>
                </div>
              ))
            )}
              </div>
            </>
          )}
          <Link href="/protected/profile">
          <DropdownMenuItem className="group px-3 py-1.5 hover:bg-transparent focus:bg-transparent cursor-pointer">
              <UserIcon className="mr-2 h-4 w-4 text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300" />
            <span className="text-white/75 group-hover:text-white/95 transition-colors duration-300">Profile</span>
          </DropdownMenuItem>
          </Link>
          <Link href="/protected/settings">
            <DropdownMenuItem className="group px-3 py-1.5 hover:bg-transparent focus:bg-transparent cursor-pointer">
              <Settings className="mr-2 h-4 w-4 text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300" />
              <span className="text-white/75 group-hover:text-white/95 transition-colors duration-300">Settings</span>
            </DropdownMenuItem>
          </Link>
        </DropdownMenuGroup>
        <DropdownMenuSeparator className="bg-white/[0.05]" />
        <DropdownMenuItem asChild>
          <button
            onClick={handleLogout}
            className="w-full group px-3 py-1.5 flex items-center hover:bg-transparent focus:bg-transparent outline-none transition-all duration-300"
          >
            <LogOut className="mr-2 h-4 w-4 text-white/60 group-hover:text-[#3ecfff]/80 transition-colors duration-300" />
            <span className="text-white/75 group-hover:text-white/95 transition-colors duration-300">Log out</span>
          </button>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: components/deploy-button.tsx
================
import Link from "next/link";
import { Button } from "./ui/button";

export default function DeployButton() {
  return (
    <>
      <Link
        href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png"
        target="_blank"
      >
        <Button className="flex items-center gap-2" size={"sm"}>
          <svg
            className="h-3 w-3"
            viewBox="0 0 76 65"
            fill="hsl(var(--background)/1)"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M37.5274 0L75.0548 65H0L37.5274 0Z" fill="inherit" />
          </svg>
          <span>Deploy to Vercel</span>
        </Button>
      </Link>
    </>
  );
}

================
File: components/env-var-warning.tsx
================
import Link from "next/link";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";

export function EnvVarWarning() {
  return (
    <div className="flex gap-4 items-center">
      <Badge variant={"outline"} className="font-normal">
        Supabase environment variables required
      </Badge>
      <div className="flex gap-2">
        <Button
          size="sm"
          variant={"ghost"}
          disabled
          className="opacity-75 cursor-none pointer-events-none"
        >
          <Link href="/sign-in">Sign in</Link>
        </Button>
        <Button
          size="sm"
          variant={"default"}
          disabled
          className="opacity-75 cursor-none pointer-events-none"
        >
          <Link href="/sign-up">Sign up</Link>
        </Button>
      </div>
    </div>
  );
}

================
File: components/form-message.tsx
================
export type Message =
  | { success: string }
  | { error: string }
  | { message: string };

export function FormMessage({ message }: { message: Message }) {
  return (
    <div className="flex flex-col gap-2 w-full max-w-md text-sm">
      {"success" in message && (
        <div className="text-foreground border-l-2 border-foreground px-4">
          {message.success}
        </div>
      )}
      {"error" in message && (
        <div className="text-destructive-foreground border-l-2 border-destructive-foreground px-4">
          {message.error}
        </div>
      )}
      {"message" in message && (
        <div className="text-foreground border-l-2 px-4">{message.message}</div>
      )}
    </div>
  );
}

================
File: components/header-auth.tsx
================
import { hasEnvVars } from "@/utils/supabase/check-env-vars";
import Link from "next/link";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { createClient } from "@/utils/supabase/server";
import { UserProfileDropdown } from "./ui/user-profile-dropdown";

export default async function AuthButton() {
  const supabase = await createClient();

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!hasEnvVars) {
    return (
      <>
        <div className="flex gap-4 items-center">
          <div>
            <Badge
              variant={"default"}
              className="font-normal pointer-events-none"
            >
              Please update .env.local file with anon key and url
            </Badge>
          </div>
          <div className="flex gap-2">
            <Button
              size="sm"
              variant={"ghost"}
              disabled
              className="opacity-75 cursor-none pointer-events-none"
            >
              <Link href="/sign-in">Sign in</Link>
            </Button>
            <Button
              size="sm"
              variant={"default"}
              disabled
              className="opacity-75 cursor-none pointer-events-none"
            >
              <Link href="/sign-up">Sign up</Link>
            </Button>
          </div>
        </div>
      </>
    );
  }
  return user ? (
    <UserProfileDropdown user={user} />
  ) : (
    <div className="flex gap-2">
      <Button size="sm" variant={"ghost"}>
        <Link href="/sign-in">Sign in</Link>
      </Button>
      <Button size="sm" variant={"default"}>
        <Link href="/sign-up">Sign up</Link>
      </Button>
    </div>
  );
}

================
File: components/hero.tsx
================
import NextLogo from "./next-logo";
import SupabaseLogo from "./supabase-logo";

export default function Header() {
  return (
    <div className="flex flex-col gap-16 items-center">
      <div className="flex gap-8 justify-center items-center">
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          rel="noreferrer"
        >
          <SupabaseLogo />
        </a>
        <span className="border-l rotate-45 h-6" />
        <a href="https://nextjs.org/" target="_blank" rel="noreferrer">
          <NextLogo />
        </a>
      </div>
      <h1 className="sr-only">Supabase and Next.js Starter Template</h1>
      <p className="text-3xl lg:text-4xl !leading-tight mx-auto max-w-xl text-center">
        The fastest way to build apps with{" "}
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Supabase
        </a>{" "}
        and{" "}
        <a
          href="https://nextjs.org/"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Next.js
        </a>
      </p>
      <div className="w-full p-[1px] bg-gradient-to-r from-transparent via-foreground/10 to-transparent my-8" />
    </div>
  );
}

================
File: components/next-logo.tsx
================
export default function NextLogo() {
  return (
    <svg
      aria-label="Next.js logotype"
      height="68"
      role="img"
      viewBox="0 0 394 79"
      width="100"
    >
      <path
        d="M261.919 0.0330722H330.547V12.7H303.323V79.339H289.71V12.7H261.919V0.0330722Z"
        fill="currentColor"
      />
      <path
        d="M149.052 0.0330722V12.7H94.0421V33.0772H138.281V45.7441H94.0421V66.6721H149.052V79.339H80.43V12.7H80.4243V0.0330722H149.052Z"
        fill="currentColor"
      />
      <path
        d="M183.32 0.0661486H165.506L229.312 79.3721H247.178L215.271 39.7464L247.127 0.126654L229.312 0.154184L206.352 28.6697L183.32 0.0661486Z"
        fill="currentColor"
      />
      <path
        d="M201.6 56.7148L192.679 45.6229L165.455 79.4326H183.32L201.6 56.7148Z"
        fill="currentColor"
      />
      <path
        clipRule="evenodd"
        d="M80.907 79.339L17.0151 0H0V79.3059H13.6121V16.9516L63.8067 79.339H80.907Z"
        fill="currentColor"
        fillRule="evenodd"
      />
      <path
        d="M333.607 78.8546C332.61 78.8546 331.762 78.5093 331.052 77.8186C330.342 77.1279 329.991 76.2917 330 75.3011C329.991 74.3377 330.342 73.5106 331.052 72.8199C331.762 72.1292 332.61 71.7838 333.607 71.7838C334.566 71.7838 335.405 72.1292 336.115 72.8199C336.835 73.5106 337.194 74.3377 337.204 75.3011C337.194 75.9554 337.028 76.5552 336.696 77.0914C336.355 77.6368 335.922 78.064 335.377 78.373C334.842 78.6911 334.252 78.8546 333.607 78.8546Z"
        fill="currentColor"
      />
      <path
        d="M356.84 45.4453H362.872V68.6846C362.863 70.8204 362.401 72.6472 361.498 74.1832C360.585 75.7191 359.321 76.8914 357.698 77.7185C356.084 78.5364 354.193 78.9546 352.044 78.9546C350.079 78.9546 348.318 78.6001 346.75 77.9094C345.182 77.2187 343.937 76.1826 343.024 74.8193C342.101 73.456 341.649 71.7565 341.649 69.7207H347.691C347.7 70.6114 347.903 71.3838 348.29 72.0291C348.677 72.6744 349.212 73.1651 349.895 73.5105C350.586 73.8559 351.38 74.0286 352.274 74.0286C353.243 74.0286 354.073 73.8286 354.746 73.4196C355.419 73.0197 355.936 72.4199 356.296 71.6201C356.646 70.8295 356.831 69.8479 356.84 68.6846V45.4453Z"
        fill="currentColor"
      />
      <path
        d="M387.691 54.5338C387.544 53.1251 386.898 52.0254 385.773 51.2438C384.638 50.4531 383.172 50.0623 381.373 50.0623C380.11 50.0623 379.022 50.2532 378.118 50.6258C377.214 51.0075 376.513 51.5164 376.033 52.1617C375.554 52.807 375.314 53.5432 375.295 54.3703C375.295 55.061 375.461 55.6608 375.784 56.1607C376.107 56.6696 376.54 57.0968 377.103 57.4422C377.656 57.7966 378.274 58.0874 378.948 58.3237C379.63 58.56 380.313 58.76 380.995 58.9236L384.14 59.6961C385.404 59.9869 386.631 60.3778 387.802 60.8776C388.973 61.3684 390.034 61.9955 390.965 62.7498C391.897 63.5042 392.635 64.413 393.179 65.4764C393.723 66.5397 394 67.7848 394 69.2208C394 71.1566 393.502 72.8562 392.496 74.3285C391.491 75.7917 390.043 76.9369 388.143 77.764C386.252 78.582 383.965 79 381.272 79C378.671 79 376.402 78.6002 374.493 77.8004C372.575 77.0097 371.08 75.8463 370.001 74.3194C368.922 72.7926 368.341 70.9294 368.258 68.7391H374.235C374.318 69.8842 374.687 70.8386 375.314 71.6111C375.95 72.3745 376.78 72.938 377.795 73.3197C378.819 73.6923 379.962 73.8832 381.226 73.8832C382.545 73.8832 383.707 73.6832 384.712 73.2924C385.708 72.9016 386.492 72.3564 387.055 71.6475C387.627 70.9476 387.913 70.1206 387.922 69.1754C387.913 68.312 387.654 67.5939 387.156 67.0304C386.649 66.467 385.948 65.9944 385.053 65.6127C384.15 65.231 383.098 64.8856 381.899 64.5857L378.081 63.6223C375.323 62.9225 373.137 61.8592 371.541 60.4323C369.937 59.0054 369.143 57.115 369.143 54.7429C369.143 52.798 369.678 51.0894 370.758 49.6261C371.827 48.1629 373.294 47.0268 375.148 46.2179C377.011 45.4 379.114 45 381.456 45C383.836 45 385.92 45.4 387.719 46.2179C389.517 47.0268 390.929 48.1538 391.952 49.5897C392.976 51.0257 393.511 52.6707 393.539 54.5338H387.691Z"
        fill="currentColor"
      />
    </svg>
  );
}

================
File: components/providers.tsx
================
'use client'

import { QuickActionsCommandProvider } from '@/components/ui/quick-actions-command-provider'

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <QuickActionsCommandProvider>
      {children}
    </QuickActionsCommandProvider>
  )
}

================
File: components/submit-button.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import { type ComponentProps } from "react";
import { useFormStatus } from "react-dom";

type Props = ComponentProps<typeof Button> & {
  pendingText?: string;
};

export function SubmitButton({
  children,
  pendingText = "Submitting...",
  ...props
}: Props) {
  const { pending } = useFormStatus();

  return (
    <Button type="submit" aria-disabled={pending} {...props}>
      {pending ? pendingText : children}
    </Button>
  );
}

================
File: components/supabase-logo.tsx
================
export default function SupabaseLogo() {
  return (
    <svg
      aria-label="Supabase logo"
      width="140"
      height="30"
      viewBox="0 0 115 23"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_4671_51136)">
        <g clipPath="url(#clip1_4671_51136)">
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint0_linear_4671_51136)"
          />
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint1_linear_4671_51136)"
            fillOpacity="0.2"
          />
          <path
            d="M9.79895 0.89838C10.3593 0.200591 11.4954 0.582929 11.5089 1.47383L11.5955 14.5041H2.84528C1.24026 14.5041 0.345103 12.6711 1.34316 11.4283L9.79895 0.89838Z"
            fill="#3ECF8E"
          />
        </g>
        <path
          d="M30.5894 13.3913C30.7068 14.4766 31.7052 16.3371 34.6026 16.3371C37.1279 16.3371 38.3418 14.7479 38.3418 13.1976C38.3418 11.8022 37.3824 10.6588 35.4836 10.2712L34.1131 9.98049C33.5846 9.88359 33.2323 9.5929 33.2323 9.12777C33.2323 8.58512 33.7804 8.17818 34.4656 8.17818C35.5618 8.17818 35.9729 8.89521 36.0513 9.45725L38.2243 8.97275C38.1069 7.94561 37.1867 6.22083 34.446 6.22083C32.3709 6.22083 30.844 7.63555 30.844 9.34094C30.844 10.6781 31.6856 11.7828 33.5454 12.1898L34.8179 12.4805C35.5618 12.6355 35.8555 12.9844 35.8555 13.4107C35.8555 13.9146 35.4444 14.3603 34.583 14.3603C33.4476 14.3603 32.8797 13.6626 32.8212 12.9068L30.5894 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M46.6623 16.0464H49.1486C49.1094 15.717 49.0506 15.0581 49.0506 14.3216V6.51154H46.4468V12.0542C46.4468 13.1588 45.7813 13.934 44.6263 13.934C43.4126 13.934 42.8643 13.0813 42.8643 12.0154V6.51154H40.2606V12.5387C40.2606 14.6123 41.5918 16.2984 43.9215 16.2984C44.9393 16.2984 46.0556 15.9108 46.5841 15.0193C46.5841 15.4069 46.6231 15.8526 46.6623 16.0464Z"
          fill="currentColor"
        />
        <path
          d="M54.433 19.7286V15.1162C54.9027 15.7558 55.8817 16.279 57.213 16.279C59.9341 16.279 61.7545 14.1472 61.7545 11.2596C61.7545 8.43021 60.1298 6.29842 57.3108 6.29842C55.8623 6.29842 54.7855 6.93792 54.3548 7.67439V6.51159H51.8295V19.7286H54.433ZM59.19 11.279C59.19 12.9845 58.133 13.9728 56.8017 13.9728C55.4708 13.9728 54.394 12.9651 54.394 11.279C54.394 9.59299 55.4708 8.6046 56.8017 8.6046C58.133 8.6046 59.19 9.59299 59.19 11.279Z"
          fill="currentColor"
        />
        <path
          d="M63.229 13.4495C63.229 14.9417 64.4818 16.3177 66.5375 16.3177C67.9662 16.3177 68.8865 15.6588 69.3758 14.9029C69.3758 15.2712 69.4149 15.7944 69.4737 16.0464H71.862C71.8033 15.7169 71.7449 15.0386 71.7449 14.5348V9.84482C71.7449 7.92622 70.6093 6.22083 67.5555 6.22083C64.9713 6.22083 63.5811 7.86807 63.4248 9.36033L65.7347 9.84482C65.8131 9.0115 66.4395 8.29445 67.5747 8.29445C68.6713 8.29445 69.1998 8.85646 69.1998 9.53475C69.1998 9.86421 69.0238 10.1355 68.4755 10.2131L66.1068 10.5619C64.5015 10.7945 63.229 11.744 63.229 13.4495ZM67.0854 14.3991C66.2438 14.3991 65.8325 13.8565 65.8325 13.2945C65.8325 12.558 66.361 12.1898 67.0268 12.0929L69.1998 11.7634V12.1898C69.1998 13.8759 68.1818 14.3991 67.0854 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M76.895 16.0465V14.8837C77.4038 15.6976 78.4217 16.279 79.7531 16.279C82.4941 16.279 84.2951 14.1278 84.2951 11.2403C84.2951 8.4108 82.6701 6.25965 79.851 6.25965C78.4217 6.25965 77.3648 6.8798 76.934 7.55806V2.01546H74.3696V16.0465H76.895ZM81.6911 11.2596C81.6911 13.0038 80.6341 13.9728 79.3028 13.9728C77.9912 13.9728 76.895 12.9845 76.895 11.2596C76.895 9.51543 77.9912 8.56584 79.3028 8.56584C80.6341 8.56584 81.6911 9.51543 81.6911 11.2596Z"
          fill="currentColor"
        />
        <path
          d="M85.7692 13.4495C85.7692 14.9417 87.022 16.3177 89.0776 16.3177C90.5065 16.3177 91.4269 15.6588 91.916 14.9029C91.916 15.2712 91.9554 15.7944 92.014 16.0464H94.4023C94.3439 15.7169 94.2851 15.0386 94.2851 14.5348V9.84482C94.2851 7.92622 93.1495 6.22083 90.0955 6.22083C87.5115 6.22083 86.1216 7.86807 85.965 9.36033L88.2747 9.84482C88.3533 9.0115 88.9798 8.29445 90.1149 8.29445C91.2115 8.29445 91.74 8.85646 91.74 9.53475C91.74 9.86421 91.5638 10.1355 91.0156 10.2131L88.647 10.5619C87.0418 10.7945 85.7692 11.744 85.7692 13.4495ZM89.6258 14.3991C88.784 14.3991 88.3727 13.8565 88.3727 13.2945C88.3727 12.558 88.9012 12.1898 89.5671 12.0929L91.74 11.7634V12.1898C91.74 13.8759 90.722 14.3991 89.6258 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M96.087 13.3913C96.2042 14.4766 97.2028 16.3371 100.1 16.3371C102.626 16.3371 103.839 14.7479 103.839 13.1976C103.839 11.8022 102.88 10.6588 100.981 10.2712L99.6105 9.98049C99.082 9.88359 98.7299 9.5929 98.7299 9.12777C98.7299 8.58512 99.2778 8.17818 99.963 8.17818C101.06 8.17818 101.471 8.89521 101.549 9.45725L103.722 8.97275C103.604 7.94561 102.684 6.22083 99.9436 6.22083C97.8683 6.22083 96.3416 7.63555 96.3416 9.34094C96.3416 10.6781 97.183 11.7828 99.043 12.1898L100.316 12.4805C101.06 12.6355 101.353 12.9844 101.353 13.4107C101.353 13.9146 100.942 14.3603 100.081 14.3603C98.9451 14.3603 98.3776 13.6626 98.3188 12.9068L96.087 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M107.794 10.1937C107.852 9.32158 108.596 8.31381 109.947 8.31381C111.435 8.31381 112.062 9.24406 112.101 10.1937H107.794ZM112.355 12.6743C112.042 13.527 111.376 14.1278 110.163 14.1278C108.87 14.1278 107.794 13.2169 107.735 11.9573H114.626C114.626 11.9184 114.665 11.5309 114.665 11.1626C114.665 8.10064 112.884 6.22083 109.908 6.22083C107.441 6.22083 105.17 8.19753 105.17 11.2402C105.17 14.4572 107.5 16.3371 110.143 16.3371C112.512 16.3371 114.039 14.9611 114.528 13.3138L112.355 12.6743Z"
          fill="currentColor"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_4671_51136"
          x1="11.4954"
          y1="11.1486"
          x2="19.3439"
          y2="14.4777"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#249361" />
          <stop offset="1" stopColor="#3ECF8E" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_4671_51136"
          x1="8.00382"
          y1="6.42177"
          x2="11.5325"
          y2="13.1398"
          gradientUnits="userSpaceOnUse"
        >
          <stop />
          <stop offset="1" stopOpacity="0" />
        </linearGradient>
        <clipPath id="clip0_4671_51136">
          <rect
            width="113.85"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.922119 0.456161)"
          />
        </clipPath>
        <clipPath id="clip1_4671_51136">
          <rect
            width="21.3592"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.919006 0.497101)"
          />
        </clipPath>
      </defs>
    </svg>
  );
}

================
File: components/tabs.tsx
================
import { Space } from "@/types";
import { ModelTab } from "./ui/model-tab";
import { SpaceTab } from "./ui/space-tab";
import QuickActionsTab from "./ui/quick-actions-tab";

export const Tabs = () => {
    return (
            <div className="flex items-center gap-2">
                <SpaceTab />
                <QuickActionsTab />
                <ModelTab />  
            </div>
    );
};

================
File: components/theme-switcher.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Laptop, Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

const ThemeSwitcher = () => {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  // useEffect only runs on the client, so now we can safely show the UI
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  const ICON_SIZE = 16;

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size={"sm"}>
          {theme === "light" ? (
            <Sun
              key="light"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : theme === "dark" ? (
            <Moon
              key="dark"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : (
            <Laptop
              key="system"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-content" align="start">
        <DropdownMenuRadioGroup
          value={theme}
          onValueChange={(e) => setTheme(e)}
        >
          <DropdownMenuRadioItem className="flex gap-2" value="light">
            <Sun size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Light</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="dark">
            <Moon size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Dark</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="system">
            <Laptop size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>System</span>
          </DropdownMenuRadioItem>
        </DropdownMenuRadioGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export { ThemeSwitcher };

================
File: config/models.ts
================
export const PROVIDER_DESCRIPTIONS: Record<Provider, string> = {
  groq: 'Ultra-fast inference optimized for real-time applications',
  anthropic: 'Advanced language models with strong reasoning capabilities',
  openai: 'State-of-the-art models with broad capabilities',
  cohere: 'Specialized models for enterprise and business use cases',
  mistral: 'Open-source foundation models with various specializations',
  google: 'Cutting-edge multimodal models from Google DeepMind',
  xai: 'Advanced models focused on reasoning and transparency',
  togetherai: 'Curated collection of top open-source models',
  perplexity: 'Research-focused models optimized for reasoning tasks'
};

export const AVAILABLE_MODELS = {
  groq: [
    { id: 'deepseek-r1-distill-llama-70b', name: 'Deepseek R1 70B', description: 'Powerful general-purpose model with fast inference', contextWindow: 32768 },
    { id: 'mixtral-8x7b-instruct', name: 'Mixtral 8x7B', description: 'Efficient model balancing speed and capability', contextWindow: 32768 },
    { id: 'deepseek-r1-distill-llama-70b-specdec', name: 'Deepseek R1 70B SpecDec', description: 'Specialized for technical documentation', contextWindow: 32768 },
    { id: 'gemma2-9b-it', name: 'Gemma 2 9B', description: 'Compact model optimized for quick responses', contextWindow: 8192 },
    { id: 'llama-3.3-70b-versatile', name: 'LLaMA 3.3 70B Versatile', description: 'Latest LLaMA optimized for versatility', contextWindow: 128000 },
  ],
  anthropic: [
    { id: 'claude-3-opus-latest', name: 'Claude 3 Opus', description: 'Most capable model for complex tasks', contextWindow: 128000 },
    { id: 'claude-3-5-sonnet-latest', name: 'Claude 3.5 Sonnet', description: 'Balanced performance and speed', contextWindow: 128000 },
    { id: 'claude-3-5-haiku-latest', name: 'Claude 3.5 Haiku', description: 'Fast, efficient for simple tasks', contextWindow: 128000 },
  ],
  openai: [
    { id: 'gpt-4o', name: 'GPT-4o', description: 'Most powerful model for complex reasoning', contextWindow: 128000, multimodal: true },
    { id: 'gpt-4o-mini', name: 'GPT-4o Mini', description: 'Efficient version of GPT-4', contextWindow: 128000, multimodal: true },
    { id: 'o1', name: 'O1', description: 'Fast, general-purpose assistant', contextWindow: 128000 },
    { id: 'o3-mini', name: 'O3 Mini', description: 'Quick responses for simple tasks', contextWindow: 128000 },
  ],
  cohere: [
    { id: 'command', name: 'Command', description: 'Enterprise-grade general model', contextWindow: 128000 },
    { id: 'command-light', name: 'Command Light', description: 'Faster, lighter version of Command', contextWindow: 32768 },
    { id: 'command-nightly', name: 'Command Nightly', description: 'Latest experimental features', contextWindow: 128000 },
    { id: 'command-light-nightly', name: 'Command Light Nightly', description: 'Fast experimental version', contextWindow: 32768 }
  ],
  mistral: [
    { id: 'mistral-large-latest', name: 'Mistral Large', description: 'Most capable open model', contextWindow: 32000 },
    { id: 'codestral-latest', name: 'Codestral', description: 'Specialized for code generation', contextWindow: 32000 },
    { id: 'pixtral-large-latest', name: 'Pixtral Large', description: 'Vision and image understanding', contextWindow: 128000, multimodal: true },
    { id: 'ministral-3b-latest', name: 'Ministral 3B', description: 'Ultra-compact, fast responses', contextWindow: 4096 },
    { id: 'ministral-8b-latest', name: 'Ministral 8B', description: 'Balanced size and capability', contextWindow: 8192 },
    { id: 'mistral-small-latest', name: 'Mistral Small', description: 'Efficient for simple tasks', contextWindow: 4096 },
  ],
  google: [
    { id: 'gemini-2.0-flash-001', name: 'Gemini 2.0 Flash', description: 'Ultra-fast responses, latest version', contextWindow: 1000000, multimodal: true },
    { id: 'gemini-1.5-pro', name: 'Gemini 1.5 Pro', description: 'Balanced performance model', contextWindow: 1000000, multimodal: true },
  ],
  xai: [
    { id: 'grok-2-1212', name: 'Grok 2', description: 'Advanced reasoning capabilities', contextWindow: 128000 },
    { id: 'grok-2-vision-1212', name: 'Grok 2 Vision', description: 'Multimodal understanding', contextWindow: 128000, multimodal: true },
  ],
  togetherai: [
    { id: 'deepseek-ai/DeepSeek-R1', name: 'DeepSeek R1', description: 'General purpose reasoning', contextWindow: 128000 },
    { id: 'deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free', name: 'DeepSeek R1 Distill Llama 70B', description: 'Efficient large model', contextWindow: 32768 },
    { id: 'deepseek-ai/DeepSeek-V3', name: 'DeepSeek V3', description: 'Latest architecture improvements', contextWindow: 128000 },
    { id: 'meta-llama/Llama-3.3-70B-Instruct-Turbo-Free', name: 'Llama 3.3 70B Instruct Turbo', description: 'Fast instruction following', contextWindow: 128000 },
    { id: 'meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo', name: 'Llama 3.1 405B Instruct Turbo', description: 'Massive model, best quality', contextWindow: 128000 },
  ],
  perplexity: [
    { id: 'sonar-reasoning-pro', name: 'Sonar Reasoning Pro', description: 'Advanced reasoning capabilities', contextWindow: 200000 },
    { id: 'sonar-reasoning', name: 'Sonar Reasoning', description: 'Efficient reasoning model', contextWindow: 200000 },
    { id: 'sonar-pro', name: 'Sonar Pro', description: 'Professional general use', contextWindow: 200000 },
    { id: 'sonar', name: 'Sonar', description: 'Fast, reliable model', contextWindow: 200000 }
  ]
} as const;

export type Provider = keyof typeof AVAILABLE_MODELS;
export type ModelsByProvider = {
  [P in Provider]: typeof AVAILABLE_MODELS[P][number]['id'];
};

export const PROVIDER_NAMES: Record<Provider, string> = {
  groq: 'Groq',
  anthropic: 'Anthropic',
  openai: 'OpenAI',
  cohere: 'Cohere',
  mistral: 'Mistral',
  google: 'Google',
  xai: 'xAI',
  togetherai: 'Together AI',
  perplexity: 'Perplexity'
};

export function isValidModelForProvider(provider: Provider, model: string): boolean {
  return AVAILABLE_MODELS[provider].some(m => m.id === model);
}

export function getModelName(provider: Provider | undefined, modelId: string): string {
  if (!provider || !modelId) return 'Select Model';
  
  const models = AVAILABLE_MODELS[provider];
  if (!models) return modelId;

  const model = models.find(m => m.id === modelId);
  return model?.name || modelId;
}

================
File: electron/main.ts
================
import { app, BrowserWindow } from "electron";
import { join } from "path";

const createWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    webPreferences: {
      preload: join(__dirname, "preload.js"),
      nodeIntegration: true,
    },
  });
  
  mainWindow.loadURL("http://localhost:3000");
};

app.whenReady().then(createWindow);

================
File: hooks/use-stick-to-bottom.ts
================
import { useCallback, useEffect, useRef, useState } from 'react';

export function useStickToBottom(threshold = 150) {
  const [isStickToBottom, setIsStickToBottom] = useState(true);
  const containerRef = useRef<HTMLDivElement>(null);
  const prevScrollHeightRef = useRef<number>(0);

  const checkIsStickToBottom = useCallback(() => {
    const container = containerRef.current;
    if (!container) return;

    const { scrollHeight, scrollTop, clientHeight } = container;
    const distanceFromBottom = scrollHeight - scrollTop - clientHeight;
    
    setIsStickToBottom(distanceFromBottom <= threshold);
  }, [threshold]);

  const scrollToBottom = useCallback(() => {
    const container = containerRef.current;
    if (!container) return;

    container.scrollTop = container.scrollHeight;
  }, []);

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    const handleScroll = () => {
      checkIsStickToBottom();
    };

    container.addEventListener('scroll', handleScroll);
    return () => container.removeEventListener('scroll', handleScroll);
  }, [checkIsStickToBottom]);

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    const handleResize = () => {
      if (isStickToBottom) {
        scrollToBottom();
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isStickToBottom, scrollToBottom]);

  // Auto-scroll when content changes if we're sticking to bottom
  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    const { scrollHeight } = container;
    
    if (scrollHeight !== prevScrollHeightRef.current) {
      if (isStickToBottom) {
        scrollToBottom();
      }
      prevScrollHeightRef.current = scrollHeight;
    }
  });

  return {
    containerRef,
    isStickToBottom,
    scrollToBottom
  };
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/hooks/use-command-window.ts
================
import { useCallback, useState } from 'react'

export function useCommandWindow() {
  const [showSpaces, setShowSpaces] = useState(false)
  const [showModels, setShowModels] = useState(false)
  const [showConversations, setShowConversations] = useState(false)
  const [isOpen, setIsOpen] = useState(false)

  const openCommandWindow = useCallback((options: { 
    withSpaces?: boolean
    withModels?: boolean 
    withConversations?: boolean
  } = {}) => {
    setIsOpen(true)
    setShowSpaces(!!options.withSpaces)
    setShowModels(!!options.withModels)
    setShowConversations(!!options.withConversations)
  }, [])

  const closeCommandWindow = useCallback(() => {
    setIsOpen(false)
    setShowSpaces(false)
    setShowModels(false)
    setShowConversations(false)
  }, [])

  const toggleCommandWindow = useCallback((options: {
    withSpaces?: boolean
    withModels?: boolean
    withConversations?: boolean
  } = {}) => {
    setIsOpen((prevIsOpen) => {
      const nextIsOpen = !prevIsOpen
      setShowSpaces(nextIsOpen && !!options.withSpaces)
      setShowModels(nextIsOpen && !!options.withModels)
      setShowConversations(nextIsOpen && !!options.withConversations)
      return nextIsOpen
    })
  }, [])

  return {
    isOpen,
    showSpaces,
    showModels,
    showConversations,
    setShowSpaces,
    setShowModels,
    setShowConversations,
    openCommandWindow,
    closeCommandWindow,
    toggleCommandWindow
  }
}

================
File: lib/stores/conversation-store.ts
================
import { create } from 'zustand'
import { Conversation } from '@/types'

interface ConversationStore {
  conversations: Conversation[] | null
  activeConversation: Conversation | null
  setConversations: (conversations: Conversation[] | null) => void
  setActiveConversation: (conversation: Conversation | null) => void
}

export const useConversationStore = create<ConversationStore>((set) => ({
  conversations: null,
  activeConversation: null,
  setConversations: (conversations) => set({ conversations }),
  setActiveConversation: (conversation) => set({ activeConversation: conversation })
}))

================
File: lib/stores/notification-store.ts
================
import { create } from 'zustand';
import { Notification } from '@/app/actions/notifications';

interface NotificationStore {
  notifications: Notification[];
  unreadCount: number;
  setNotifications: (notifications: Notification[]) => void;
  addNotification: (notification: Notification) => void;
  markAsRead: (notificationId: string) => void;
  markAllAsRead: () => void;
}

export const useNotificationStore = create<NotificationStore>((set) => ({
  notifications: [],
  unreadCount: 0,
  setNotifications: (notifications) =>
    set({
      notifications,
      unreadCount: notifications.filter((n) => !n.is_read).length,
    }),
  addNotification: (notification) =>
    set((state) => ({
      notifications: [notification, ...state.notifications],
      unreadCount: state.unreadCount + (notification.is_read ? 0 : 1),
    })),
  markAsRead: (notificationId) =>
    set((state) => ({
      notifications: state.notifications.map((n) =>
        n.id === notificationId ? { ...n, is_read: true } : n
      ),
      unreadCount: state.unreadCount - 1,
    })),
  markAllAsRead: () =>
    set((state) => ({
      notifications: state.notifications.map((n) => ({ ...n, is_read: true })),
      unreadCount: 0,
    })),
}));

================
File: lib/stores/space-store.ts
================
import { create } from 'zustand'
import { Space } from '@/types'
import { setActiveSpace as setActiveSpaceAction } from '@/app/actions'

interface SpaceStore {
  activeSpace: Space | null
  setActiveSpace: (spaceOrId: Space | string | null) => Promise<void>
  spaces: Space[] | null
  setSpaces: (spaces: Space[] | null) => void
}

export const useSpaceStore = create<SpaceStore>((set, get) => ({
  activeSpace: null,
  setActiveSpace: async (spaceOrId) => {
    if (typeof spaceOrId === 'string') {
      const space = get().spaces?.find(space => space.id === spaceOrId)
      if (space) {
        set({ activeSpace: space })
      }
      await setActiveSpaceAction(spaceOrId)
    } else {
      set({ activeSpace: spaceOrId })
    }
  },
  spaces: null,
  setSpaces: (spaces) => set({ spaces }),
}))

================
File: lib/constants.ts
================
import { Provider } from "@/config/models";

export interface AIModel {
  id: string;
  name: string;
  contextLength: number;
  provider: Provider;
}

export interface AIProvider {
  id: Provider;
  name: string;
  models: AIModel[];
}

export const API_ROUTES = {
  CHAT: '/api/chat',
  CONVERSATIONS: (spaceId: string) => `/api/conversations/${spaceId}`,
  MESSAGES: (conversationId: string) => `/api/messages/${conversationId}`,
  SPACES: '/api/spaces',
  SPACE: (id: string) => `/api/spaces/${id}`,
};


// Database Tables
export const DB_TABLES = {
  NOTIFICATIONS: 'notifications',
  SPACES: 'spaces',
  CONVERSATIONS: 'conversations',
  MESSAGES: 'messages',
  ACTIVE_SPACES: 'active_spaces',
  ACTIVE_CONVERSATIONS: 'active_conversations'
} as const

// Common Table Columns
export const COLUMNS = {
  // Common columns
  ID: 'id',
  USER_ID: 'user_id',
  CREATED_AT: 'created_at',
  UPDATED_AT: 'updated_at',
  IS_DELETED: 'is_deleted',

  // Space columns
  NAME: 'name',
  DESCRIPTION: 'description',
  MODEL: 'model',
  PROVIDER: 'provider',
  IS_ACTIVE: 'isActive',

  // Conversation columns
  SPACE_ID: 'space_id',
  TITLE: 'title',

  // Message columns
  CONVERSATION_ID: 'conversation_id',
  ROLE: 'role',
  CONTENT: 'content',
  MODEL_USED: 'model_used',
  PARENT_MESSAGE_ID: 'parent_message_id',
  ANNOTATIONS: 'annotations',
  COLOR: 'color',
} as const

// Message Roles
export const MESSAGE_ROLES = {
  USER: 'user',
  ASSISTANT: 'assistant'
} as const

// Common Error Messages
export const ERROR_MESSAGES = {
  UNAUTHORIZED: { error: 'Unauthorized', status: 401 },
  MISSING_FIELDS: { error: 'Missing required fields', status: 400 },
  INVALID_PROVIDER: { error: 'Invalid provider', status: 400 },
  INVALID_MODEL: { error: 'Invalid model for the selected provider', status: 400 },
  MISSING_SPACE_ID: { error: 'Space ID is required', status: 400 },
  MISSING_CONVERSATION_ID: { error: 'Conversation ID is required', status: 400 },
  INVALID_ROLE: { error: 'Invalid role: must be either "user" or "assistant"', status: 400 },
  MISSING_ASSISTANT_FIELDS: { error: 'Assistant messages require model_used and provider fields', status: 400 },
  SPACE_NOT_FOUND: { error: 'Space not found or access denied', status: 404 },
  CONVERSATION_NOT_FOUND: { error: 'Conversation not found', status: 404 },
  SERVER_ERROR: (message: string) => ({ error: message, status: 500 })
} as const

export const DEFAULTS = {
  CONVERSATION_TITLE: 'New Conversation',
  SPACE_NAME: 'My Space',
  SPACE_DESCRIPTION: 'My first space',
  WELCOME_MESSAGE: 'Welcome to Vinci! I\'m here to help you explore and create. What would you like to do?'
} as const

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/icons/providers/default.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

================
File: public/icons/providers/groq.svg
================
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="152px" height="55.5px" viewBox="0 32.25 152 55.5" enable-background="new 0 32.25 152 55.5" xml:space="preserve">
 <title>
  groq_logo
 </title>
 <g id="Layer_2">
  <g id="Layer_1-2">
   <path d="M84.848,34.137c-9.798,0-17.769,7.971-17.769,17.77s7.971,17.769,17.769,17.769s17.77-7.971,17.77-17.769
			S94.645,34.137,84.848,34.137z M84.848,63.013c-6.124,0-11.106-4.983-11.106-11.106s4.982-11.106,11.106-11.106
			c6.124,0,11.106,4.982,11.106,11.106S90.973,63.013,84.848,63.013z">
   </path>
   <path d="M60.315,34.206c-0.607-0.068-1.217-0.104-1.827-0.108c-0.304,0-0.595,0.009-0.893,0.014s-0.594,0.033-0.891,0.051
			c-1.197,0.094-2.382,0.299-3.541,0.611c-2.329,0.629-4.574,1.723-6.515,3.277c-1.97,1.57-3.548,3.575-4.611,5.859
			c-0.53,1.138-0.921,2.336-1.165,3.567c-0.121,0.608-0.21,1.222-0.266,1.84c-0.02,0.307-0.055,0.615-0.059,0.921l-0.011,0.459
			l-0.005,0.23v0.19l0.015,5.951l0.015,5.951l0.041,5.95h6.664l0.042-5.95l0.015-5.952l0.015-5.951v-0.182l0.005-0.142l0.008-0.285
			c0-0.191,0.028-0.375,0.039-0.564c0.036-0.37,0.091-0.738,0.165-1.102c0.146-0.716,0.374-1.413,0.678-2.077
			c0.613-1.332,1.528-2.502,2.673-3.419c1.156-0.932,2.541-1.628,4.038-2.042c0.757-0.207,1.532-0.344,2.314-0.408
			c0.198-0.011,0.395-0.03,0.594-0.037c0.199-0.007,0.402-0.013,0.595-0.012c0.383,0,0.76,0.025,1.142,0.06
			c1.518,0.153,2.989,0.619,4.318,1.368l3.326-5.776C65.108,35.263,62.753,34.484,60.315,34.206z">
   </path>
   <path d="M17.77,34.048C7.971,34.048,0,42.019,0,51.817s7.971,17.77,17.77,17.77h5.844v-6.664H17.77
			c-6.124,0-11.106-4.982-11.106-11.106s4.982-11.106,11.106-11.106s11.132,4.982,11.132,11.106l0,0v16.365l0,0
			c0,6.084-4.954,11.039-11.023,11.103c-2.904-0.024-5.681-1.191-7.729-3.25l-4.712,4.712c3.266,3.283,7.691,5.151,12.321,5.201
			v0.003c0.04,0,0.08,0,0.119,0h0.125v-0.003c9.659-0.131,17.48-8.005,17.525-17.686l0.006-16.881
			C35.302,41.785,27.422,34.048,17.77,34.048z">
   </path>
   <path d="M124.083,34.137c-9.798,0-17.769,7.971-17.769,17.77s7.971,17.769,17.769,17.769h6.08v-6.663h-6.08
			c-6.124,0-11.106-4.983-11.106-11.106s4.982-11.106,11.106-11.106c5.799,0,10.572,4.468,11.062,10.143h-0.01v34.12h6.664V51.907
			l0,0C141.797,42.108,133.881,34.137,124.083,34.137z">
   </path>
   <polygon points="151.983,35.04 151.033,35.04 149.737,37.053 148.399,35.04 147.44,35.04 147.44,38.624 148.511,38.624 
			148.511,36.88 149.461,38.288 149.979,38.288 150.912,36.836 150.929,38.624 152,38.624 		">
   </polygon>
   <polygon points="143.519,35.896 144.685,35.896 144.685,38.624 145.86,38.624 145.86,35.896 147.034,35.896 147.034,35.04 
			143.519,35.04 		">
   </polygon>
  </g>
 </g>
</svg>

================
File: store/chatStore.ts
================
import { create } from 'zustand';

interface ChatMessage {
  id: string;
  content: string;
  timestamp: Date;
  importance: number;
  parentId?: string;
}

interface ChatState {
  messages: ChatMessage[];
  addMessage: (message: Omit<ChatMessage, 'id' | 'timestamp'>) => void;
  archiveMessage: (id: string) => void;
}

export const useChatStore = create<ChatState>((set) => ({
  messages: [],
  addMessage: (message) =>
    set((state) => ({
      messages: [
        ...state.messages,
        {
          ...message,
          id: Math.random().toString(36).substring(7),
          timestamp: new Date(),
        },
      ],
    })),
  archiveMessage: (id) =>
    set((state) => ({
      messages: state.messages.filter((msg) => msg.id !== id),
    })),
}));

================
File: store/spaceStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface Space {
  id: string;
  name: string;
  user_id: string;
  description?: string;
  icon?: string;
  color?: string;
  model: string;
  provider: string;
  created_at: string;
  updated_at: string;
}

interface SpaceStore {
  spaces: Space[];
  activeSpaceId: string | null;
  addSpace: (space: Omit<Space, 'id' | 'created_at' | 'updated_at'>) => void;
  removeSpace: (id: string) => void;
  updateSpace: (id: string, updates: Partial<Space>) => void;
  setActiveSpace: (id: string) => void;
}

export const useSpaceStore = create<SpaceStore>()(
  persist(
    (set) => ({
      spaces: [],
      activeSpaceId: null,
      addSpace: (spaceData) => set((state) => {
        const newSpace: Space = {
          id: crypto.randomUUID(),
          ...spaceData,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };
        return {
          spaces: [...state.spaces, newSpace],
          activeSpaceId: state.activeSpaceId || newSpace.id,
        };
      }),
      removeSpace: (id) => set((state) => ({
        spaces: state.spaces.filter((space) => space.id !== id),
        activeSpaceId: state.activeSpaceId === id
          ? state.spaces[0]?.id || null
          : state.activeSpaceId,
      })),
      updateSpace: (id, updates) => set((state) => ({
        spaces: state.spaces.map((space) =>
          space.id === id
            ? { ...space, ...updates, updated_at: new Date().toISOString() }
            : space
        ),
      })),
      setActiveSpace: (id) => set({ activeSpaceId: id }),
    }),
    {
      name: 'vinci-spaces',
    }
  )
);

================
File: styles/prism.css
================
/**
 * Dracula Theme originally by Zeno Rocha [@zenorocha]
 * https://draculatheme.com/
 *
 * Ported for PrismJS by Albert Vallverdu [@byverdu]
 */

code[class*="language-"],
pre[class*="language-"] {
  color: #f8f8f2;
  background: none;
  text-shadow: 0 1px rgba(0, 0, 0, 0.3);
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto;
  border-radius: 0.3em;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #282a36;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #6272a4;
}

.token.punctuation {
  color: #f8f8f2;
}

.namespace {
  opacity: 0.7;
}

.token.property,
.token.tag,
.token.constant,
.token.symbol,
.token.deleted {
  color: #ff79c6;
}

.token.boolean,
.token.number {
  color: #bd93f9;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #50fa7b;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string,
.token.variable {
  color: #f8f8f2;
}

.token.atrule,
.token.attr-value,
.token.function,
.token.class-name {
  color: #f1fa8c;
}

.token.keyword {
  color: #8be9fd;
}

.token.regex,
.token.important {
  color: #ffb86c;
}

.token.important,
.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

================
File: supabase/migrations/20250204124800_create_complete_schema.sql
================
-- Create complete schema for Vinci app
-- Timestamp: 2025-02-04T12:48:00-07:00

-- USERS TABLE: Supabase Auth will manage user accounts.
-- No changes needed; we'll use `auth.users`.

-- SPACES TABLE: Metadata for spaces.
CREATE TABLE spaces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users (id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    -- Removed color column
    is_archived BOOLEAN DEFAULT FALSE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on spaces
ALTER TABLE spaces ENABLE ROW LEVEL SECURITY;

-- RLS policies for spaces
CREATE POLICY "Users can view their own spaces"
    ON spaces FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can create their own spaces"
    ON spaces FOR INSERT
    WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own spaces"
    ON spaces FOR UPDATE
    USING (user_id = auth.uid())
    WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete their own spaces"
    ON spaces FOR DELETE
    USING (user_id = auth.uid());

-- CONVERSATIONS TABLE: Each conversation is part of a space.
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    space_id UUID NOT NULL REFERENCES spaces(id) ON DELETE CASCADE,
    title TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on conversations
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

-- RLS policies for conversations
CREATE POLICY "Users can view conversations in their spaces"
    ON conversations FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM spaces
            WHERE spaces.id = conversations.space_id
            AND spaces.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can create conversations in their spaces"
    ON conversations FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM spaces
            WHERE spaces.id = space_id
            AND spaces.user_id = auth.uid()
        )
    );

CREATE TABLE messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('user', 'assistant')),
    content TEXT NOT NULL,
    annotations JSONB DEFAULT '[]'::jsonb,
    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT valid_annotations CHECK (
        jsonb_typeof(annotations) = 'array'
    )
);

-- Enable RLS on messages
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- RLS policies for messages
CREATE POLICY "Users can view messages in their spaces"
    ON messages FOR SELECT
    USING (
        EXISTS (
            SELECT 1
            FROM spaces s
            JOIN conversations c ON c.space_id = s.id
            WHERE c.id = messages.conversation_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can insert messages in their spaces"
    ON messages FOR INSERT
    WITH CHECK (
        messages.user_id = auth.uid() AND
        EXISTS (
            SELECT 1
            FROM spaces s
            JOIN conversations c ON c.space_id = s.id
            WHERE c.id = messages.conversation_id
            AND s.user_id = auth.uid()
        )
    );

-- SPACE_USER_RELATIONS (Optional for shared spaces).
CREATE TABLE space_user_relations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    space_id UUID NOT NULL REFERENCES spaces (id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users (id) ON DELETE CASCADE,
    role TEXT CHECK (role IN ('owner', 'editor', 'viewer')) DEFAULT 'viewer',
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on space_user_relations
ALTER TABLE space_user_relations ENABLE ROW LEVEL SECURITY;

-- Add indexes for better query performance
CREATE INDEX idx_spaces_user_id ON spaces(user_id);
CREATE INDEX idx_conversations_space_id ON conversations(space_id);
CREATE INDEX idx_messages_conversation_id ON messages(conversation_id);
CREATE INDEX idx_space_user_relations_space_id ON space_user_relations(space_id);
CREATE INDEX idx_space_user_relations_user_id ON space_user_relations(user_id);

-- Create a function to get the latest messages in a conversation
CREATE OR REPLACE FUNCTION get_conversation_messages(conversation_uuid UUID)
RETURNS TABLE (
    id UUID,
    user_id UUID,
    role TEXT,
    content TEXT,
    annotations JSONB,
    created_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        m.id,
        m.user_id,
        m.role,
        m.content,
        m.annotations,
        m.created_at,
        m.updated_at
    FROM messages m
    WHERE m.conversation_id = conversation_uuid
    AND m.is_deleted = FALSE
    ORDER BY m.created_at ASC;
END;
$$;

================
File: supabase/migrations/20250204124900_alter_space_table.sql
================
ALTER TABLE "spaces" ADD COLUMN model TEXT NOT NULL DEFAULT 'deepseek-r1-distill-llama-70b';
ALTER TABLE "spaces" ADD COLUMN provider text NOT NULL DEFAULT 'groq';

================
File: supabase/migrations/20250204125000_create_active_space_table.sql
================
CREATE TABLE active_spaces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    space_id UUID NOT NULL REFERENCES spaces(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(user_id) 
);

================
File: supabase/migrations/20250204125100_update_rls_policies.sql
================


================
File: supabase/migrations/20250221221400_add_active_conversations.sql
================
-- Create active_conversations table
CREATE TABLE active_conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(user_id)
);

-- Enable RLS on active_conversations
ALTER TABLE active_conversations ENABLE ROW LEVEL SECURITY;

-- RLS policies for active_conversations
CREATE POLICY "Users can view their own active conversation"
    ON active_conversations FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can update their own active conversation"
    ON active_conversations FOR INSERT
    WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can delete their own active conversation"
    ON active_conversations FOR DELETE
    USING (user_id = auth.uid());

================
File: supabase/migrations/20250223171800_add_notifications.sql
================
-- Create notifications schema
-- Timestamp: 2025-02-23T17:18:00-07:00

-- Create notification types enum
CREATE TYPE notification_type AS ENUM (
    'space_created',
    'space_deleted',
    'model_changed',
    'conversation_created',
    'conversation_deleted'
);

-- Create notifications table
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    type notification_type NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    metadata JSONB DEFAULT '{}'::jsonb,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on notifications
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS policies for notifications
CREATE POLICY "Users can view their own notifications"
    ON notifications FOR SELECT
    USING (user_id = auth.uid());

CREATE POLICY "Users can create their own notifications"
    ON notifications FOR INSERT
    WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own notifications"
    ON notifications FOR UPDATE
    USING (user_id = auth.uid())
    WITH CHECK (user_id = auth.uid());

-- Create index for faster notification lookups
CREATE INDEX notifications_user_id_idx ON notifications(user_id);
CREATE INDEX notifications_created_at_idx ON notifications(created_at DESC);

================
File: supabase/migrations/20250223171900_add_realtime_notifications.sql
================
-- Enable realtime for notifications
ALTER PUBLICATION supabase_realtime ADD TABLE notifications;

================
File: supabase/migrations/20250223175200_add_space_history.sql
================
-- Create space history schema
-- Timestamp: 2025-02-23T17:52:00-07:00

-- Create space action types enum
CREATE TYPE space_action_type AS ENUM (
    'created',
    'deleted',
    'updated',
    'model_changed',
    'conversation_added',
    'conversation_deleted'
);

-- Create space history table
CREATE TABLE space_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    space_id UUID NOT NULL REFERENCES spaces(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    action_type space_action_type NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Enable RLS on space history
ALTER TABLE space_history ENABLE ROW LEVEL SECURITY;

-- RLS policies for space history
CREATE POLICY "Users can view history for spaces they have access to"
    ON space_history FOR SELECT
    USING (
        user_id = auth.uid() OR 
        space_id IN (
            SELECT id FROM spaces 
            WHERE user_id = auth.uid()
        )
    );

CREATE POLICY "Users can create history entries for their spaces"
    ON space_history FOR INSERT
    WITH CHECK (
        user_id = auth.uid() AND
        space_id IN (
            SELECT id FROM spaces 
            WHERE user_id = auth.uid()
        )
    );

-- Create indexes for faster lookups
CREATE INDEX space_history_space_id_idx ON space_history(space_id);
CREATE INDEX space_history_user_id_idx ON space_history(user_id);
CREATE INDEX space_history_created_at_idx ON space_history(created_at DESC);

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp
.env

================
File: supabase/config.toml
================
# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "ui"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083

# Use these configurations to customize your Edge Function.
# [functions.MY_FUNCTION_NAME]
# enabled = true
# verify_jwt = true
# import_map = "./functions/MY_FUNCTION_NAME/deno.json"
# Uncomment to specify a custom file path to the entrypoint.
# Supported file extensions are: .ts, .js, .mjs, .jsx, .tsx
# entrypoint = "./functions/MY_FUNCTION_NAME/index.ts"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: types/index.ts
================
export interface Space {
  id: string;
  name: string;
  description?: string;
  model?: string;
  provider?: string;
  is_archived: boolean;
  is_deleted: boolean;
  created_at: string;
  updated_at: string;
  user_id: string;
  color?: string;
  isActive?: boolean;
}

export interface Conversation {
  id: string;
  space_id: string;
  title?: string;
  created_at?: string;
  updated_at?: string;
}

================
File: utils/supabase/check-env-vars.ts
================
// This check can be removed
// it is just for tutorial purposes

export const hasEnvVars =
  process.env.NEXT_PUBLIC_SUPABASE_URL &&
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

================
File: utils/supabase/client.ts
================
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );

================
File: utils/supabase/middleware.ts
================
import { createServerClient } from "@supabase/ssr";
import { type NextRequest, NextResponse } from "next/server";

export const updateSession = async (request: NextRequest) => {
  // This `try/catch` block is only here for the interactive tutorial.
  // Feel free to remove once you have Supabase connected.
  try {
    // Create an unmodified response
    let response = NextResponse.next({
      request: {
        headers: request.headers,
      },
    });

    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return request.cookies.getAll();
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value }) =>
              request.cookies.set(name, value),
            );
            response = NextResponse.next({
              request,
            });
            cookiesToSet.forEach(({ name, value, options }) =>
              response.cookies.set(name, value, options),
            );
          },
        },
      },
    );

    // This will refresh session if expired - required for Server Components
    // https://supabase.com/docs/guides/auth/server-side/nextjs
    const user = await supabase.auth.getUser();

    // protected routes
    if (request.nextUrl.pathname.startsWith("/protected") && user.error) {
      return NextResponse.redirect(new URL("/sign-in", request.url));
    }

    if (request.nextUrl.pathname === "/" && !user.error) {
      return NextResponse.redirect(new URL("/protected", request.url));
    }

    return response;
  } catch (e) {
    // If you are here, a Supabase client could not be created!
    // This is likely because you have not set up environment variables.
    // Check out http://localhost:3000 for Next Steps.
    return NextResponse.next({
      request: {
        headers: request.headers,
      },
    });
  }
};

================
File: utils/supabase/server.ts
================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = async () => {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => {
              cookieStore.set(name, value, options);
            });
          } catch (error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    },
  );
};

================
File: utils/pinecone.ts
================
import { Pinecone } from '@pinecone-database/pinecone';
import { OpenAIEmbeddings } from '@langchain/openai';
import { RecordMetadata } from '@pinecone-database/pinecone';

if (!process.env.PINECONE_API_KEY) {
  throw new Error('Missing PINECONE_API_KEY environment variable');
}

if (!process.env.PINECONE_ENVIRONMENT) {
  throw new Error('Missing PINECONE_ENVIRONMENT environment variable');
}

if (!process.env.PINECONE_INDEX) {
  throw new Error('Missing PINECONE_INDEX environment variable');
}

if (!process.env.OPENAI_API_KEY) {
  throw new Error('Missing OPENAI_API_KEY environment variable');
}

const pinecone = new Pinecone();

const index = pinecone.Index(process.env.PINECONE_INDEX!);

const embeddings = new OpenAIEmbeddings({
  openAIApiKey: process.env.OPENAI_API_KEY,
  modelName: 'text-embedding-3-large',
});

export interface ChatMessage {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  createdAt: number;
  spaceId: string;
  conversationId: string;
  parentId?: string;
  childId?: string;
  metadata?: Record<string, any>;
}

interface PineconeMetadata extends RecordMetadata {
  content: string;
  role: 'user' | 'assistant';
  createdAt: number;
  spaceId: string;
  conversationId: string;
  parentId?: string;
  childId?: string;
  tags?: string[];
  [key: string]: any;
}

export async function upsertChatMessage(message: ChatMessage) {
  try {
    if (!message.id) {
      throw new Error('Message ID is required for Pinecone upsert');
    }

    const vector = await embeddings.embedQuery(message.content);

    const metadata: PineconeMetadata = {
      content: message.content,
      role: message.role,
      createdAt: message.createdAt,
      spaceId: message.spaceId,
      conversationId: message.conversationId,
      ...(message.parentId && { parentId: message.parentId }),
      ...(message.childId && { childId: message.childId }),
      ...(message.metadata || {}),
    };

    await index.upsert([
      {
        id: message.id,
        values: vector,
        metadata,
      },
    ]);

    if (message.role === 'assistant' && message.parentId) {
      const parentVector = await index.fetch([message.parentId]);
      const parentRecord = parentVector.records[message.parentId];
      if (parentRecord && parentRecord.metadata) {
        const parentMetadata = parentRecord.metadata as PineconeMetadata;
        await index.upsert([
          {
            id: message.parentId,
            values: parentRecord.values,
            metadata: {
              ...parentMetadata,
              childId: message.id,
            },
          },
        ]);
      }
    }
  } catch (error) {
    console.error('Error upserting chat message to Pinecone:', error);
    throw error;
  }
}

export async function searchSimilarMessages(query: string, limit = 5, tags: string[] = []) {
  try {
    const queryEmbedding = await embeddings.embedQuery(query);

    const filter: any = {};
    if (tags.length > 0) {
      filter.tags = { $in: tags };
    }

    const results = await index.query({
      vector: queryEmbedding,
      topK: limit,
      includeMetadata: true,
      ...(tags.length > 0 && { filter }),
    });

    return results.matches.map((match) => ({
      score: match.score,
      message: reconstructChatMessage(match.metadata as PineconeMetadata, match.id),
    }));
  } catch (error) {
    console.error('Error searching similar messages in Pinecone:', error);
    throw error;
  }
}

function reconstructChatMessage(metadata: PineconeMetadata, id: string): ChatMessage {
  const { content, role, createdAt, spaceId, conversationId, parentId, childId, ...rest } = metadata;
  return {
    id,
    content,
    role,
    createdAt,
    spaceId,
    conversationId,
    ...(parentId && { parentId }),
    ...(childId && { childId }),
    metadata: rest,
  };
}

export async function getMessageThread(messageId: string): Promise<ChatMessage[]> {
  try {
    if (!messageId) {
      throw new Error('Message ID is required to get message thread');
    }

    const messages: ChatMessage[] = [];
    let currentId: string | undefined = messageId;

    while (currentId) {
      const result = await index.fetch([currentId]);
      const record = result.records[currentId];
      if (!record || !record.metadata) break;

      const metadata = record.metadata as PineconeMetadata;
      messages.unshift(reconstructChatMessage(metadata, currentId));
      currentId = metadata.parentId;
    }

    currentId = messageId;
    while (currentId) {
      const result = await index.fetch([currentId]);
      const record = result.records[currentId];
      if (!record || !record.metadata) break;

      const metadata = record.metadata as PineconeMetadata;
      if (!metadata.childId) break;

      const childResult = await index.fetch([metadata.childId]);
      const childRecord = childResult.records[metadata.childId];
      if (!childRecord || !childRecord.metadata) break;

      const childMetadata = childRecord.metadata as PineconeMetadata;
      messages.push(reconstructChatMessage(childMetadata, metadata.childId));
      currentId = metadata.childId;
    }

    return messages;
  } catch (error) {
    console.error('Error getting message thread:', error);
    throw error;
  }
}

================
File: utils/utils.ts
================
import { redirect } from "next/navigation";

/**
 * Redirects to a specified path with an encoded message as a query parameter.
 * @param {('error' | 'success')} type - The type of message, either 'error' or 'success'.
 * @param {string} path - The path to redirect to.
 * @param {string} message - The message to be encoded and added as a query parameter.
 * @returns {never} This function doesn't return as it triggers a redirect.
 */
export function encodedRedirect(
  type: "error" | "success",
  path: string,
  message: string,
) {
  return redirect(`${path}?${type}=${encodeURIComponent(message)}`);
}

================
File: .cursorrules
================
After each composer completion, you must add what we have done to a file called changelog.md at the rootlevel.


  You are an expert in JavaScript, React, Node.js, Next.js App Router, Zustand, Shadcn UI, Radix UI, Tailwind, and Stylus.

  Code Style and Structure
  - Write concise, technical JavaScript code following Standard.js rules.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content.

  Standard.js Rules
  - Use 2 space indentation.
  - Use single quotes for strings except to avoid escaping.
  - No semicolons (unless required to disambiguate statements).
  - No unused variables.
  - Add a space after keywords.
  - Add a space before a function declaration's parentheses.
  - Always use === instead of ==.
  - Infix operators must be spaced.
  - Commas should have a space after them.
  - Keep else statements on the same line as their curly braces.
  - For multi-line if statements, use curly braces.
  - Always handle the err function parameter.
  - Use camelcase for variables and functions.
  - Use PascalCase for constructors and React components.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  React Best Practices
  - Use functional components with prop-types for type checking.
  - Use the "function" keyword for component definitions.
  - Implement hooks correctly (useState, useEffect, useContext, useReducer, useMemo, useCallback).
  - Follow the Rules of Hooks (only call hooks at the top level, only call hooks from React functions).
  - Create custom hooks to extract reusable component logic.
  - Use React.memo() for component memoization when appropriate.
  - Implement useCallback for memoizing functions passed as props.
  - Use useMemo for expensive computations.
  - Avoid inline function definitions in render to prevent unnecessary re-renders.
  - Prefer composition over inheritance.
  - Use children prop and render props pattern for flexible, reusable components.
  - Implement React.lazy() and Suspense for code splitting.
  - Use refs sparingly and mainly for DOM access.
  - Prefer controlled components over uncontrolled components.
  - Implement error boundaries to catch and handle errors gracefully.
  - Use cleanup functions in useEffect to prevent memory leaks.
  - Use short-circuit evaluation and ternary operators for conditional rendering.

  State Management
  - Use Zustand for global state management.
  - Lift state up when needed to share state between components.
  - Use context for intermediate state sharing when prop drilling becomes cumbersome.

  UI and Styling
  - Use Shadcn UI and Radix UI for component foundations.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - Use Stylus as CSS Modules for component-specific styles:
    - Create a .module.styl file for each component that needs custom styling.
    - Use camelCase for class names in Stylus files.
    - Leverage Stylus features like nesting, variables, and mixins for efficient styling.
  - Implement a consistent naming convention for CSS classes (e.g., BEM) within Stylus modules.
  - Use Tailwind for utility classes and rapid prototyping.
  - Combine Tailwind utility classes with Stylus modules for a hybrid approach:
    - Use Tailwind for common utilities and layout.
    - Use Stylus modules for complex, component-specific styles.
    - Never use the @apply directive

  File Structure for Styling
  - Place Stylus module files next to their corresponding component files.
  - Example structure:
    components/
      Button/
        Button.js
        Button.module.styl
      Card/
        Card.js
        Card.module.styl

  Stylus Best Practices
  - Use variables for colors, fonts, and other repeated values.
  - Create mixins for commonly used style patterns.
  - Utilize Stylus' parent selector (&) for nesting and pseudo-classes.
  - Keep specificity low by avoiding deep nesting.

  Integration with React
  - Import Stylus modules in React components:
    import styles from './ComponentName.module.styl'
  - Apply classes using the styles object:
    <div className={styles.containerClass}>

  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  - Implement route-based code splitting in Next.js.
  - Minimize the use of global styles; prefer modular, scoped styles.
  - Use PurgeCSS with Tailwind to remove unused styles in production.

  Forms and Validation
  - Use controlled components for form inputs.
  - Implement form validation (client-side and server-side).
  - Consider using libraries like react-hook-form for complex forms.
  - Use Zod or Joi for schema validation.

  Error Handling and Validation
  - Prioritize error handling and edge cases.
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Model expected errors as return values in Server Actions.

  Accessibility (a11y)
  - Use semantic HTML elements.
  - Implement proper ARIA attributes.
  - Ensure keyboard navigation support.

  Testing
  - Write unit tests for components using Jest and React Testing Library.
  - Implement integration tests for critical user flows.
  - Use snapshot testing judiciously.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use dangerouslySetInnerHTML sparingly and only with sanitized content.

  Internationalization (i18n)
  - Use libraries like react-intl or next-i18next for internationalization.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  - Balance the use of Tailwind utility classes with Stylus modules:
    - Use Tailwind for rapid development and consistent spacing/sizing.
    - Use Stylus modules for complex, unique component styles.

  Follow Next.js docs for Data Fetching, Rendering, and Routing.

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .windsurfrules
================
You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

    ### Objective
    - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

    ### Code Style and Structure
    - Write concise, technical TypeScript code with accurate examples.
    - Use functional and declarative programming patterns; avoid classes.
    - Favor iteration and modularization over code duplication.
    - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
    - Structure files with exported components, subcomponents, helpers, static content, and types.
    - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).

    ### Optimization and Best Practices
    - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.
    - Implement dynamic imports for code splitting and optimization.
    - Use responsive design with a mobile-first approach.
    - Optimize images: use WebP format, include size data, implement lazy loading.

    ### Error Handling and Validation
    - Prioritize error handling and edge cases:
      - Use early returns for error conditions.
      - Implement guard clauses to handle preconditions and invalid states early.
      - Use custom error types for consistent error handling.

    ### UI and Styling
    - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
    - Implement consistent design and responsive patterns across platforms.

    ### State Management and Data Fetching
    - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
    - Implement validation using Zod for schema validation.

    ### Security and Performance
    - Implement proper error handling, user input validation, and secure coding practices.
    - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

    ### Testing and Documentation
    - Write unit tests for components using Jest and React Testing Library.
    - Provide clear and concise comments for complex logic.
    - Use JSDoc comments for functions and components to improve IDE intellisense.

    ### Methodology
    1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
    2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
    3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

    **Process**:
    1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
    2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
    3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
    4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
    5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.

================
File: changelog.md
================
# Changelog

## [Unreleased]

### Added
- Search box clearing functionality when navigating between different command modal views
  - Clears search when selecting a provider in models view
  - Clears search when selecting a specific model
  - Clears search when selecting a space
  - Clears search when using quick actions to switch views 
- New space creation form in command modal
  - Added form interface with name, description, provider, and model fields
  - Auto-populates available models based on selected provider
  - Form validation and error handling
  - Smooth navigation with back button support
  - Removed search functionality in form view
  - Fixed "No results found" message to only show during active search
  - Improved space creation workflow from space tab
  - Fixed back button visibility in form view
- Added server-side active space management
  - New setActive flag in space creation API
  - Automatic active space persistence in database
  - Proper active space state handling across sessions
  - Upsert functionality to maintain single active space per user
- Modified UnifiedInput component to use Command+/ (⌘+/) hotkey instead of just /
  - Updated placeholder text to reflect the new keyboard shortcut
  - Improved user experience with more intentional input focus trigger
- Improved spaces list organization
  - Spaces now sorted by last updated date
  - Active space always appears at the top
  - Enhanced visual indication of active space
  - Added "Active" label to current space
  - Improved contrast and visibility of active state
  - Added spacing between space items
  - Enhanced hover effects with subtle transitions
  - Added backdrop blur and border effects
  - Improved visual hierarchy with better shadows
- Added automatic spaces list refresh
  - Command window now fetches latest spaces data when opened
  - Ensures active space is correctly reflected in UI
  - Maintains consistency between backend and frontend state
- Enhanced keyboard navigation in command modal
  - Arrow keys now navigate between search input and list items
  - Up arrow from first list item returns focus to search
  - Down arrow from search moves focus to first list item
  - Maintains natural focus flow for better user experience
  - Preserves existing keyboard shortcuts and navigation
- Improved empty state handling in spaces list
  - Added "No spaces found" message when no spaces exist
  - Moved create space button to center of empty state
  - Enhanced visibility of space creation option
  - Added proper type definitions for space active state
  - Improved user experience for first-time users
- Added keyboard back navigation in command modal
  - Backspace key now acts as back button when search is empty
  - Matches back button behavior for all navigation states
  - Handles space form, spaces list, and models views
  - Preserves search functionality when typing
- Added active provider indication
  - Matches active model styling for consistency
  - Shows active state with visual indicators
  - Added "Active" label to current provider
  - Enhanced visual feedback for active state
- Enhanced default space creation with improved welcome message
  - Added detailed welcome message with AI assistant capabilities
  - Improved onboarding experience for new users
  - Added bullet points for key features and use cases
- Implemented Redis caching with Upstash
  - Added Redis client configuration with TTL settings
  - Implemented caching for spaces, active spaces, conversations, and messages
  - Added cache invalidation on data updates
  - Added cache key generators for consistent key naming
  - Optimized API routes to check cache before database
  - Added background cache updates for better performance
  - Implemented 5-minute TTL for all cached data
  - Added proper cache invalidation on write operations
  - Enhanced response times with Redis caching
- Refactored components into smaller, more focused components following SOLID principles:
  - Extracted SpaceForm into its own component for better separation of concerns
  - Created QuickActionsList component to handle quick action items
  - Created SpacesList component to manage space selection and creation
  - Created ModelsList component to handle model and provider selection
  - Improved component reusability and maintainability
  - Enhanced type safety with proper interfaces
  - Reduced component complexity and improved readability
  - Better separation of concerns and single responsibility principle
  - Improved testability of individual components
- Added Zustand store for managing active space state globally
- Fixed space selection sync between command window and chat interface
- Implemented real-time message streaming in chat interface
  - Added proper typing for streaming response handling
  - Implemented immediate message updates during streaming
  - Added proper state management for streaming messages
  - Fixed message synchronization between streaming and database
  - Added proper error handling for failed responses
- Improved message handling in chat interface:
  - Added real-time message conversion during streaming
  - Added proper model and provider information to all messages
  - Implemented optimized message state management
  - Added proper message persistence before AI responses
  - Enhanced message type safety and validation
  - Improved streaming performance with content equality checks
  - Added proper error handling for message creation
  - Enhanced state synchronization between UI and database
  - Added automatic message extension with space metadata
  - Synchronized AI messages with extended message format
  - Added proper conversation and user context to messages
  - Improved message state management during streaming
- Updated ClientChatContent to use global space store
- Updated QuickActionsCommand to use global space store
- Improved space selection handling to maintain consistency across components
- Improved prop naming in ClientChatContent component
  - Renamed `initialActiveSpace` to `defaultSpace`
  - Renamed `initialConversations` to `defaultConversations`
  - Made prop names more concise and descriptive
- Improved initial space creation and setup flow
  - Added proper sequencing of space creation, activation, and conversation setup
  - Created welcome conversation with initial message
  - Added fallback for setting first space as active if none active
  - Improved error handling with descriptive messages
  - Added proper state refresh after initialization
  - Added proper default provider and model configuration
  - Fixed type safety for provider and model selection
- Added Suspense boundaries with skeleton loading
  - Created TabSkeleton component for navigation tabs
  - Created ChatMessagesSkeleton component for chat messages
  - Added loading states that match the visual style of the app
  - Improved perceived performance with immediate loading feedback
  - Enhanced user experience during data fetching
- Conversations list feature in quick actions command
  - Added ability to view and switch between conversations in the current space
  - Added ability to create new conversations
  - Integrated with existing space and model selection UI
  - Added conversations list component with active conversation indicator
- Added keyboard shortcuts for quick actions
  - ⌘/Ctrl + S to open spaces
  - ⌘/Ctrl + M to open models
  - ⌘/Ctrl + C to open conversations
  - Added visual keyboard shortcut hints to quick actions menu
  - Automatic platform detection for Mac/Windows key symbols
  - Styled keyboard shortcut badges with consistent design
- Enhanced quick actions with command hints
  - Added command hints (e.g., "> spaces", "> models") to each action
  - Styled hints with monospace font and subtle color
  - Combined hints with existing keyboard shortcuts
  - Improved discoverability of command-based navigation
- Created new `LLMResponseFormatter` component for efficient markdown and code block formatting
  - Highly performant implementation without external dependencies
  - Support for code block syntax highlighting
  - Markdown formatting including bold, italic, links, and lists
  - Automatic language detection for code blocks
  - Hover effects and language badges for code blocks
  - Memoized content processing for optimal performance
- Enhanced LLMResponseFormatter with comprehensive markdown support:
  - Added copy-to-clipboard functionality for code blocks
  - Added support for all header levels (H1-H3)
  - Added support for tables, blockquotes, and horizontal rules
  - Added task lists with checkbox support
  - Added definition lists and abbreviations
  - Added footnotes and improved link handling
  - Added superscript and subscript support
  - Added image support with lazy loading
  - Improved code block styling with language detection
  - Enhanced accessibility with ARIA labels and semantic HTML
  - Optimized performance with better memoization
  - Added visual feedback for code copying
  - Improved list handling and nesting
- Enhanced LLMResponseFormatter with advanced syntax highlighting:
  - Added custom lightweight syntax highlighter
  - Support for Python, JavaScript, and TypeScript
  - VS Code-like theme with carefully chosen colors
  - Language-specific token highlighting
  - Performance-optimized implementation
  - No external dependencies
  - Automatic language detection
  - Copy-to-clipboard functionality
  - Improved code block styling
  - Enhanced accessibility
  - Better visual hierarchy
- Replaced `marked` with `markdown-it` for markdown rendering
  - Improved performance and reliability
  - Better TypeScript support
  - Added syntax highlighting with highlight.js
  - Added copy button for code blocks
  - Automatic external link handling
  - Responsive typography with Tailwind's prose classes
  - Proper HTML sanitization with DOMPurify
- Implemented new markdown renderer using Marked library:
  - Added syntax highlighting with highlight.js
  - Added copy button for code blocks
  - Added target="_blank" for external links
  - Added proper sanitization with DOMPurify
  - Added support for GitHub Flavored Markdown
  - Added proper code block language detection
  - Added proper HTML sanitization
  - Added proper link handling
  - Added proper code block styling
- Implemented MarkdownRenderer component with the following features:
  - Markdown parsing using Marked library
  - Code syntax highlighting with highlight.js
  - Copy button for code blocks
  - Automatic external link handling
  - HTML sanitization with DOMPurify
  - GitHub Flavored Markdown support
  - Heading IDs and URL handling
  - Responsive design with Tailwind Typography
- Added inline code block support in markdown:
  - Added custom inline code renderer
  - Added consistent styling for inline code
  - Added proper padding and borders
  - Added monospace font and appropriate sizing
  - Added subtle background and border effects
  - Improved readability with proper spacing
  - Maintained visual consistency with code blocks
- Enhanced markdown renderer spacing using Tailwind prose modifiers for better typography and readability
  - Added consistent spacing for headings, paragraphs, lists, code blocks, and blockquotes
  - Improved vertical rhythm throughout markdown content
  - Maintained existing inline code styling while adding proper element spacing
- Enhanced pre tag styling in markdown renderer to match code block component appearance
  - Added container styling with backdrop blur and hover effects
  - Implemented consistent code formatting with 13px font size
  - Added rounded corners and border effects
  - Maintained consistent spacing and padding
- Enhanced
- Added syntax highlighting for inline code:
  - Integrated highlight.js for inline code blocks
  - Added automatic language detection
  - Maintained consistent styling with proper fallback
  - Improved error handling for highlighting failures
  - Enhanced visual consistency with code blocks

### Changed
- Updated quick actions menu names to be more concise
  - Changed "Switch Space" to "Spaces"
  - Changed "Switch Model" to "Models"
- Improved keyboard shortcut styling
  - Made shortcut keys perfect squares with consistent dimensions
  - Added flex layout for better centering
  - Standardized size to 24x24 pixels
- Improved command modal response time
  - Modal now closes immediately upon selection (space or model)
  - Actions continue in background after modal closes
  - Better user experience with instant feedback
- Improved space creation process
  - Form now only requires space name to be valid
  - Default model is automatically selected
  - Modal closes immediately when creating space
  - Creation process continues in background
  - Faster and more responsive user experience 
  - No loading indicators during space creation
  - Immediate activation of newly created spaces
  - Active space persists across page refreshes
- Enhanced model selection interface
  - Added visual indication of active model
  - Consistent styling with spaces list
  - Added "Active" label to current model
  - Improved hover effects and transitions
  - Better spacing and visual hierarchy
  - Added backdrop blur and border effects
- Unified command modal item styling
  - Consistent hover effects across all items
  - Added subtle borders and transitions
  - Improved spacing and padding
  - Enhanced visual feedback on interaction
  - Standardized rounded corners
  - Added backdrop blur effect to all items
  - Smoother opacity transitions for icons 
- Updated create space button styling
  - Changed to primary action button style
  - Added hover and focus states
  - Improved visual feedback
  - Centered in footer with max width 
- Refactored API routes for better organization and consistency:
  - Centralized all constants in lib/constants.ts:
    - Database table names
    - Column names
    - Message roles
    - Error messages
    - Default values
  - Removed duplicated strings and error messages
  - Standardized error handling across all routes
  - Improved type safety with constant enums
  - Enhanced maintainability with centralized constants
  - Reduced potential for typos and inconsistencies
  - Made database operations more consistent
  - Updated all API routes to use constants:
    - Updated spaces routes
    - Updated conversations routes
    - Updated messages routes
    - Updated chat route
    - Improved error handling consistency
    - Enhanced response formatting
    - Standardized API response structure
- Extended use of constants across the application:
  - Updated quick-actions-command to use constants for:
    - Default space name and description
    - Model and provider configuration
    - Form default values
  - Updated chat component to use constants for:
    - Message roles
    - Error messages
    - Response formatting
  - Updated message component to use constants for:
    - Role definitions
    - Styling configuration
    - Error handling
  - Updated message-input to use constants for:
    - Message roles
    - Form validation
    - Error messages
  - Improved type safety with proper imports
  - Reduced code duplication
  - Enhanced maintainability
  - Standardized configuration across components
- Updated ClientChatContent to use global space store
- Updated QuickActionsCommand to use global space store
- Improved space selection handling to maintain consistency across components
- Improved prop naming in ClientChatContent component
  - Renamed `initialActiveSpace` to `defaultSpace`
  - Renamed `initialConversations` to `defaultConversations`
  - Made prop names more concise and descriptive
- Improved initial space creation and setup flow
  - Added proper sequencing of space creation, activation, and conversation setup
  - Created welcome conversation with initial message
  - Added fallback for setting first space as active if none active
  - Improved error handling with descriptive messages
  - Added proper state refresh after initialization
  - Added proper default provider and model configuration
  - Fixed type safety for provider and model selection
- Refactored ClientChatContent useEffect for better readability and maintainability:
  - Implemented early returns for better flow control
  - Simplified nested conditionals
  - Added proper error handling structure
  - Used optional chaining and nullish coalescing
  - Improved code organization with clear sections
  - Enhanced type safety with proper null checks
  - Added descriptive comments for better code clarity
- Connected SpaceTab and ModelTab components directly to Zustand store for automatic updates
- Removed prop drilling in favor of direct store connection
- Added "No Model Selected" text to ModelTab empty state
- Improved component reactivity for space and model selection changes
- Optimized space switching for better responsiveness
  - Added immediate UI updates when switching spaces
  - Set active space from local state before backend update
  - Improved perceived performance of space switching
- Refactored navigation tabs for better consistency
  - Created reusable BaseTab component
  - Unified styling across all tabs
  - Added consistent hover and active states
  - Maintained specific min-widths for each tab type
  - Improved component maintainability
- Enhanced SpaceTab visual appearance
  - Updated space icon with colorful gradient background
  - Added vibrant indigo-to-pink gradient for better visual hierarchy
  - Improved visual feedback for active spaces
- Simplified command hints in quick actions
  - Removed ">" prefix from commands
  - Shows just the command text (e.g., "spaces", "models")
  - Cleaner, more minimal command display
  - Maintained monospace font and subtle styling
- Updated quick actions command hints
  - Changed to show full command keys (e.g., "> spaces", "> models")
  - Improved visual alignment with Raycast-style command display
  - Enhanced command discoverability with consistent prefix
- Simplified quick actions display
  - Removed command text hints
  - Showing only keyboard shortcut badges
  - Cleaner, more minimal interface
  - Improved visual focus on essential elements
- Reorganized navigation layout:
  - Moved space tab to top center of screen
  - Added conversation tab to bottom navigation
  - Improved visual hierarchy with fixed positioning
  - Maintained consistent styling across all tabs
  - Added active conversation indicator
  - Kept quick actions and model tabs in bottom navigation
  - Enhanced user experience with clear navigation structure
- Improved scroll to bottom button positioning
  - Moved button to appear directly underneath space tab
  - Maintained consistent styling with space tab
  - Enhanced visual hierarchy with proper spacing
  - Improved user experience with clear button placement
- Switched from react-markdown to marked for better performance and customization
- Improved code block rendering with copy functionality
- Enhanced link handling with proper external link detection
- Improved markdown sanitization with DOMPurify
- Enhanced MarkdownRenderer with inline code support:
  - Customized markdown-it renderer for inline code
  - Added highlight function for consistent code handling
  - Added styling utilities for inline code blocks
  - Improved visual hierarchy with subtle styling
- Enhanced markdown renderer to use CodeBlock component for fenced code blocks
  - Integrated CodeBlock component for better code display
  - Maintained regular markdown rendering for non-code content
  - Improved code block styling with language detection
  - Added copy functionality for code blocks
  - Preserved sanitization for regular content
- Enhanced markdown list formatting:
  - Added preprocessing to convert strong tags to list items
  - Improved list styling with proper bullets and numbers
  - Added correct indentation for list items
  - Enhanced list item spacing and hierarchy
  - Fixed strong tag conversion for heading-like items
- Updated chat route to use dynamic current date in system prompt
  - Added getCurrentFormattedDate function for consistent date formatting
  - System prompt now shows actual current date instead of hardcoded value
  - Year references in date formatting rules are now dynamic

### Performance
- Optimized Redis caching implementation
- Reduced unnecessary JSON parsing operations
- Improved cache hit ratio with better invalidation strategy
- Enhanced response times for frequently accessed data
- Implemented Redis helper functions for consistent cache operations:
  - `setCache`: Handles JSON serialization and TTL setting
  - `getCache`: Handles JSON parsing and type safety
  - `deleteCache`: Handles cache invalidation
- Updated all API routes to use new cache helper functions:
  - Spaces route now uses consistent caching pattern
  - Conversations route implements proper cache invalidation
  - Messages route includes improved error handling
- Added proper error logging across all routes
- Implemented consistent error response format
- Optimized message streaming performance in chat interface:
  - Reduced unnecessary state updates during streaming
  - Added content equality checks to prevent redundant updates
  - Eliminated extra API calls after streaming completion
  - Improved state consistency during streaming
  - Enhanced error handling and null checks
  - Reduced re-renders during message streaming
  - Optimized array operations for better performance

### Fixed
- Improved cache invalidation when switching models:
  - Added cache clearing for all conversations in a space
  - Added cache clearing for all messages in affected conversations
  - Added cache clearing for active space and spaces list
  - Fixed issue where old model settings were persisting in cache
  - Added proper cache invalidation triggers in space update endpoint
  - Improved cache key management for model-specific data
  - Enhanced cache consistency during model switches
- Improved message creation error handling:
  - Added proper validation for required fields (content and role)
  - Added clear error messages for missing fields
  - Improved type safety with Message interface
  - Added proper handling of optional fields
  - Enhanced error logging and status codes
  - Fixed "Missing required fields" error during chat
- Fixed JSON parsing errors in Redis caching implementation:
  - Updated conversations route to use new cache helper functions
  - Updated messages route to use new cache helper functions
  - Removed manual JSON.parse/stringify operations
  - Improved error handling in cache operations
  - Fixed type safety in cache data handling
- Improved error handling in API routes
- Enhanced type safety in API responses
- Fixed back button now properly visible at the top of the space creation form
- Added proper padding to modal header when search is hidden
- Adjusted create space button to be more compact and consistent with UI
  - Reduced padding and font size
  - Added border and backdrop blur
  - Adjusted text opacity for better visual harmony
  - Made button width more compact and centered
- Fixed spaces list not updating immediately after creating a new space 
  - Now fetches the complete updated list of spaces from the server after creation
  - Ensures the UI reflects the latest state without requiring a page refresh
- Fixed inconsistent modal behavior when opening from space tab
  - Now uses openQuickActionsCommand instead of toggle to ensure consistent state
  - Prevents state synchronization issues between different open methods
- Fixed space creation initialization issues
  - Now creates initial conversation and welcome message for new spaces
  - Properly initializes all states (spaces, conversations, messages)
  - Ensures smooth transition after space creation
  - Prevents "stuck generating" state in new spaces
  - Added consistent model tags for all messages
  - Removed unnecessary loading states during creation
  - Sets new space as active immediately after creation
  - Persists active space state across page refreshes
- Fixed infinite update loop in state management
  - Removed unnecessary page reload after space creation
  - Improved state update sequence to prevent circular dependencies
  - Fixed maximum update depth exceeded error
- Fixed chat message loading and state management
  - Removed duplicate message loading effects
  - Added message caching to prevent unnecessary reloads
  - Fixed circular dependencies in effects and callbacks
  - Improved streaming message state management
  - Removed unnecessary state updates and re-renders
- Fixed space switching behavior
  - Removed all loading states during space switching
  - Eliminated error state updates for non-critical operations
  - Enhanced user experience with instant space transitions
  - Prevented loading screen from appearing during space changes
  - Maintained smooth UI transitions without interruptions
- Improved keyboard navigation in command modal
  - Fixed arrow key navigation between search and list items
  - Added proper focus management for list items
  - Improved integration with CMDK's built-in navigation
  - Enhanced accessibility for keyboard users
  - Fixed edge cases with focus handling
- Fixed command modal keyboard navigation
  - Properly integrated with CMDK's native keyboard navigation
  - Fixed arrow key navigation between search and items
  - Added support for cycling through items with loop
  - Corrected component hierarchy for better accessibility
  - Removed custom navigation logic that interfered with built-in behavior
- Optimized command modal structure
  - Simplified DOM hierarchy to match CMDK's expectations
  - Fixed keyboard navigation between search and items
  - Enabled simultaneous focus of search and first item
  - Improved filtering and sorting behavior
  - Enhanced list scrolling and item cycling
- Improved command modal structure and navigation
  - Added proper Command.Group components for better keyboard navigation
  - Fixed list item grouping and hierarchy
  - Enhanced focus management between groups
  - Improved accessibility with proper ARIA roles
  - Maintained consistent styling within groups
- Updated Next.js API route params handling for version 15
  - Properly awaiting params object in dynamic route handlers
  - Updated type definitions to reflect Promise-based params
  - Fixed params access pattern to match Next.js 15 requirements
  - Improved type safety with proper Promise typing
  - Added proper async handling in spaces API routes
  - Standardized params handling across all dynamic routes
  - Added model validation in spaces update endpoint
  - Improved space update data handling
- Fixed automatic space creation on first load
  - Added proper error handling in spaces provider
  - Improved initialization logic for new users
  - Added automatic creation of first space when none exist
  - Set proper default values for initial space
- Fixed create space button visibility
  - Button now shows consistently in spaces view
  - Appears both when spaces list is empty and when spaces exist
  - Improved button placement and styling
  - Enhanced user experience for space creation workflow
- Improved keyboard navigation visual feedback
  - Added proper hover effects for keyboard-selected items
  - Unified hover and keyboard selection styles
  - Added data-selected state handling for all command items
  - Enhanced visual feedback for keyboard navigation
  - Improved accessibility with consistent focus styles
  - Fixed opacity transitions for icons during keyboard navigation
  - Added proper group data attributes for nested elements
- Fixed spaces list and creation functionality
  - Added automatic default space creation for new users
  - Improved create space button visibility and styling
  - Fixed empty state handling in spaces list
  - Added proper autofocus to space creation form
  - Enhanced visual feedback for space creation
  - Improved error handling in spaces API
  - Added proper type checking for space active state
  - Fixed space switching behavior
  - Improved user experience for first-time users
- Improved modal structure for fixed footer
  - Added proper flex layout for scrollable content
  - Fixed footer positioning at bottom of modal
  - Added border separator for visual clarity
  - Maintained consistent padding and spacing
- Fixed multiple active spaces issue
  - Added proper clearing of previous active space when creating new space
  - Updated client-side state management to correctly handle active states
  - Removed upsert in favor of delete + insert for active space management
  - Ensured only one space can be active at a time
  - Fixed active state visual indicators
- Fixed active space management in database
  - Resolved unique constraint violation in active_spaces table
  - Improved set_active_space function to properly handle existing records
  - Added explicit check for existing records before update/insert
  - Added DELETE policy for active_spaces table
  - Enhanced error handling in space activation process
- Improved model switching behavior
  - Removed unnecessary loading state updates in status tab
  - Simplified model selection logic
  - Removed error state updates for non-critical operations
  - Enhanced user experience with smoother model switching
- Improved command modal focus management
  - Added automatic focus on first item in nested lists
  - Ensured consistent focus behavior across all navigation states
  - Fixed focus when switching between providers and models
  - Added proper data-selected attributes for visual feedback
  - Improved keyboard navigation experience
- Fixed model name display in default space creation
  - Updated default space creation to use correct model ID from AVAILABLE_MODELS configuration
  - Ensures consistent model naming between UI and backend
  - Fixed customer-facing model names in initial space setup
  - Removed hardcoded model IDs in favor of configuration-based values
- Optimized space creation performance
  - Removed unnecessary loading states during space creation
  - Made modal close immediately after initiating space creation
  - Moved conversation and message creation to background operations
  - Improved initial space creation responsiveness
  - Reduced perceived latency in space switching
  - Eliminated loading screen during space operations
  - Enhanced user experience with instant feedback
  - Optimized state updates for smoother transitions
  - Improved error handling with silent background operations
- Further optimized space creation performance
  - Made conversation and welcome message creation synchronous
  - Ensured initial message appears immediately without refresh
  - Improved state updates to include all related data
  - Enhanced space provider initialization
  - Made initial space creation synchronous
  - Added proper active space handling during initialization
  - Reduced overall latency in space operations
  - Improved state consistency across components
  - Fixed missing welcome message on first load
- Further optimized loading states during space operations
  - Removed loading screen during space creation and initialization
  - Initialized spaces provider with isInitialized true by default
  - Simplified loading state logic to only show during initial auth check
  - Improved state management to prevent unnecessary loading screens
  - Enhanced user experience with immediate UI feedback
  - Optimized space provider initialization flow
  - Removed redundant loading states in protected route
  - Streamlined space creation and switching process
- Fixed JSON parsing errors in Redis caching implementation
  - Updated conversations route to use new cache helper functions
  - Updated messages route to use new cache helper functions
  - Removed manual JSON.parse/stringify operations
  - Improved error handling in cache operations
  - Fixed type safety in cache data handling
- Improved error handling in API routes
- Enhanced type safety in API responses
- Enhanced message creation with proper schema validation:
  - Added validation for role field (must be 'user' or 'assistant')
  - Added proper handling of is_deleted field
  - Added validation for parent_message_id existence
  - Added all required fields from database schema
  - Improved error messages for invalid fields
  - Added warning for invalid parent message references
  - Added required model_used and provider validation for assistant messages
  - Fixed missing fields error during message creation
  - Enhanced error handling and response formatting
  - Improved type safety with Message interface
  - Added proper cache invalidation after message creation
- Refactored chat route for better provider handling:
  - Added centralized provider configuration
  - Improved error handling and response formatting
  - Enhanced type safety with Provider type
  - Added proper validation for provider and model
  - Improved space validation and error messages
  - Enhanced response streaming configuration
  - Added proper error handling for invalid providers
  - Improved type safety in message handling
  - Added proper error responses for invalid requests
  - Enhanced space access validation
- Updated Action type in spaces-provider to allow null for SET_ACTIVE_SPACE payload, fixing type error during user logout
- Fixed model configuration type error
  - Added proper type safety for provider selection
  - Added constants for default provider and model
  - Fixed undefined provider access in getModelName
  - Improved type checking for model configuration
- Fixed model configuration import paths
  - Updated imports to use correct path from @/config/models
  - Separated model configuration from general constants
  - Fixed type error in getModelName function
  - Improved module organization for model-related code
- Improved message handling in chat interface
  - Fixed assistant message streaming and display
  - Added proper message property handling for both user and assistant messages
  - Added model and provider information to assistant messages
  - Fixed message state synchronization between UI and AI messages
  - Added proper timestamp updates for streaming messages
  - Improved message creation with complete required fields
- Fixed chat messages skeleton loading
  - Removed duplicate Suspense boundary in ChatMessages component
  - Moved Suspense handling to parent component level
  - Improved skeleton loading visibility
- Improved QuickActionsTab styling consistency
  - Added active state based on modal open state
  - Matched background and border styling with other tabs
  - Enhanced visual feedback when quick actions are active
- Fixed `MarkdownRenderer` component to display code blocks in correct order
- Updated token processing to maintain proper sequence of content
- Improved text content handling with proper markdown rendering
- Added proper Token type import from markdown-it
- Enhanced spacing between content segments
- Added consistent vertical margins (1.5rem) to code blocks in markdown renderer
  - Improved spacing between code blocks and surrounding content
  - Enhanced readability with proper vertical rhythm
- Improved markdown renderer token handling:
  - Fixed issue with empty list items appearing in rendered content
  - Improved token grouping for better content structure
  - Added proper handling of line breaks and empty content
  - Enhanced content sanitization with empty content checks
  - Maintained proper ordering of code blocks and regular content
- Improved markdown list handling:
  - Fixed numbered list preservation
  - Added proper handling of bullet points
  - Maintained correct numbering sequence
  - Enhanced list item detection
  - Improved formatting consistency
- Enhanced markdown list and title formatting:
  - Added custom list item renderer for proper numbering
  - Improved handling of titles in list items
  - Added proper strong tag styling for titles
  - Enhanced list item indentation and spacing
  - Fixed numbered list formatting with descriptions
- Fixed ordered list number cutoff:
  - Increased ordered list padding for better number visibility
  - Adjusted list item padding to prevent double-spacing
  - Added specific styling for ordered list items
  - Improved overall list spacing and alignment
- Fixed inline code rendering in markdown:
  - Added custom renderer for inline code blocks
  - Updated styling selectors for better specificity
  - Improved inline code visual consistency
  - Maintained proper font and background styling
- Improved ordered list handling in markdown renderer:
  - Leveraged markdown-it's native list rendering capabilities
  - Fixed numbered list preservation and formatting
  - Added proper handling of titles within list items
  - Maintained correct list numbering sequence
  - Enhanced list item styling with proper Tailwind classes
- Restored previous inline code styling:
  - Moved styles directly into code_inline renderer
  - Fixed background, border, and text styling
  - Restored proper padding and font size
  - Improved visual consistency
  - Removed reliance on container class selectors
- Refactored MarkdownRenderer for better maintainability:
  - Extracted configuration into separate functions
  - Improved code organization with modular structure
  - Removed unnecessary comments
  - Enhanced type safety with proper function signatures
  - Simplified Tailwind class organization
  - Improved code readability and maintainability

## [2024-03-21]
- Fixed event handler error in SpaceTab component by converting it to a Client Component
- Added 'use client' directive to SpaceTab component
- Removed unused handleClick function and onClick handler
- Improved component architecture by properly separating client and server components
- Repositioned navigation tabs (Space, Status, Quick Actions, Model) from top of page to bottom
- Added gradient background for bottom navigation area
- Improved visual hierarchy with tabs appearing directly above UnifiedInput
- Enhanced UX by grouping related controls together at the bottom
- Fixed type error in handleSubmit function to properly handle optional event parameter
- Refined navigation tabs positioning to match UnifiedInput width and placement
- Adjusted tabs to be outside UnifiedInput but maintain same visual alignment
- Fixed width to 800px to match input component
- Improved spacing and centering of navigation elements
- Repositioned navigation tabs to appear above UnifiedInput with proper z-index
- Fine-tuned spacing between tabs and input for better visual hierarchy

## [2024-02-04] Schema Update: Messages Table Annotations - Part 2
- Moved `conversation_id` and `parent_message_id` into the `annotations` JSONB field
- Added database constraint to ensure `conversation_id` is present and valid in annotations
- Updated `get_conversation_messages` function to use conversation_id from annotations
- Improved alignment with Vercel AI SDK message structure

## [2024-02-04] Message Structure Refactoring
- Updated all routes and server actions to use annotations for message metadata
- Moved conversation_id, model_used, provider, and parent_message_id into annotations
- Updated database queries to use JSONB operators for filtering
- Updated RLS policies to use conversation_id from annotations
- Updated Message type definition to reflect new structure
- Improved message creation with proper annotations handling
- Enhanced type safety across all message-related operations

## [2024-02-04] Database Schema Update - Annotations Array Structure

### Changed
- Modified `messages` table `annotations` column from `JSONB` to `JSONB[]` to support array of JSON values
- Updated all queries and indexes to work with the new array-based structure
- Modified validation constraints to handle array structure
- Updated `get_conversation_messages` function to work with JSONB arrays
- Enhanced trigger function to validate both array presence and conversation_id

### Technical Details
- Uses PostgreSQL's native array type with JSONB elements
- Maintains backward compatibility by keeping conversation_id in annotations[0]
- Added array length validation in constraints
- Updated all related queries to use array index notation [0] for accessing conversation_id

## [2024-02-04] Database Schema Fix - JSONB Syntax and Storage

### Changed
- Switched `annotations` from `JSONB[]` to `JSONB` type storing a JSON array
- Updated all JSONB array access syntax from `[0]` to `->0`
- Improved JSONB validation using `jsonb_typeof`
- Updated trigger function to use `jsonb_array_length`
- Fixed all queries and indexes to use proper JSONB operators

### Technical Details
- Now using native JSONB array instead of array of JSONB
- Proper JSONB array access syntax for PostgreSQL
- More robust validation of array structure
- Better handling of NULL cases
- Improved query performance with correct JSONB operators

## [2024-02-04] Message Creation Fix - JSONB Array Handling

### Fixed
- Fixed JSONB array handling in message creation
  - Removed manual JSON stringification
  - Let Supabase handle JSONB serialization
  - Fixed "cannot get array length of scalar" error
  - Improved array handling with proper defaults

### Technical Details
- Direct array passing to Supabase for proper JSONB conversion
- Removed unnecessary JSON.stringify step
- Proper handling of undefined annotations
- Fixed scalar vs array type mismatch

## [2024-02-04] Message Handling Fix - JSONB Path and Format

### Fixed
- Fixed message creation and fetching with proper JSONB handling
  - Updated JSONB path syntax for message queries
  - Fixed annotations array format in message creation
  - Improved message fetching performance with eq instead of filter
  - Added proper conversion of annotations to JSONB array format

### Technical Details
- Using correct JSONB path syntax: `annotations->0->conversation_id`
- Proper wrapping of annotations in array format
- Better query performance with eq operator
- Improved debugging with detailed logging
- Consistent JSONB array structure across operations

## [2024-03-19] Command Window Functionality

### Added
- Created new custom hook `useCommandWindow` to manage command window state and actions
- Added click handlers to all tab components to open their respective command windows
- Updated `QuickActionsCommandProvider` to use the new hook
- Added `isActive` prop to `BaseTab` component

### Changed
- Refactored command window state management into a reusable hook
- Updated keyboard shortcuts to use the new command window functionality
- Improved type safety with proper TypeScript interfaces

### Technical Details
- Created new hook in `lib/hooks/use-command-window.ts`
- Updated all tab components to use the `useQuickActionsCommand` hook
- Standardized the command window opening/closing behavior across the application

## [2024-03-19] Create New Space UI Enhancement

### Changed
- Moved "Create New Space" from footer to list item in spaces view
- Added "Create New Space" to quick actions list
- Improved space creation accessibility through multiple entry points
- Unified space creation UI across the application

### Technical Details
- Added "Create New Space" as first item in spaces list with dedicated group
- Added create space action to quick actions list under Space section
- Removed footer element from command modal
- Improved component props to handle create space callback
- Maintained consistent styling and behavior across all entry points

## [2024-03-19] Conversation Management Enhancement

### Added
- Created new Zustand store for managing conversations globally
- Added preloading of conversations in ClientChatContent
- Added "Create New Conversation" action to conversations list

### Changed
- Updated ConversationsList to use global conversation store
- Improved conversation state management with Zustand
- Enhanced conversation loading and state persistence
- Removed local conversation state in favor of global store

### Technical Details
- Created new store in `lib/stores/conversation-store.ts`
- Updated ClientChatContent to initialize conversation store
- Modified ConversationsList to use global state
- Added proper conversation creation and selection handling
- Improved conversation state synchronization across components

## [2024-03-19] Conversation Shortcut Update

### Changed
- Updated conversation command shortcut from ⌘T to ⌘D for better accessibility
- Updated ConversationTab to display 'D' as the shortcut
- Improved conversation tab label text

### Technical Details
- Modified keyboard event handler in QuickActionsCommandProvider
- Updated shortcut display in ConversationTab component
- Maintained consistent shortcut behavior across the application

## [2024-03-19] Space Customization Enhancement

### Added
- Added icon/emoji support for spaces
- Added color customization for spaces
- Enhanced space form UI with icon picker and color selector
- Updated space tab to display custom icons and colors

### Technical Details
- Added icon and color fields to spaces table in database
- Updated Space type definition to include new fields
- Enhanced SpaceForm component with modern UI for icon and color selection
- Modified SpaceTab to dynamically display space icons and colors
- Added default color (#3ecfff) for new spaces

## [Unreleased]

### Added
- Added Zustand store for managing active space state globally
- Fixed space selection sync between command window and chat interface

### Changed
- Improved initial space creation and setup flow
  - Added proper sequencing of space creation, activation, and conversation setup
  - Created welcome conversation with initial message
  - Added fallback for setting first space as active if none active
  - Improved error handling with descriptive messages
  - Added proper state refresh after initialization
  - Added proper default provider and model configuration
  - Fixed type safety for provider and model selection
- Improved prop naming in ClientChatContent component
  - Renamed `initialActiveSpace` to `defaultSpace`
  - Renamed `initialConversations` to `defaultConversations`
  - Made prop names more concise and descriptive
- Updated ClientChatContent to use global space store
- Updated QuickActionsCommand to use global space store
- Improved space selection handling to maintain consistency across components

### Fixed
- Fixed model configuration import paths
  - Updated imports to use correct path from @/config/models
  - Separated model configuration from general constants
  - Fixed type error in getModelName function
  - Improved module organization for model-related code
- Fixed active space management in database
  - Resolved unique constraint violation in active_spaces table
  - Improved set_active_space function to properly handle existing records
  - Added explicit check for existing records before update/insert
  - Added DELETE policy for active_spaces table
  - Enhanced error handling in space activation process

## [2024-02-05]
- Refactored ClientChatContent.tsx to split large useEffect into multiple focused effects:
  - Added separate effects for initial setup, space data loading, conversation management, and message loading
  - Improved code organization and maintainability
  - Removed console.log statements
  - Simplified error handling with early returns

## [2024-02-05]
- Added LLMResponseFormatter component for formatting AI responses:
  - Code block syntax highlighting with Prism.js
  - Copy to clipboard functionality
  - Markdown link parsing
  - Bullet point formatting
  - XML tag handling
  - Support for multiple programming languages
  - Dark theme styling
  - Responsive design with proper spacing
  - Improved code readability with syntax highlighting
  - Added Dracula theme for code blocks

### Performance Issues
- Identified performance bottleneck in markdown renderer:
  - Slow rendering of large markdown content
  - TypeScript type conflicts with marked library
  - Issues with highlight.js integration
  - Investigating alternative approaches for better performance

### Fixed
- Improved markdown spacing and formatting:
  - Added proper paragraph and line break handling
  - Added consistent margins between elements
  - Improved whitespace handling and trimming
  - Added proper margin collapse for nested elements
  - Enhanced heading spacing hierarchy
  - Added proper list and blockquote spacing
  - Fixed code block margins with special first/last handling

### Changed
- Enhanced MarkdownRenderer configuration:
  - Enabled breaks option in markdown-it
  - Added prose-specific margin utilities
  - Improved token processing for better spacing
  - Added prose-spacing class for better margin control

## [Unreleased]

### Fixed
- Improved code block syntax highlighting:
  - Fixed markdown-it highlight function to properly handle code blocks
  - Improved language detection and handling
  - Separated inline code and fence block handling
  - Added proper content trimming for code blocks
  - Enhanced language fallback to 'plain' when not specified

### Changed
- Modified MarkdownRenderer to wrap all segments in a single container instead of creating separate divs for each segment

## [Unreleased]

### Changed
- Refactored markdown renderer styling:
  - Replaced Tailwind prose with custom arbitrary selectors
  - Added specific styling for all heading levels
  - Improved spacing and typography for all elements
  - Enhanced blockquote and link styling
  - Added consistent margins for lists and paragraphs
  - Improved overall visual hierarchy

## [2024-03-19] - Pinecone Integration for Chat Messages

### Added
- Integrated Pinecone vector database for storing chat messages
- Added OpenAI embeddings for semantic search capabilities
- Created Pinecone utility functions for upserting and searching messages
- Added environment variables for Pinecone and OpenAI configuration
- Modified chat route to store messages in Pinecone

### Dependencies Added
- @pinecone-database/pinecone
- @langchain/openai

### Configuration
- Added environment variables:
  - PINECONE_API_KEY
  - PINECONE_ENVIRONMENT
  - PINECONE_INDEX
  - OPENAI_API_KEY

## [User Profile Position Update] - 2024-02-20
### Changed
- Moved UserProfileDropdown to top right corner of protected page
- Added user state management in ClientChatContent
- Improved user profile accessibility and visibility
- Enhanced layout with proper z-index and positioning

## [Unreleased]

### Added
- Added Zustand store for managing active space state globally
- Fixed space selection sync between command window and chat interface

### Changed
- Improved initial space creation and setup flow
  - Added proper sequencing of space creation, activation, and conversation setup
  - Created welcome conversation with initial message
  - Added fallback for setting first space as active if none active
  - Improved error handling with descriptive messages
  - Added proper state refresh after initialization
  - Added proper default provider and model configuration
  - Fixed type safety for provider and model selection
- Improved prop naming in ClientChatContent component
  - Renamed `initialActiveSpace` to `defaultSpace`
  - Renamed `initialConversations` to `defaultConversations`
  - Made prop names more concise and descriptive
- Updated ClientChatContent to use global space store
- Updated QuickActionsCommand to use global space store
- Improved space selection handling to maintain consistency across components

### Fixed
- Fixed model configuration import paths
  - Updated imports to use correct path from @/config/models
  - Separated model configuration from general constants
  - Fixed type error in getModelName function
  - Improved module organization for model-related code
- Fixed active space management in database
  - Resolved unique constraint violation in active_spaces table
  - Improved set_active_space function to properly handle existing records
  - Added explicit check for existing records before update/insert
  - Added DELETE policy for active_spaces table
  - Enhanced error handling in space activation process

## [2024-02-05]
- Refactored ClientChatContent.tsx to split large useEffect into multiple focused effects:
  - Added separate effects for initial setup, space data loading, conversation management, and message loading
  - Improved code organization and maintainability
  - Removed console.log statements
  - Simplified error handling with early returns

## [2024-02-05]
- Added LLMResponseFormatter component for formatting AI responses:
  - Code block syntax highlighting with Prism.js
  - Copy to clipboard functionality
  - Markdown link parsing
  - Bullet point formatting
  - XML tag handling
  - Support for multiple programming languages
  - Dark theme styling
  - Responsive design with proper spacing
  - Improved code readability with syntax highlighting
  - Added Dracula theme for code blocks

### Performance Issues
- Identified performance bottleneck in markdown renderer:
  - Slow rendering of large markdown content
  - TypeScript type conflicts with marked library
  - Issues with highlight.js integration
  - Investigating alternative approaches for better performance

### Fixed
- Improved markdown spacing and formatting:
  - Added proper paragraph and line break handling
  - Added consistent margins between elements
  - Improved whitespace handling and trimming
  - Added proper margin collapse for nested elements
  - Enhanced heading spacing hierarchy
  - Added proper list and blockquote spacing
  - Fixed code block margins with special first/last handling

### Changed
- Enhanced MarkdownRenderer configuration:
  - Enabled breaks option in markdown-it
  - Added prose-specific margin utilities
  - Improved token processing for better spacing
  - Added prose-spacing class for better margin control

## [Unreleased]

### Fixed
- Improved code block syntax highlighting:
  - Fixed markdown-it highlight function to properly handle code blocks
  - Improved language detection and handling
  - Separated inline code and fence block handling
  - Added proper content trimming for code blocks
  - Enhanced language fallback to 'plain' when not specified

### Changed
- Modified MarkdownRenderer to wrap all segments in a single container instead of creating separate divs for each segment

## [Unreleased]

### Changed
- Refactored markdown renderer styling:
  - Replaced Tailwind prose with custom arbitrary selectors
  - Added specific styling for all heading levels
  - Improved spacing and typography for all elements
  - Enhanced blockquote and link styling
  - Added consistent margins for lists and paragraphs
  - Improved overall visual hierarchy

## [2024-03-19] - Pinecone Integration for Chat Messages

### Added
- Integrated Pinecone vector database for storing chat messages
- Added OpenAI embeddings for semantic search capabilities
- Created Pinecone utility functions for upserting and searching messages
- Added environment variables for Pinecone and OpenAI configuration
- Modified chat route to store messages in Pinecone

### Dependencies Added
- @pinecone-database/pinecone
- @langchain/openai

### Configuration
- Added environment variables:
  - PINECONE_API_KEY
  - PINECONE_ENVIRONMENT
  - PINECONE_INDEX
  - OPENAI_API_KEY

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: dev
================
> npm-run-all --parallel electron:dev next:dev


> electron:dev
> npm-run-all --parallel electron:build_watch electron:watch


> next:dev
> next dev


> electron:build_watch
> tsup --watch


> electron:watch
> cross-env NODE_ENV='development' nodemon

 ⚠ Port 3000 is in use, trying 3001 instead.
[nodemon] 3.1.9
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): build/**/*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `electron .`
   ▲ Next.js 15.1.6
   - Local:        http://localhost:3001
   - Network:      http://192.168.0.74:3001
   - Environments: .env.local

 ✓ Starting...
CLI Building entry: electron/main.ts
CLI Using tsconfig: tsconfig.json
CLI tsup v8.3.6
CLI Using tsup config: /Users/dallenpyrah/Spatial/spatial-application/tsup.config.ts
CLI Running in watch mode
CLI Target: es5
CLI Cleaning output folder
CJS Build start
CJS build/main.js 493.00 B
CJS ⚡️ Build success in 59ms
CLI Watching for changes in "."
CLI Ignoring changes in "**/{.git,node_modules}/**" | "build"
2025-02-18 18:22:55.328 Electron[86038:683157] +[IMKClient subclass]: chose IMKClient_Modern
2025-02-18 18:22:55.328 Electron[86038:683157] +[IMKInputSession subclass]: chose IMKInputSession_Modern
 ✓ Ready in 2.2s
 ✓ Compiled in 6s (20364 modules)
 ✓ Compiled in 1073ms (10227 modules)
 GET /protected 404 in 7473ms
 GET /_next/static/css/app/layout.css?v=1739928217040 404 in 13ms
 GET / 200 in 6613ms
 GET / 200 in 33ms
 GET /_next/static/css/app/layout.css?v=1739928217151 404 in 30ms
 ✓ Compiled in 2.5s (20350 modules)
 ✓ Compiled in 2.2s (20350 modules)
 GET /_next/static/chunks/main-app.js?v=1739928217151 404 in 4814ms
 GET /protected 404 in 2929ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 4815ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /protected 200 in 254ms
 GET /_next/static/chunks/main-app.js?v=1739928223856 404 in 23ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 14ms
 GET /protected 200 in 811ms
 GET /_next/static/chunks/app/protected/page.js 404 in 8ms
 ✓ Compiled in 5.3s (20353 modules)
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928231149 404 in 24ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 24ms
 GET /protected 200 in 3468ms
 GET /_next/static/chunks/app/protected/page.js 404 in 68ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928234674 404 in 19ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 19ms
 GET /protected 200 in 224ms
 GET /_next/static/chunks/app/protected/page.js 404 in 8ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928237411 404 in 14ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 14ms
 GET /protected 200 in 277ms
 GET /_next/static/chunks/app/protected/page.js 404 in 7ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928238609 404 in 19ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 19ms
 GET /protected 200 in 226ms
 GET /_next/static/chunks/app/protected/page.js 404 in 8ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928239249 404 in 13ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 14ms
 GET /protected 200 in 239ms
 GET /_next/static/chunks/app/protected/page.js 404 in 7ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928239791 404 in 13ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 12ms
 GET /protected 200 in 232ms
 GET /_next/static/chunks/app/protected/page.js 404 in 6ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928245317 404 in 58ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 57ms
 GET /protected 200 in 570ms
 GET /_next/static/chunks/app/protected/page.js 404 in 15ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/main-app.js?v=1739928248163 404 in 13ms
 GET /_next/static/chunks/app-pages-internals.js 404 in 13ms
 GET /protected 200 in 233ms
 GET /_next/static/chunks/app/protected/page.js 404 in 7ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/app-pages-internals.js 404 in 35ms
 GET /_next/static/chunks/main-app.js?v=1739928250345 404 in 36ms
 GET /protected 200 in 237ms
 GET /_next/static/chunks/app/protected/page.js 404 in 13ms
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthState
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data 
Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.
 GET /_next/static/chunks/app-pages-internals.js 404 in 85ms
 GET /_next/static/chunks/main-app.js?v=1739928263840 404 in 88ms
 GET /protected 200 in 545ms
 GET /_next/static/chunks/app/protected/page.js 404 in 20ms

================
File: middleware.ts
================
import { type NextRequest } from "next/server";
import { updateSession } from "@/utils/supabase/middleware";

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp
     * Feel free to modify this pattern to include more paths.
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};

================
File: next.config.ts
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "standalone",
  reactStrictMode: true,
  env: {
    NEXT_PUBLIC_SUPPORTED_MODELS: process.env.SUPPORTED_MODELS,
    NEXT_PUBLIC_MODEL_PROVIDERS: process.env.MODEL_PROVIDERS,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'unpkg.com',
        pathname: '/@lobehub/**',
      },
      {
        protocol: 'https',
        hostname: 'registry.npmmirror.com',
        pathname: '/@lobehub/**',
      }
    ],
  },
  transpilePackages: ['@lobehub/icons'],
};

export default nextConfig;

================
File: nodemon.json
================
{
    "$schema": "https://json.schemastore.org/nodemon.json",
    "exec": "electron .",
    "watch": ["build"],
    "ignore": ["build", "public/build"]
  }

================
File: package.json
================
{
  "private": true,
  "main": "build/main.js",
  "scripts": {
    "next:dev": "next dev",
    "next:build": "next build",
    "electron:build": "tsup",
    "electron:build_watch": "tsup --watch",
    "electron:watch": "cross-env NODE_ENV='development' nodemon",
    "electron:dev": "npm-run-all --parallel electron:build_watch electron:watch",
    "dev": "npm-run-all --parallel electron:dev next:dev"
  },
  "dependencies": {
    "@agentic/ai-sdk": "^7.3.1",
    "@ai-sdk/anthropic": "^1.1.6",
    "@ai-sdk/cerebras": "^0.1.8",
    "@ai-sdk/cohere": "^1.1.7",
    "@ai-sdk/deepseek": "^0.1.8",
    "@ai-sdk/fireworks": "^0.1.8",
    "@ai-sdk/google": "^1.1.10",
    "@ai-sdk/groq": "^1.1.7",
    "@ai-sdk/mistral": "^1.1.6",
    "@ai-sdk/openai": "^1.1.9",
    "@ai-sdk/perplexity": "^0.0.7",
    "@ai-sdk/togetherai": "^0.1.9",
    "@ai-sdk/xai": "^1.1.8",
    "@electron-toolkit/utils": "^3.0.0",
    "@langchain/openai": "^0.4.4",
    "@lobehub/icons": "^1.68.0",
    "@openrouter/ai-sdk-provider": "^0.2.0",
    "@pinecone-database/pinecone": "^5.0.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "latest",
    "@supabase/supabase-js": "latest",
    "@types/highlight.js": "^10.1.0",
    "@types/markdown-it": "^14.1.2",
    "@types/marked": "^6.0.0",
    "@types/prismjs": "^1.26.5",
    "@upstash/qstash": "^2.7.22",
    "@upstash/redis": "^1.34.4",
    "ai": "^4.1.34",
    "autoprefixer": "10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "developer-icons": "^5.2.9",
    "emoji-picker-react": "^4.12.0",
    "framer-motion": "^12.0.6",
    "get-port-please": "^3.1.2",
    "highlight.js": "^11.11.1",
    "isomorphic-dompurify": "^2.21.0",
    "lodash": "^4.17.21",
    "lucide-react": "^0.468.0",
    "markdown-it": "^14.1.0",
    "markdown-it-jsx": "^1.1.0",
    "marked": "^15.0.7",
    "marked-base-url": "^1.1.6",
    "marked-gfm-heading-id": "^4.1.1",
    "marked-highlight": "^2.2.1",
    "marked-mangle": "^1.1.10",
    "next": "latest",
    "next-themes": "^0.4.3",
    "prettier": "^3.3.3",
    "prismjs": "^1.29.0",
    "react": "19.0.0",
    "react-colorful": "^5.6.1",
    "react-dom": "19.0.0",
    "react-hotkeys-hook": "^4.6.1",
    "react-intersection-observer": "^9.15.1",
    "react-markdown": "^9.0.3",
    "react-syntax-highlighter": "^15.6.1",
    "react-textarea-autosize": "^8.5.7",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.1",
    "shiki": "^2.2.0",
    "sonner": "^2.0.1",
    "use-stick-to-bottom": "^1.0.46",
    "zod": "^3.24.1",
    "zod-to-json-schema": "^3.24.1",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@swc/core": "^1.10.12",
    "@swc/helpers": "^0.5.15",
    "@types/lodash": "^4.17.15",
    "@types/node": "22.10.2",
    "@types/react": "^19.0.2",
    "@types/react-dom": "19.0.2",
    "@types/react-syntax-highlighter": "^15.5.13",
    "cross-env": "^7.0.3",
    "electron": "^34.0.2",
    "electron-builder": "^25.1.8",
    "nodemon": "^3.1.9",
    "npm-run-all": "^4.1.5",
    "postcss": "8.4.49",
    "tailwind-merge": "^2.6.0",
    "tailwindcss": "3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "tsup": "^8.3.6",
    "typescript": "5.7.2"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
<a href="https://demo-nextjs-with-supabase.vercel.app/">
  <img alt="Next.js and Supabase Starter Kit - the fastest way to build apps with Next.js and Supabase" src="https://demo-nextjs-with-supabase.vercel.app/opengraph-image.png">
  <h1 align="center">Next.js and Supabase Starter Kit</h1>
</a>

<p align="center">
 The fastest way to build apps with Next.js and Supabase
</p>

<p align="center">
  <a href="#features"><strong>Features</strong></a> ·
  <a href="#demo"><strong>Demo</strong></a> ·
  <a href="#deploy-to-vercel"><strong>Deploy to Vercel</strong></a> ·
  <a href="#clone-and-run-locally"><strong>Clone and run locally</strong></a> ·
  <a href="#feedback-and-issues"><strong>Feedback and issues</strong></a>
  <a href="#more-supabase-examples"><strong>More Examples</strong></a>
</p>
<br/>

## Features

- Works across the entire [Next.js](https://nextjs.org) stack
  - App Router
  - Pages Router
  - Middleware
  - Client
  - Server
  - It just works!
- supabase-ssr. A package to configure Supabase Auth to use cookies
- Styling with [Tailwind CSS](https://tailwindcss.com)
- Components with [shadcn/ui](https://ui.shadcn.com/)
- Optional deployment with [Supabase Vercel Integration and Vercel deploy](#deploy-your-own)
  - Environment variables automatically assigned to Vercel project

## Demo

You can view a fully working demo at [demo-nextjs-with-supabase.vercel.app](https://demo-nextjs-with-supabase.vercel.app/).

## Deploy to Vercel

Vercel deployment will guide you through creating a Supabase account and project.

After installation of the Supabase integration, all relevant environment variables will be assigned to the project so the deployment is fully functioning.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png)

The above will also clone the Starter kit to your GitHub, you can clone that locally and develop locally.

If you wish to just develop locally and not deploy to Vercel, [follow the steps below](#clone-and-run-locally).

## Clone and run locally

1. You'll first need a Supabase project which can be made [via the Supabase dashboard](https://database.new)

2. Create a Next.js app using the Supabase Starter template npx command

   ```bash
   npx create-next-app --example with-supabase with-supabase-app
   ```

   ```bash
   yarn create next-app --example with-supabase with-supabase-app
   ```

   ```bash
   pnpm create next-app --example with-supabase with-supabase-app
   ```

3. Use `cd` to change into the app's directory

   ```bash
   cd with-supabase-app
   ```

4. Rename `.env.example` to `.env.local` and update the following:

   ```
   NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
   ```

   Both `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` can be found in [your Supabase project's API settings](https://app.supabase.com/project/_/settings/api)

5. You can now run the Next.js local development server:

   ```bash
   npm run dev
   ```

   The starter kit should now be running on [localhost:3000](http://localhost:3000/).

6. This template comes with the default shadcn/ui style initialized. If you instead want other ui.shadcn styles, delete `components.json` and [re-install shadcn/ui](https://ui.shadcn.com/docs/installation/next)

> Check out [the docs for Local Development](https://supabase.com/docs/guides/getting-started/local-development) to also run Supabase locally.

## Feedback and issues

Please file feedback and issues over on the [Supabase GitHub org](https://github.com/supabase/supabase/issues/new/choose).

## More Supabase examples

- [Next.js Subscription Payments Starter](https://github.com/vercel/nextjs-subscription-payments)
- [Cookie-based Auth and the Next.js 13 App Router (free course)](https://youtube.com/playlist?list=PL5S4mPUpp4OtMhpnp93EFSo42iQ40XjbF)
- [Supabase Auth and the Next.js App Router](https://github.com/supabase/supabase/tree/master/examples/auth/nextjs)
# spatial-application

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: tsup.config.ts
================
import { defineConfig } from "tsup";

export default defineConfig({
  entry: ["./electron/main.ts", "./electron/preload.ts"],
  splitting: false,
  sourcemap: false,
  clean: true,
  outDir: "build",
  external: ["electron"],
  format: ["cjs"]
});
